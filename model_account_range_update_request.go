/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"time"
)

// AccountRangeUpdateRequest struct for AccountRangeUpdateRequest
type AccountRangeUpdateRequest struct {
	// The time when account range becomes inactive
	EndDate            *time.Time          `json:"end_date,omitempty"`
	PhysicalCardFormat *PhysicalCardFormat `json:"physical_card_format,omitempty"`
	// The time when account range becomes active
	StartDate *time.Time `json:"start_date,omitempty"`
}

// NewAccountRangeUpdateRequest instantiates a new AccountRangeUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountRangeUpdateRequest() *AccountRangeUpdateRequest {
	this := AccountRangeUpdateRequest{}
	return &this
}

// NewAccountRangeUpdateRequestWithDefaults instantiates a new AccountRangeUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountRangeUpdateRequestWithDefaults() *AccountRangeUpdateRequest {
	this := AccountRangeUpdateRequest{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AccountRangeUpdateRequest) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRangeUpdateRequest) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AccountRangeUpdateRequest) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *AccountRangeUpdateRequest) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetPhysicalCardFormat returns the PhysicalCardFormat field value if set, zero value otherwise.
func (o *AccountRangeUpdateRequest) GetPhysicalCardFormat() PhysicalCardFormat {
	if o == nil || o.PhysicalCardFormat == nil {
		var ret PhysicalCardFormat
		return ret
	}
	return *o.PhysicalCardFormat
}

// GetPhysicalCardFormatOk returns a tuple with the PhysicalCardFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRangeUpdateRequest) GetPhysicalCardFormatOk() (*PhysicalCardFormat, bool) {
	if o == nil || o.PhysicalCardFormat == nil {
		return nil, false
	}
	return o.PhysicalCardFormat, true
}

// HasPhysicalCardFormat returns a boolean if a field has been set.
func (o *AccountRangeUpdateRequest) HasPhysicalCardFormat() bool {
	if o != nil && o.PhysicalCardFormat != nil {
		return true
	}

	return false
}

// SetPhysicalCardFormat gets a reference to the given PhysicalCardFormat and assigns it to the PhysicalCardFormat field.
func (o *AccountRangeUpdateRequest) SetPhysicalCardFormat(v PhysicalCardFormat) {
	o.PhysicalCardFormat = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AccountRangeUpdateRequest) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRangeUpdateRequest) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AccountRangeUpdateRequest) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *AccountRangeUpdateRequest) SetStartDate(v time.Time) {
	o.StartDate = &v
}

func (o AccountRangeUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.PhysicalCardFormat != nil {
		toSerialize["physical_card_format"] = o.PhysicalCardFormat
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	return json.Marshal(toSerialize)
}

type NullableAccountRangeUpdateRequest struct {
	value *AccountRangeUpdateRequest
	isSet bool
}

func (v NullableAccountRangeUpdateRequest) Get() *AccountRangeUpdateRequest {
	return v.value
}

func (v *NullableAccountRangeUpdateRequest) Set(val *AccountRangeUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountRangeUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountRangeUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountRangeUpdateRequest(val *AccountRangeUpdateRequest) *NullableAccountRangeUpdateRequest {
	return &NullableAccountRangeUpdateRequest{value: val, isSet: true}
}

func (v NullableAccountRangeUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountRangeUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
