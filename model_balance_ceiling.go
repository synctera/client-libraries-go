/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// BalanceCeiling struct for BalanceCeiling
type BalanceCeiling struct {
	// Maximum balance in the account's currency
	Balance int64 `json:"balance"`
	// ID of overflow account for JIT funding of transactions
	OverflowAccountId *string `json:"overflow_account_id,omitempty"`
}

// NewBalanceCeiling instantiates a new BalanceCeiling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceCeiling(balance int64) *BalanceCeiling {
	this := BalanceCeiling{}
	this.Balance = balance
	return &this
}

// NewBalanceCeilingWithDefaults instantiates a new BalanceCeiling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceCeilingWithDefaults() *BalanceCeiling {
	this := BalanceCeiling{}
	return &this
}

// GetBalance returns the Balance field value
func (o *BalanceCeiling) GetBalance() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *BalanceCeiling) GetBalanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *BalanceCeiling) SetBalance(v int64) {
	o.Balance = v
}

// GetOverflowAccountId returns the OverflowAccountId field value if set, zero value otherwise.
func (o *BalanceCeiling) GetOverflowAccountId() string {
	if o == nil || o.OverflowAccountId == nil {
		var ret string
		return ret
	}
	return *o.OverflowAccountId
}

// GetOverflowAccountIdOk returns a tuple with the OverflowAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceCeiling) GetOverflowAccountIdOk() (*string, bool) {
	if o == nil || o.OverflowAccountId == nil {
		return nil, false
	}
	return o.OverflowAccountId, true
}

// HasOverflowAccountId returns a boolean if a field has been set.
func (o *BalanceCeiling) HasOverflowAccountId() bool {
	if o != nil && o.OverflowAccountId != nil {
		return true
	}

	return false
}

// SetOverflowAccountId gets a reference to the given string and assigns it to the OverflowAccountId field.
func (o *BalanceCeiling) SetOverflowAccountId(v string) {
	o.OverflowAccountId = &v
}

func (o BalanceCeiling) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if o.OverflowAccountId != nil {
		toSerialize["overflow_account_id"] = o.OverflowAccountId
	}
	return json.Marshal(toSerialize)
}

type NullableBalanceCeiling struct {
	value *BalanceCeiling
	isSet bool
}

func (v NullableBalanceCeiling) Get() *BalanceCeiling {
	return v.value
}

func (v *NullableBalanceCeiling) Set(val *BalanceCeiling) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceCeiling) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceCeiling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceCeiling(val *BalanceCeiling) *NullableBalanceCeiling {
	return &NullableBalanceCeiling{value: val, isSet: true}
}

func (v NullableBalanceCeiling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceCeiling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
