/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// AccountVerification - Information about the account verification process. If the account has not been verified, this will be null.
type AccountVerification struct {
	FinicityAccountVerification *FinicityAccountVerification
	ManualAccountVerification   *ManualAccountVerification
	PlaidAccountVerification    *PlaidAccountVerification
}

// FinicityAccountVerificationAsAccountVerification is a convenience function that returns FinicityAccountVerification wrapped in AccountVerification
func FinicityAccountVerificationAsAccountVerification(v *FinicityAccountVerification) AccountVerification {
	return AccountVerification{FinicityAccountVerification: v}
}

// ManualAccountVerificationAsAccountVerification is a convenience function that returns ManualAccountVerification wrapped in AccountVerification
func ManualAccountVerificationAsAccountVerification(v *ManualAccountVerification) AccountVerification {
	return AccountVerification{ManualAccountVerification: v}
}

// PlaidAccountVerificationAsAccountVerification is a convenience function that returns PlaidAccountVerification wrapped in AccountVerification
func PlaidAccountVerificationAsAccountVerification(v *PlaidAccountVerification) AccountVerification {
	return AccountVerification{PlaidAccountVerification: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AccountVerification) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'FINICITY'
	if jsonDict["vendor"] == "FINICITY" {
		// try to unmarshal JSON data into FinicityAccountVerification
		err = json.Unmarshal(data, &dst.FinicityAccountVerification)
		if err == nil {
			return nil // data stored in dst.FinicityAccountVerification, return on the first match
		} else {
			dst.FinicityAccountVerification = nil
			return fmt.Errorf("Failed to unmarshal AccountVerification as FinicityAccountVerification: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MANUAL'
	if jsonDict["vendor"] == "MANUAL" {
		// try to unmarshal JSON data into ManualAccountVerification
		err = json.Unmarshal(data, &dst.ManualAccountVerification)
		if err == nil {
			return nil // data stored in dst.ManualAccountVerification, return on the first match
		} else {
			dst.ManualAccountVerification = nil
			return fmt.Errorf("Failed to unmarshal AccountVerification as ManualAccountVerification: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PLAID'
	if jsonDict["vendor"] == "PLAID" {
		// try to unmarshal JSON data into PlaidAccountVerification
		err = json.Unmarshal(data, &dst.PlaidAccountVerification)
		if err == nil {
			return nil // data stored in dst.PlaidAccountVerification, return on the first match
		} else {
			dst.PlaidAccountVerification = nil
			return fmt.Errorf("Failed to unmarshal AccountVerification as PlaidAccountVerification: %s", err.Error())
		}
	}

	// check if the discriminator value is 'finicity_account_verification'
	if jsonDict["vendor"] == "finicity_account_verification" {
		// try to unmarshal JSON data into FinicityAccountVerification
		err = json.Unmarshal(data, &dst.FinicityAccountVerification)
		if err == nil {
			return nil // data stored in dst.FinicityAccountVerification, return on the first match
		} else {
			dst.FinicityAccountVerification = nil
			return fmt.Errorf("Failed to unmarshal AccountVerification as FinicityAccountVerification: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual_account_verification'
	if jsonDict["vendor"] == "manual_account_verification" {
		// try to unmarshal JSON data into ManualAccountVerification
		err = json.Unmarshal(data, &dst.ManualAccountVerification)
		if err == nil {
			return nil // data stored in dst.ManualAccountVerification, return on the first match
		} else {
			dst.ManualAccountVerification = nil
			return fmt.Errorf("Failed to unmarshal AccountVerification as ManualAccountVerification: %s", err.Error())
		}
	}

	// check if the discriminator value is 'plaid_account_verification'
	if jsonDict["vendor"] == "plaid_account_verification" {
		// try to unmarshal JSON data into PlaidAccountVerification
		err = json.Unmarshal(data, &dst.PlaidAccountVerification)
		if err == nil {
			return nil // data stored in dst.PlaidAccountVerification, return on the first match
		} else {
			dst.PlaidAccountVerification = nil
			return fmt.Errorf("Failed to unmarshal AccountVerification as PlaidAccountVerification: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AccountVerification) MarshalJSON() ([]byte, error) {
	if src.FinicityAccountVerification != nil {
		return json.Marshal(&src.FinicityAccountVerification)
	}

	if src.ManualAccountVerification != nil {
		return json.Marshal(&src.ManualAccountVerification)
	}

	if src.PlaidAccountVerification != nil {
		return json.Marshal(&src.PlaidAccountVerification)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AccountVerification) GetActualInstance() interface{} {
	if obj.FinicityAccountVerification != nil {
		return obj.FinicityAccountVerification
	}

	if obj.ManualAccountVerification != nil {
		return obj.ManualAccountVerification
	}

	if obj.PlaidAccountVerification != nil {
		return obj.PlaidAccountVerification
	}

	// all schemas are nil
	return nil
}

type NullableAccountVerification struct {
	value *AccountVerification
	isSet bool
}

func (v NullableAccountVerification) Get() *AccountVerification {
	return v.value
}

func (v *NullableAccountVerification) Set(val *AccountVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountVerification(val *AccountVerification) *NullableAccountVerification {
	return &NullableAccountVerification{value: val, isSet: true}
}

func (v NullableAccountVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
