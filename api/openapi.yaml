openapi: 3.0.3
info:
  description: |
    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Synctera API
  version: 0.5.0
servers:
- description: Production
  url: https://api.synctera.com/v0
- description: Sandbox (no real world financial impact)
  url: https://api-sandbox.synctera.com/v0
security:
- bearerAuth: []
tags:
- description: Request to create and manage accounts
  name: Accounts
- description: Requests to issue and manage cards
  name: Cards
- description: Requests to create and manage customers
  name: Customers
- description: |
    The disclosures resource is used to track the status of disclosures and
    ensure that all parties have been shown the necessary disclosures to meet
    regulatory obligations.
  name: Disclosures
- description: |
    The External Account resource is used for managing links to accounts
    that operate outside of the Synctera ecosystem.
  name: External Accounts
- description: Requests to initiate customer verification.
  name: KYC Verification
- description: Requests to create and manage reconciliation
  name: Reconciliations
- description: Create and manage transactions
  name: Transactions
- description: Request to enroll, renew, or cancel watchlist monitors
  name: Watchlist
- description: Requests to create and manage webhooks
  name: Webhooks
paths:
  /accounts:
    get:
      description: Get paginated list of Accounts associated
      operationId: listAccounts
      parameters:
      - description: |
          Account ID(s). Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: 64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157
          items:
            format: uuid
            type: string
          type: array
        style: form
        x-external: true
      - description: |
          Account number(s). Multiple account numbers can be provided as a comma-separated list.
          When only a single account number is provided, any * characters in the string are wildcards, and match any characters.
        explode: false
        in: query
        name: account_number
        required: false
        schema:
          example: "2345678108180014864"
          items:
            type: string
          type: array
        style: form
        x-external: true
      - explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/status'
        style: form
        x-external: true
      - description: Interest product ID that accounts associate with. Multiple IDs
          can be provided as a comma-separated list.
        explode: true
        in: query
        name: interest_product_id
        required: false
        schema:
          type: string
        style: form
        x-external: true
      - description: The customer's unique identifier
        explode: true
        in: query
        name: customer_id
        required: false
        schema:
          $ref: '#/components/schemas/customer_id'
        style: form
        x-external: true
      - explode: true
        in: query
        name: first_name
        required: false
        schema:
          description: Only return resources where the first_name field matches the
            specified string. Any * characters in the string are wildcards, and match
            any characters.
          example: Alice
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: last_name
        required: false
        schema:
          description: Only return resources where the last_name field matches the
            specified string. Any * characters in the string are wildcards, and match
            any characters.
          example: Smith
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      - description: |
          Specifies the sort order for the returned accounts.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - account_number:asc
            - account_number:desc
            - account_type:asc
            - account_type:desc
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
            type: string
          type: array
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_list'
          description: List of accounts
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List accounts
      tags:
      - Accounts
      x-external: true
    post:
      description: |
        Create a shadow mode or lead mode account. You need to determine the mode according to integrator configuration, and specify the required fields accordingly.

        Shadow mode required fields:
          - account_number
          - status

        Lead mode required fields:
          - account_template_id
          - relationships
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_creation'
        description: Account to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Created account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
      summary: Create an account
      tags:
      - Accounts
      x-external: true
    summary: Accounts
  /accounts/{account_id}:
    delete:
      description: Delete account
      operationId: deleteAccount
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Delete account
      tags:
      - Accounts
      x-external: true
    get:
      description: Get an account
      operationId: getAccount
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get account
      tags:
      - Accounts
      x-external: true
    patch:
      description: |
        Patch account.

        Immutable fields:
          - account_number
          - account_type
          - account_template_id

        Please note:
          - Other fields cannot be modified when access_status is FROZEN.
          - access_status has to be patched individually without other fields.
      operationId: patchAccount
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        description: Account fields to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Updated account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Patch account
      tags:
      - Accounts
      x-external: true
    put:
      description: |
        Update account

        Shadow mode required fields:
          - account_number
          - status

        Lead mode required fields:
          - All fields are required.

        Please note:
          - access_status needs to be in ACTIVE.
          - PUT request cannot change access_status.
      operationId: updateAccount
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        description: Account to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Updated account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Update account
      tags:
      - Accounts
      x-external: true
    summary: account
  /accounts/{account_id}/relationships:
    get:
      description: List all customers of an account
      operationId: listAccountRelationship
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_list'
          description: List of account relationships
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: List account relationships
      tags:
      - Accounts
      x-external: true
    post:
      description: Add a customer to an account
      operationId: createAccountRelationship
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship'
        description: Account relationship object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
          description: Account relationship object
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Create account relationship
      tags:
      - Accounts
      x-external: true
    summary: Account Relationship
  /accounts/{account_id}/relationships/{relationship_id}:
    delete:
      description: Delete account relationship
      operationId: DeleteAccountRelationship
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Relationship ID of the account associate with the account entity
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Delete account relationship
      tags:
      - Accounts
      x-external: true
    get:
      description: Get account relationship by ID
      operationId: getAccountRelationship
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Relationship ID of the account associate with the account entity
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
          description: Account relationship
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get account relationship
      tags:
      - Accounts
      x-external: true
    put:
      description: Update account relationship. Only relationship_type can be updated.
        customer_id should not be modified.
      operationId: updateAccountRelationship
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Relationship ID of the account associate with the account entity
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship'
        description: Account relationship to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
          description: Updated account relationship
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Update account relationship
      tags:
      - Accounts
      x-external: true
    summary: Account Relationship
  /accounts/products:
    get:
      description: |
        List account Products
      operationId: listAccountResourceProducts
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      - description: Date range filtering for type INTEREST. All rates in interest
          resource have to have valid_from later or equal to start_date.
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: Date range filtering for type INTEREST. All rates in interest
          resource have to have valid_to earlier or equal to end_date.
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: Type of account product
        explode: true
        in: query
        name: product_type
        required: true
        schema:
          enum:
          - FEE
          - INTEREST
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product_list'
          description: List of account products
      summary: List account products
      tags:
      - Accounts
      x-external: true
    post:
      description: |
        Create an account product. Rates cannot be nil or empty.
      operationId: createAccountResourceProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_product'
        description: Account product to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product'
          description: Account product created
      summary: Create an account product
      tags:
      - Accounts
      x-external: true
    summary: Account products
  /accounts/products/{product_id}:
    patch:
      description: |
        Patch account product. Rates requires at minimum 1 entry if specified.
      operationId: patchAccountProduct
      parameters:
      - description: Account Product ID
        explode: false
        in: path
        name: product_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_account_product'
        description: Account product fields to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product'
          description: Updated account product
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Patch account product
      tags:
      - Accounts
      x-external: true
    summary: Account products
  /accounts/templates:
    get:
      description: |
        List account templates
      operationId: listAccountTemplates
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template_list'
          description: List of account templates
      summary: List account templates
      tags:
      - Accounts
      x-external: true
    post:
      description: |
        Create an account template. An account template is need when create an account in a lead mode
      operationId: createAccountTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_template'
        description: Account template to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template'
          description: Account template created
      summary: Create an account template
      tags:
      - Accounts
      x-external: true
    summary: Accounts
  /accounts/templates/{template_id}:
    delete:
      description: Delete account template
      operationId: DeleteAccountTemplate
      parameters:
      - description: Account Template ID
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Delete account template
      tags:
      - Accounts
      x-external: true
    get:
      description: Get an account template
      operationId: getAccountTemplate
      parameters:
      - description: Account Template ID
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template'
          description: Account Template
      summary: Get account template
      tags:
      - Accounts
      x-external: true
    put:
      description: |
        Update account template
      operationId: updateAccountTemplate
      parameters:
      - description: Account Template ID
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_template'
        description: Account template to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template'
          description: Account template updated
      summary: Update account template
      tags:
      - Accounts
      x-external: true
    summary: account
  /cards:
    description: |
      The Card object represents your customer's spending card.
    get:
      description: |
        List of cards matching query parameters
      operationId: listCards
      parameters:
      - explode: true
        in: query
        name: tenant
        required: false
        schema:
          $ref: '#/components/schemas/tenant'
        style: form
        x-external: true
      - explode: true
        in: query
        name: customer_id
        required: false
        schema:
          $ref: '#/components/schemas/customer_id1'
        style: form
        x-external: true
      - explode: true
        in: query
        name: account_id
        required: false
        schema:
          $ref: '#/components/schemas/account_id'
        style: form
        x-external: true
      - description: emboss name
        explode: true
        in: query
        name: emboss_name
        required: false
        schema:
          type: string
        style: form
        x-external: true
      - description: The last 4 digits of the card PAN
        explode: true
        in: query
        name: last_four
        required: false
        schema:
          example: "1234"
          pattern: ^\d{4}$
          type: string
        style: form
        x-external: true
      - description: The date representing when the card would expire at
        explode: true
        in: query
        name: expiration_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: Indicates the type of card
        explode: true
        in: query
        name: card_type
        required: false
        schema:
          enum:
          - DEBIT
          type: string
        style: form
        x-external: true
      - description: The brand of a card product
        explode: true
        in: query
        name: card_brand
        required: false
        schema:
          $ref: '#/components/schemas/card_brand'
        style: form
        x-external: true
      - description: The format of the card
        explode: true
        in: query
        name: form
        required: false
        schema:
          $ref: '#/components/schemas/form'
        style: form
        x-external: true
      - explode: true
        in: query
        name: card_product_id
        required: false
        schema:
          $ref: '#/components/schemas/card_product_id'
        style: form
        x-external: true
      - description: The status of a card
        explode: true
        in: query
        name: card_status
        required: false
        schema:
          $ref: '#/components/schemas/card_status'
        style: form
        x-external: true
      - description: The postal code of a card user
        explode: true
        in: query
        name: postal_code
        required: false
        schema:
          example: "49633"
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      - description: |
          Specifies the sort order for the returned cards.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - account_id:asc
            - account_id:desc
            - customer_id:asc
            - customer_id:desc
            - card_product_id:asc
            - card_product_id:desc
            - last_four:asc
            - last_four:desc
            - card_type:asc
            - card_type:desc
            - card_brand:asc
            - card_brand:desc
            - expiration_date:asc
            - expiration_date:desc
            - form:asc
            - form:desc
            - card_status:asc
            - card_status:desc
            type: string
          type: array
        style: form
        x-external: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_list_response'
          description: Cards
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Cards
      tags:
      - Cards
      x-external: true
    post:
      description: |
        Issue or reissue a new card for a customer
      operationId: issueCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_issuance_request'
        description: Card to issue
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card issued
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Issue a Card
      tags:
      - Cards
      x-external: true
    summary: Cards
  /cards/{card_id}:
    description: |
      The Card object represents your customer's spending card.
    get:
      description: |
        Get the details about a card that has been issued
      operationId: getCard
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Card
      tags:
      - Cards
      x-external: true
    patch:
      description: |
        Integrators can update the card resource to change status, update shipping (if the card hasn't been shipped) or edit metadata.
      operationId: updateCard
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_edit_request'
        description: Card edits
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card issued
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Card
      tags:
      - Cards
      x-external: true
    summary: Cards
  /cards/{card_id}/barcodes:
    get:
      description: |
        This endpoint is for testing environment only to provide access to barcode of a test card
      operationId: getCardBarcode
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Barcode
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Card Barcode
      tags:
      - Cards
      x-external: true
    summary: Cards
  /cards/{card_id}/changes:
    get:
      description: |
        List card change history
      operationId: listChanges
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_changes_list'
          description: List of card changes
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Card Changes
      tags:
      - Cards
      x-external: true
  /cards/{card_id}/client_token:
    description: |
      Client access token for accessing privileged details about a card
    post:
      description: |
        Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner.
      operationId: getClientAccessToken
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client_token'
          description: Client token
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a client token
      tags:
      - Cards
      x-external: true
    summary: Get Client Access Token
  /cards/account_ranges/{account_range_id}:
    patch:
      description: |
        Update account range data
      operationId: updateAccountRange
      parameters:
      - explode: false
        in: path
        name: account_range_id
        required: true
        schema:
          $ref: '#/components/schemas/account_range_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_range_update_request'
        description: Fields to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_range_response'
          description: Updated account range details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Account Range
      tags:
      - Cards
      x-external: true
  /cards/activate:
    description: |
      Activate a card
    post:
      description: |
        Activate a card
      operationId: activateCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_activation_request'
        description: Card activation code
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card activated successfully
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Activate a card
      tags:
      - Cards
      x-external: true
    summary: Card Activation
  /cards/bins/{bin_id}:
    patch:
      description: |
        Update bin data
      operationId: updateBin
      parameters:
      - explode: false
        in: path
        name: bin_id
        required: true
        schema:
          $ref: '#/components/schemas/bin_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bin_update_request'
        description: Fields to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bin_response'
          description: Updated BIN details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update BIN
      tags:
      - Cards
      x-external: true
  /cards/card_widget_url:
    get:
      description: |
        This endpoint returns a URL address of the specified widget for a given card
      operationId: getCardWidgetURL
      parameters:
      - description: The type of widget for which to construct the URL
        explode: true
        in: query
        name: widget_type
        required: true
        schema:
          $ref: '#/components/schemas/widget_type'
        style: form
        x-external: true
      - explode: true
        in: query
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id1'
        style: form
        x-external: true
      - explode: true
        in: query
        name: account_id
        required: true
        schema:
          $ref: '#/components/schemas/account_id'
        style: form
        x-external: true
      - description: The ID of the card (required for set PIN widget)
        explode: true
        in: query
        name: card_id
        required: false
        schema:
          $ref: '#/components/schemas/card_id'
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_widget_url_response'
          description: Card issued
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Get card widget URL
      tags:
      - Cards
      x-external: true
    summary: Get Card Widget URL
  /cards/images:
    get:
      description: |
        List all card image details
      operationId: listCardImageDetails
      parameters:
      - explode: true
        in: query
        name: customer_id
        required: false
        schema:
          $ref: '#/components/schemas/customer_id1'
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details_list'
          description: List of details for images uploaded by the given customer
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Card Image Details
      tags:
      - Cards
      x-external: true
    post:
      description: |
        Create a card image entity. Note that this may include the image data itself but it is not required. You may upload the image data via a subsequent PUT request using the ID created here. If including the image data in this request it must be base64 encoded within the JSON payload.
      operationId: createCardImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_card_image_request'
        description: Details of the image to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
          description: Card image entity created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create Card Image
      tags:
      - Cards
      x-external: true
  /cards/images/{card_image_id}:
    get:
      description: |
        Get card image details
      operationId: getCardImageDetails
      parameters:
      - explode: false
        in: path
        name: card_image_id
        required: true
        schema:
          $ref: '#/components/schemas/card_image_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
          description: Details of the card image
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Card Image Details
      tags:
      - Cards
      x-external: true
  /cards/single_use_token:
    post:
      description: |
        This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user
      operationId: getClientSingleUseToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/single_use_token_request'
        description: User token details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/single_use_token_response'
          description: Token Created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get single-use token
      tags:
      - Cards
      x-external: true
    summary: Get Single-Use Token
  /customers:
    description: |
      The Customer object represents your customer's identity.  You can then verify the identity of this customer and associate them with other people and accounts
    get:
      description: Retrieves paginated list of Customers associated with the authorized
        requester
      operationId: listCustomers
      parameters:
      - description: Unique resource identifier
        explode: false
        in: query
        name: id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
        x-external: true
      - explode: true
        in: query
        name: first_name
        required: false
        schema:
          description: Only return resources where the first_name field matches the
            specified string. Any * characters in the string are wildcards, and match
            any characters.
          example: Alice
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: last_name
        required: false
        schema:
          description: Only return resources where the last_name field matches the
            specified string. Any * characters in the string are wildcards, and match
            any characters.
          example: Smith
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: phone_number
        required: false
        schema:
          description: Only return resources where the phone_number field matches
            the specified string. Phone numbers use the E.164 format e.g. +19178675309.
            Any * characters in the string are wildcards, and match any characters.
          example: +12065550100
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: email
        required: false
        schema:
          description: Only return resources where the email field matches the specified
            string. Any * characters in the string are wildcards, and match any characters.
          example: john.doe@example.com
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: ssn_last_4
        required: false
        schema:
          description: Only return resources where the last 4 characters of the SSN
            match the specified value.
          example: "6789"
          maxLength: 4
          minLength: 4
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: status
        required: false
        schema:
          description: Only return resources where with the specified status.
          enum:
          - PROSPECT
          - ACTIVE
          - FROZEN
          - ESCHEAT
          - DECEASED
          - SANCTION
          - DORMANT
          - DENIED
          example: ACTIVE
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      - description: |
          Specifies the sort order for the returned customers.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - creation_time:asc
            - creation_time:desc
            - last_updated_time:asc
            - last_updated_time:desc
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
            type: string
          type: array
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_list'
          description: List of customers
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Customers
      tags:
      - Customers
      x-external: true
    post:
      description: |
        The customer object represents your customer's identity. You can then verify the identity of this customer and associate them with other people and accounts.
        Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_in_path'
        description: Customer to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
          description: Created customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Customer
      tags:
      - Customers
      x-external: true
    summary: Customer
  /customers/{customer_id}:
    description: |
      This resource represents a customer.  Each customer is identified by a customer `ID`
    get:
      description: Get Customer based on ID
      operationId: getCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
          description: Customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Customer
      tags:
      - Customers
      x-external: true
    patch:
      description: |
        Patch fields of customer based on ID
        Note that if:
          * legal address is provided in the request, AND
          * shipping_address is not provided in the request, AND
          * the customer resource does not have shipping_address
          then shipping_address will be set to a copy of the legal_address.
      operationId: patchCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_customer'
        description: Customer to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
          description: Patched customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch Customer
      tags:
      - Customers
      x-external: true
    put:
      description: |
        Update customer based on ID
        Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.
      operationId: updateCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_in_path'
        description: Customer to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
          description: Updated customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Customer
      tags:
      - Customers
      x-external: true
    summary: Customer
  /customers/{customer_id}/employment:
    get:
      description: |
        Get a list of customer's current employment records. To see historic employment pass the `include_history` flag.
      operationId: getAllCustomerEmployment
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: If true, include old (inactive) records as well.
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          default: false
          type: boolean
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment_list'
          description: List of customer employment records.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List customer employment records
      tags:
      - Customers
      x-external: true
    post:
      description: Create a customer employment record.
      operationId: createCustomerEmployment
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employment'
        description: Customer employment record to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
          description: Created customer employment record.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create employment record
      tags:
      - Customers
      x-external: true
    summary: Customer employment group operations
  /customers/{customer_id}/employment/{employment_id}:
    get:
      description: Get a single record of customer employment
      operationId: getPartyEmployment
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Unique ID for the employment record.
        explode: false
        in: path
        name: employment_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
          description: Customer employment record.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get customer employment record
      tags:
      - Customers
      x-external: true
    put:
      description: Update a single record of customer employment.
      operationId: updatePartyEmployment
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Unique ID for the employment record.
        explode: false
        in: path
        name: employment_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employment'
        description: Customer employment to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
          description: Updated customer employment record
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update customer employment record
      tags:
      - Customers
      x-external: true
    summary: Customer employment operations
  /customers/{customer_id}/risk_ratings:
    get:
      description: Get list of customer risk ratings
      operationId: getAllCustomerRiskRatings
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: If true, include old (inactive) records as well.
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          default: false
          type: boolean
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating_list'
          description: List of customer risk ratings
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List customer risk ratings
      tags:
      - Customers
      x-external: true
    post:
      description: Create customer risk rating
      operationId: createCustomerRiskRating
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/risk_rating'
        description: |
          Create a customer risk rating. With a risk rating in request body, Synctera
          validates the data and saves it. With no request body, Synctera runs an
          automated risk analysis and saves the result.
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating'
          description: Created risk rating
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create customer risk rating
      tags:
      - Customers
      x-external: true
    summary: Risk Rating group operations
  /customers/{customer_id}/risk_ratings/{risk_rating_id}:
    get:
      description: Get a customer risk rating
      operationId: getCustomerRiskRating
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Risk Rating ID
        explode: false
        in: path
        name: risk_rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating'
          description: Customer risk rating of id
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get customer risk rating
      tags:
      - Customers
      x-external: true
    summary: Risk Rating
  /customers/{customer_id}/verifications:
    get:
      description: List verification results.
      operationId: listVerifications
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: If true, include old (inactive) records as well.
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          type: boolean
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result_list'
          description: List of customer verification results.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List verification results
      tags:
      - KYC Verification
      x-external: true
    post:
      description: |
        Create a verification result for a customer.
      operationId: createCustomerVerificationResult
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification_result'
        description: Customer verification result to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
          description: Created customer verification result.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a customer verification result
      tags:
      - KYC Verification
      x-external: true
  /customers/{customer_id}/verifications/{verification_id}:
    get:
      description: Get verification result by ID.
      operationId: getVerification
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Unique identifier for the verification.
        explode: false
        in: path
        name: verification_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
          description: Verification result.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get verification result
      tags:
      - KYC Verification
      x-external: true
  /customers/{customer_id}/verify:
    post:
      description: |
        Initiate identity verification for a customer and run the specified identity checks.
      operationId: verifyCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification'
        description: Customer verification request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verify_response'
          description: Customer verification result.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Verify a customer's identity
      tags:
      - KYC Verification
      x-external: true
  /customers/{customer_id}/watchlists/alerts:
    description: |
      List, retrieve, or update watchlist alerts.
    get:
      operationId: listWatchlistAlerts
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_alert_list'
          description: List of watchlist alerts
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List watchlist monitoring alerts for a customer
      tags:
      - Watchlist
      x-external: true
    summary: Subscriptions to watchlist alerts
  /customers/{customer_id}/watchlists/alerts/{alert_id}:
    description: |
      Retrieve or update a single watchlist alert.
    get:
      operationId: getWatchlistAlert
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Unique identifier for this watchlist alert.
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_alert'
          description: A single watchlist alert
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Retrieve watchlist monitoring alert
      tags:
      - Watchlist
      x-external: true
    put:
      operationId: updateWatchlistAlert
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Unique identifier for this watchlist alert.
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_alert'
        description: A watchlist body
        required: true
      responses:
        "200":
          description: Watchlist alert was updated
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update watchlist alert
      tags:
      - Watchlist
      x-external: true
    summary: Retrieve or update a single watchlist alert.
  /customers/{customer_id}/watchlists/subscriptions:
    description: |
      Create, list, or retrieve watchlist subscriptions
    get:
      operationId: listWatchlistSubscriptions
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription_list'
          description: List of watchlist subscriptions
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List watchlist monitoring subscriptions for a customer
      tags:
      - Watchlist
      x-external: true
    post:
      operationId: watchlistSubscribe
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_subscription'
        description: A watchlist subscription
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
          description: New watchlist subscription
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Subscribe a customer to watchlist monitoring
      tags:
      - Watchlist
      x-external: true
    summary: Subscriptions to watchlist monitoring
  /customers/{customer_id}/watchlists/subscriptions/{subscription_id}:
    description: |
      Retrieve or update a single watchlist subscription
    get:
      operationId: getWatchlistSubscription
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Watchlist monitoring subscription ID
        explode: false
        in: path
        name: subscription_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
          description: A single watchlist subscription
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Retrieve watchlist monitoring subscription
      tags:
      - Watchlist
      x-external: true
    put:
      operationId: updateWatchlistSubscription
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Watchlist monitoring subscription ID
        explode: false
        in: path
        name: subscription_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_subscription'
        description: |
          Watchlist monitoring subscription to be updated. The only field that matters is `status`; all other fields are ignored.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
          description: Updated watchlist subscription
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update watchlist monitoring subscription
      tags:
      - Watchlist
      x-external: true
    summary: Watchlist monitoring subscription
  /customers/{customer_id}/watchlists/suppressions:
    description: |
      Suppress or unsuppress current and future alerts for the given subject (person).
    post:
      operationId: suppressWatchlistEntityAlert
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_suppress'
        description: A watchlist suppression object
        required: true
      responses:
        "200":
          description: Watchlist alerts belonging to entity was updated
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Suppress entity alert
      tags:
      - Watchlist
      x-external: true
    summary: Update suppression of watchlist alerts for one subject
  /disclosures:
    get:
      description: Retrieves paginated list of disclosures associated with the authorized
        requester.
      operationId: listDisclosures
      parameters:
      - description: Unique resource identifier
        explode: false
        in: query
        name: id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
        x-external: true
      - description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: person_id
        required: false
        schema:
          example: 64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157
          items:
            format: uuid
            type: string
          type: array
        style: form
        x-external: true
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          example: 64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157
          items:
            format: uuid
            type: string
          type: array
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure_list'
          description: List of disclosures.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List disclosures
      tags:
      - Disclosures
      x-external: true
      x-status: alpha
    post:
      description: Create a disclosure made to a party.
      operationId: createDisclosure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disclosure'
        description: Disclosure to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure'
          description: Created disclosure.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create disclosure
      tags:
      - Disclosures
      x-external: true
      x-status: alpha
  /disclosures/{disclosure_id}:
    get:
      description: Get disclosure by ID.
      operationId: getDisclosure
      parameters:
      - description: The unique identifier for the disclosure.
        explode: false
        in: path
        name: disclosure_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure'
          description: Disclosure representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get disclosure
      tags:
      - Disclosures
      x-external: true
      x-status: alpha
  /external_accounts:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Returns a list of all external accounts assigned to customers.
      operationId: listExternalAccounts
      parameters:
      - description: A list of customer unique identifiers, with a comma separating
          any values.
        explode: false
        in: query
        name: customer_id
        required: false
        schema:
          items:
            $ref: '#/components/schemas/customer_id'
          type: array
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_accounts_list'
          description: List of external accounts
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List external accounts
      tags:
      - External Accounts
      x-external: true
    post:
      description: |
        Add external accounts for a customer. The account will be created in an unverified state.
      operationId: addExternalAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_accounts_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
          description: The external account added.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Add external accounts
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/{external_account_id}:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Returns an external account, given an external account ID.
      operationId: getExternalAccount
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
          description: The external account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get an external account
      tags:
      - External Accounts
      x-external: true
    patch:
      description: |
        Edits an unverified external account, given an external account ID.
      operationId: updateExternalAccount
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_external_account'
        description: External account to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
          description: Updated external account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch an external account
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/{external_account_id}/balance:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Returns an external account balance, given an external account ID.
      operationId: getExternalAccountBalance
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_balance'
          description: The external account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get an external account balance
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/{external_account_id}/transactions:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Returns a list of transactions on from the external account, given an external account ID. Maximum 500 transctions will be returned.
      operationId: getExternalAccountTransactions
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Date range filtering for transactions. Date is inclusive.
        explode: true
        in: query
        name: start_date
        required: true
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: Date range filtering for transactions. Date is exclusive.
        explode: true
        in: query
        name: end_date
        required: true
        schema:
          format: date
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_accounts_transaction_list'
          description: The external account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List transactions of a given external account
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/access_tokens:
    description: |
      Create a permanent access token for an external account
    post:
      operationId: createAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_account_access_token'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_access_token'
          description: New verification link token
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a permanent access token for an external account
      tags:
      - External Accounts
      x-external: true
    summary: External account access token
  /external_accounts/add_vendor_accounts:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    post:
      description: |
        Add external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added, so it's important that the caller checks the response body.
      operationId: addVendorExternalAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_vendor_accounts_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add_vendor_accounts_response'
          description: |
            Result of adding accounts through the vendor.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Add external accounts through a vendor, such as Plaid.
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/link_tokens:
    description: |
      Create a link token to verify an external account
    post:
      operationId: createVerificationLinkToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_account_link_token'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_link_token'
          description: New verification link token
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a link token to verify an external account
      tags:
      - External Accounts
      x-external: true
    summary: External account verification link token
  /reconciliations:
    description: |
      The Reconcilations collections represents the jobs reconciling transactions.
    get:
      description: Retrieves paginated list of reconciliations
      operationId: listReconciliations
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation_list'
          description: List of reconciliations
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List reconciliations
      tags:
      - Reconciliations
      x-external: true
    post:
      description: |
        Create a new reconciliation job
      operationId: createReconciliation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reconciliation_input'
        description: Reconciliation to perform
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation'
          description: Successful creation of a reconciliation
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a reconciliation
      tags:
      - Reconciliations
      x-external: true
    summary: Reconciliations
  /reconciliations/{reconciliation_id}:
    description: |
      The Reconcilations collections represents the jobs reconciling transactions.
    get:
      description: Retrieves one reconciliation by id
      operationId: getReconciliation
      parameters:
      - description: Reconciliation id
        explode: false
        in: path
        name: reconciliation_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation'
          description: Successful retrieval of a reconciliation
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Get reconciliation
      tags:
      - Reconciliations
      x-external: true
    summary: Reconciliation by ID
  /transactions/internal_transfer:
    description: An internal transfer is an immediate payment between two accounts
      within the same Fintech.
    post:
      description: Create an internal transfer
      operationId: createInternalTransfer
      parameters:
      - description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          example: faker.random.uuid
          type: string
        style: simple
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_transfer'
        description: Transfer request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_transfer_response'
          description: Transaction Response
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create an internal transfer
      tags:
      - Transactions
      x-external: true
    summary: Initiate an internal account-to-account transfer
  /transactions/pending:
    description: |
      Pending transactions represent a "hold" of a paricular amount on an account balance.
    get:
      description: |
        Get paginated list of pending transactions matching the provided filters
      operationId: listPendingTransactions
      parameters:
      - description: Account number
        explode: true
        in: query
        name: account_no
        required: false
        schema:
          type: string
        style: form
        x-external: true
      - description: Account ID
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-external: true
      - description: Only display transactions with a posting date greater than from_date
        explode: true
        in: query
        name: from_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: Only display transactions with a posting date less than or equal
          to to_date
        explode: true
        in: query
        name: to_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: The status of the transaction
        explode: true
        in: query
        name: status
        required: false
        schema:
          default: PENDING
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transactions'
          description: Paginated list of pending transactions
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List pending transactions
      tags:
      - Transactions
      x-external: true
    summary: List pending transactions
  /transactions/pending/{id}:
    description: |
      A pending transaction represent a "hold" of a paricular amount on an account balance.
    get:
      description: |
        Get a pending transaction by its uuid
      operationId: getPendingTransactionByID
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transaction'
          description: Pending Transaction
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a pending transaction
      tags:
      - Transactions
      x-external: true
    summary: Get pending transaction
  /transactions/posted:
    description: |
      Posted transactions represent a completed money movement.
    get:
      description: |
        Get paginated list of posted transactions matching the provided filters
      operationId: listPostedTransactions
      parameters:
      - description: Account number
        explode: true
        in: query
        name: account_no
        required: false
        schema:
          type: string
        style: form
        x-external: true
      - description: Account ID
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-external: true
      - description: Only display transactions with a posting date greater than from_date
        explode: true
        in: query
        name: from_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: Only display transactions with a posting date less than or equal
          to to_date
        explode: true
        in: query
        name: to_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posted_transactions'
          description: Paginated list of posted transactions
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List posted transactions
      tags:
      - Transactions
      x-external: true
    summary: List posted transactions
  /transactions/posted/{id}:
    description: |
      A posted transaction represents a completed money movement.
    get:
      description: |
        Get a posted transaction by its uuid
      operationId: getPostedTransactionByID
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posted_transaction'
          description: Posted Transaction
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a posted transaction
      tags:
      - Transactions
      x-external: true
    summary: Get posted transaction
  /webhooks:
    get:
      description: List all webhooks
      operationId: listWebhooks1
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: is_enabled_only
        required: false
        schema:
          type: boolean
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook_list'
          description: List of webhooks
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List webhooks
      tags:
      - Webhooks
      x-external: true
    post:
      description: Create a webhook
      operationId: createWebhook1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        description: Webhook to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Created webhook
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a webhook
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}:
    delete:
      description: Delete a webhook
      operationId: deleteWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete a webhook
      tags:
      - Webhooks
      x-external: true
    get:
      description: Get a webhook
      operationId: getWebhook1
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Webhook
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a webhook
      tags:
      - Webhooks
      x-external: true
    put:
      description: Update a webhook
      operationId: updateWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        description: Webhook to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Created webhook
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a webhook
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}/events:
    get:
      description: List webhook events. This response will not associate with the
        event response history.
      operationId: listEvents
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Start date of the search range
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - description: End date of the search range
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: date
          type: string
        style: form
        x-external: true
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
        x-external: true
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_list'
          description: List of webhook events
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List webhook events
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}/events/{event_id}:
    get:
      description: Get webhook event by ID
      operationId: getEvent
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Webhook event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Webhook event
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get webhook event
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}/events/{event_id}/resend:
    post:
      description: Resend a webhook event
      operationId: resendEvent
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Webhook event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Delay the event triggering in seconds
        explode: true
        in: query
        name: delay
        required: false
        schema:
          maximum: 3600
          minimum: 0
          type: integer
        style: form
        x-external: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Resent webhook event
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Resend an event
      tags:
      - Webhooks
      x-external: true
  /webhooks/secret:
    delete:
      description: Revoke the existing webhook secret. If this is called at the rolling
        secret time, then both old and new secrets will be revoked
      operationId: revokeSecret
      responses:
        "200":
          description: Secret has been revoked
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Revoke the secret
      tags:
      - Webhooks
      x-external: true
    post:
      description: Create a webhook secret. The secret will be used to verify all
        subsequent webhook request signature.
      operationId: createSecret
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: Webhook secret response
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a secret
      tags:
      - Webhooks
      x-external: true
    put:
      description: Replace an existing webhook secret immediately or as part of rotation.
        This new secret will be used to verify all subsequent webhook request signature.
      operationId: replaceSecret
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                is_rolling_secret:
                  description: Set true to let the current secret expire in the next
                    24 hours. Set false to let the current secret expire immediately.
                  type: boolean
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Webhook secret response
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Replace an existing secret
      tags:
      - Webhooks
      x-external: true
  /webhooks/trigger:
    post:
      description: Trigger an specific event for webhook testing purpose
      operationId: triggerEvent
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                event:
                  $ref: '#/components/schemas/event_type1'
              type: object
        description: Provide an event type to trigger
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Triggered webhook event
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Trigger an event
      tags:
      - Webhooks
      x-external: true
components:
  parameters:
    account_id:
      description: Account ID
      explode: true
      in: query
      name: account_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
      x-external: true
    account_id_path:
      description: Unique identifier for the account.
      explode: false
      in: path
      name: account_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    account_id_query:
      description: |
        Account ID(s). Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: 64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157
        items:
          format: uuid
          type: string
        type: array
      style: form
      x-external: true
    account_id_query1:
      explode: true
      in: query
      name: account_id
      required: false
      schema:
        $ref: '#/components/schemas/account_id'
      style: form
      x-external: true
    account_no:
      description: Account number
      explode: true
      in: query
      name: account_no
      required: false
      schema:
        type: string
      style: form
      x-external: true
    account_number:
      description: |
        Account number(s). Multiple account numbers can be provided as a comma-separated list.
        When only a single account number is provided, any * characters in the string are wildcards, and match any characters.
      explode: false
      in: query
      name: account_number
      required: false
      schema:
        example: "2345678108180014864"
        items:
          type: string
        type: array
      style: form
      x-external: true
    account_range_id:
      explode: false
      in: path
      name: account_range_id
      required: true
      schema:
        $ref: '#/components/schemas/account_range_id'
      style: simple
    account_sort_by_query:
      description: |
        Specifies the sort order for the returned accounts.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - account_number:asc
          - account_number:desc
          - account_type:asc
          - account_type:desc
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
          type: string
        type: array
      style: form
      x-external: true
    alert_id:
      description: Unique identifier for this watchlist alert.
      explode: false
      in: path
      name: alert_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    bin_id:
      explode: false
      in: path
      name: bin_id
      required: true
      schema:
        $ref: '#/components/schemas/bin_id'
      style: simple
    business_id_query:
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: business_id
      required: false
      schema:
        example: 64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157
        items:
          format: uuid
          type: string
        type: array
      style: form
      x-external: true
    card_brand_query:
      description: The brand of a card product
      explode: true
      in: query
      name: card_brand
      required: false
      schema:
        $ref: '#/components/schemas/card_brand'
      style: form
      x-external: true
    card_id:
      explode: false
      in: path
      name: card_id
      required: true
      schema:
        $ref: '#/components/schemas/card_id'
      style: simple
    card_image_id:
      explode: false
      in: path
      name: card_image_id
      required: true
      schema:
        $ref: '#/components/schemas/card_image_id'
      style: simple
    card_product_id:
      explode: false
      in: path
      name: card_product_id
      required: true
      schema:
        $ref: '#/components/schemas/card_product_id'
      style: simple
    card_product_id_query:
      explode: true
      in: query
      name: card_product_id
      required: false
      schema:
        $ref: '#/components/schemas/card_product_id'
      style: form
      x-external: true
    card_program_id:
      explode: false
      in: path
      name: card_program_id
      required: true
      schema:
        $ref: '#/components/schemas/card_program_id'
      style: simple
    card_sort_by_query:
      description: |
        Specifies the sort order for the returned cards.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - account_id:asc
          - account_id:desc
          - customer_id:asc
          - customer_id:desc
          - card_product_id:asc
          - card_product_id:desc
          - last_four:asc
          - last_four:desc
          - card_type:asc
          - card_type:desc
          - card_brand:asc
          - card_brand:desc
          - expiration_date:asc
          - expiration_date:desc
          - form:asc
          - form:desc
          - card_status:asc
          - card_status:desc
          type: string
        type: array
      style: form
      x-external: true
    card_status_query:
      description: The status of a card
      explode: true
      in: query
      name: card_status
      required: false
      schema:
        $ref: '#/components/schemas/card_status'
      style: form
      x-external: true
    card_type_query:
      description: Indicates the type of card
      explode: true
      in: query
      name: card_type
      required: false
      schema:
        enum:
        - DEBIT
        type: string
      style: form
      x-external: true
    customer_id_path:
      description: The customer's unique identifier
      explode: false
      in: path
      name: customer_id
      required: true
      schema:
        $ref: '#/components/schemas/customer_id'
      style: simple
    customer_id_query:
      explode: true
      in: query
      name: customer_id
      required: false
      schema:
        $ref: '#/components/schemas/customer_id1'
      style: form
      x-external: true
    customer_id_query_array:
      description: A list of customer unique identifiers, with a comma separating
        any values.
      explode: false
      in: query
      name: customer_id
      required: false
      schema:
        items:
          $ref: '#/components/schemas/customer_id'
        type: array
      style: form
      x-external: true
    customer_id_query_one:
      description: The customer's unique identifier
      explode: true
      in: query
      name: customer_id
      required: false
      schema:
        $ref: '#/components/schemas/customer_id'
      style: form
      x-external: true
    customer_sort_by_query:
      description: |
        Specifies the sort order for the returned customers.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - creation_time:asc
          - creation_time:desc
          - last_updated_time:asc
          - last_updated_time:desc
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
          type: string
        type: array
      style: form
      x-external: true
    debit_network_id:
      explode: false
      in: path
      name: debit_network_id
      required: true
      schema:
        $ref: '#/components/schemas/debit_network_id'
      style: simple
    digital_wallet_token_id:
      explode: false
      in: path
      name: digital_wallet_token_id
      required: true
      schema:
        $ref: '#/components/schemas/digital_wallet_token_id'
      style: simple
    disclosure_id:
      description: The unique identifier for the disclosure.
      explode: false
      in: path
      name: disclosure_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    email:
      explode: true
      in: query
      name: email
      required: false
      schema:
        description: Only return resources where the email field matches the specified
          string. Any * characters in the string are wildcards, and match any characters.
        example: john.doe@example.com
        type: string
      style: form
      x-external: true
    emboss_name_query:
      description: emboss name
      explode: true
      in: query
      name: emboss_name
      required: false
      schema:
        type: string
      style: form
      x-external: true
    employment_id:
      description: Unique ID for the employment record.
      explode: false
      in: path
      name: employment_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    expiration_date_query:
      description: The date representing when the card would expire at
      explode: true
      in: query
      name: expiration_date
      required: false
      schema:
        format: date
        type: string
      style: form
      x-external: true
    external_account_id:
      description: External Account ID
      explode: false
      in: path
      name: external_account_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    first_name:
      explode: true
      in: query
      name: first_name
      required: false
      schema:
        description: Only return resources where the first_name field matches the
          specified string. Any * characters in the string are wildcards, and match
          any characters.
        example: Alice
        type: string
      style: form
      x-external: true
    form_query:
      description: The format of the card
      explode: true
      in: query
      name: form
      required: false
      schema:
        $ref: '#/components/schemas/form'
      style: form
      x-external: true
    from_date:
      description: Only display transactions with a posting date greater than from_date
      explode: true
      in: query
      name: from_date
      required: false
      schema:
        format: date
        type: string
      style: form
      x-external: true
    id:
      description: Unique resource identifier
      explode: false
      in: query
      name: id
      required: false
      schema:
        items:
          format: uuid
          type: string
        type: array
      style: form
      x-external: true
    id1:
      description: Transaction ID
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    idempotency_key:
      description: An idempotency key is an arbitrary unique value generated by client
        to detect subsequent retries of the same request. It is recommended that a
        UUID or a similar random identifier be used as an idempotency key
      explode: false
      in: header
      name: Idempotency-Key
      required: true
      schema:
        example: faker.random.uuid
        type: string
      style: simple
      x-external: true
    include_history:
      description: If true, include old (inactive) records as well.
      explode: true
      in: query
      name: include_history
      required: false
      schema:
        default: false
        type: boolean
      style: form
      x-external: true
    include_history1:
      description: If true, include old (inactive) records as well.
      explode: true
      in: query
      name: include_history
      required: false
      schema:
        type: boolean
      style: form
      x-external: true
    interest_product_id_query:
      description: Interest product ID that accounts associate with. Multiple IDs
        can be provided as a comma-separated list.
      explode: true
      in: query
      name: interest_product_id
      required: false
      schema:
        type: string
      style: form
      x-external: true
    last_four_query:
      description: The last 4 digits of the card PAN
      explode: true
      in: query
      name: last_four
      required: false
      schema:
        example: "1234"
        pattern: ^\d{4}$
        type: string
      style: form
      x-external: true
    last_name:
      explode: true
      in: query
      name: last_name
      required: false
      schema:
        description: Only return resources where the last_name field matches the specified
          string. Any * characters in the string are wildcards, and match any characters.
        example: Smith
        type: string
      style: form
      x-external: true
    limit:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 100
        description: |
          Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
        example: 100
        minimum: 1
        type: integer
      style: form
      x-external: true
    page_token:
      explode: true
      in: query
      name: page_token
      required: false
      schema:
        description: Optional pagination token to be provided to retrieve subsequent
          pages, returned from previous get
        example: faker.random.alphaNumeric(10)
        type: string
      style: form
      x-external: true
    person_id_query:
      description: |
        Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: person_id
      required: false
      schema:
        example: 64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157
        items:
          format: uuid
          type: string
        type: array
      style: form
      x-external: true
    phone_number:
      explode: true
      in: query
      name: phone_number
      required: false
      schema:
        description: Only return resources where the phone_number field matches the
          specified string. Phone numbers use the E.164 format e.g. +19178675309.
          Any * characters in the string are wildcards, and match any characters.
        example: +12065550100
        type: string
      style: form
      x-external: true
    postal_code_query:
      description: The postal code of a card user
      explode: true
      in: query
      name: postal_code
      required: false
      schema:
        example: "49633"
        type: string
      style: form
      x-external: true
    product_id:
      description: Account Product ID
      explode: false
      in: path
      name: product_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    reconciliation_id:
      description: Reconciliation id
      explode: false
      in: path
      name: reconciliation_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    relationship_id:
      description: Relationship ID of the account associate with the account entity
      explode: false
      in: path
      name: relationship_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    risk_rating_id:
      description: Risk Rating ID
      explode: false
      in: path
      name: risk_rating_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    ssn_last_4:
      explode: true
      in: query
      name: ssn_last_4
      required: false
      schema:
        description: Only return resources where the last 4 characters of the SSN
          match the specified value.
        example: "6789"
        maxLength: 4
        minLength: 4
        type: string
      style: form
      x-external: true
    status:
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/status'
      style: form
      x-external: true
    status1:
      explode: true
      in: query
      name: status
      required: false
      schema:
        description: Only return resources where with the specified status.
        enum:
        - PROSPECT
        - ACTIVE
        - FROZEN
        - ESCHEAT
        - DECEASED
        - SANCTION
        - DORMANT
        - DENIED
        example: ACTIVE
        type: string
      style: form
      x-external: true
    status2:
      description: The status of the transaction
      explode: true
      in: query
      name: status
      required: false
      schema:
        default: PENDING
        type: string
      style: form
      x-external: true
    subscription_id:
      description: Watchlist monitoring subscription ID
      explode: false
      in: path
      name: subscription_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    template_id:
      description: Account Template ID
      explode: false
      in: path
      name: template_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    tenant_query:
      explode: true
      in: query
      name: tenant
      required: false
      schema:
        $ref: '#/components/schemas/tenant'
      style: form
      x-external: true
    to_date:
      description: Only display transactions with a posting date less than or equal
        to to_date
      explode: true
      in: query
      name: to_date
      required: false
      schema:
        format: date
        type: string
      style: form
      x-external: true
    vendor_id:
      description: Vendor ID
      explode: false
      in: path
      name: vendor_id
      required: true
      schema:
        format: string
        type: string
      style: simple
    verification_id:
      description: Unique identifier for the verification.
      explode: false
      in: path
      name: verification_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    webhook_id:
      description: The unique identifier of a webhook
      explode: false
      in: path
      name: webhook_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    webhook_id1:
      description: Webhook ID
      explode: false
      in: path
      name: webhook_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
  requestBodies:
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
  responses:
    account_closed:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Account has been closed
    already_exists:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Resource already exists error
    bad_request:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: BadRequest
    delete_response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_response'
      description: Resource has been deleted
    forbidden:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Forbidden error
    internal_server_error:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Internal server error
    not_found:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Resource not found
    unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Unauthorized
    unprocessable_entity:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Unprocessable entity request response
  schemas:
    account:
      description: Account
      example:
        creation_time: 2000-01-23T04:56:07.000+00:00
        account_number: account_number
        interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        metadata: '{}'
        overdraft_limit: 0
        swift_code: swift_code
        fee_product_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_account_pool: true
        balance_ceiling:
          balance: 0
          overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        balance_floor:
          balance: 0
          overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        account_purpose: This account for the account holder's salary deposit.
        balances:
        - balance: 1
        - balance: 1
        exchange_rate_type: M, INTERBANK, CUST
        last_updated_time: 2000-01-23T04:56:07.000+00:00
        iban: iban
        customer_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        nickname: nickname
        spending_limits:
          week:
            amount: 0
            transactions: 0
          month:
            amount: 0
            transactions: 0
          lifetime:
            amount: 0
            transactions: 0
          description: description
          day:
            amount: 0
            transactions: 0
          transaction:
            amount: 0
        bank_routing: bank_routing
        currency: faker.finance.currencyCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        access_status:
          $ref: '#/components/schemas/account_access_status'
        account_number:
          description: Account number
          maxLength: 50
          readOnly: true
          type: string
        account_purpose:
          description: Purpose of the account
          example: This account for the account holder's salary deposit.
          type: string
        account_type:
          $ref: '#/components/schemas/account_type'
        balance_ceiling:
          $ref: '#/components/schemas/balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/balance_floor'
        balances:
          description: A list of balances for account based on different type
          items:
            $ref: '#/components/schemas/balance'
          readOnly: true
          type: array
        bank_routing:
          description: Bank routing number
          maxLength: 9
          readOnly: true
          type: string
        creation_time:
          description: Account creation timestamp in RFC3337 format
          format: date-time
          readOnly: true
          type: string
        currency:
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: faker.finance.currencyCode
          pattern: ^[A-Z]{3}$
          type: string
        customer_ids:
          description: A list of the customer IDs of the account holders.
          items:
            format: uuid
            type: string
          readOnly: true
          type: array
        exchange_rate_type:
          description: Exchange rate type
          example: M, INTERBANK, CUST
          maxLength: 10
          type: string
        fee_product_ids:
          description: A list of fee resources from account product that the current
            account associate with
          items:
            format: uuid
            type: string
          type: array
        iban:
          description: International bank account number
          maxLength: 34
          type: string
        id:
          description: Account ID
          format: uuid
          readOnly: true
          type: string
        interest_product_id:
          description: An interest from account product that the current account associate
            with
          format: uuid
          type: string
        is_account_pool:
          description: Account is investment (variable balance) account or a multi-balance
            account pool. Default false
          type: boolean
        last_updated_time:
          description: Timestamp of the last account modification in RFC3337 format
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: User provided account metadata
          type: object
        nickname:
          description: User provided account nickname
          type: string
        overdraft_limit:
          description: Account's overdraft limit
          format: int64
          minimum: 0
          type: integer
        spending_limits:
          $ref: '#/components/schemas/spending_limits'
        status:
          $ref: '#/components/schemas/status'
        swift_code:
          description: SWIFT code
          maxLength: 11
          minLength: 8
          type: string
      type: object
    account_access_status:
      description: Access status for account. Default ACTIVE
      enum:
      - ACTIVE
      - FROZEN
      type: string
    account_creation:
      allOf:
      - $ref: '#/components/schemas/account'
      - $ref: '#/components/schemas/account_creation_allOf'
    account_id:
      description: The unique identifier of an account
      format: uuid
      type: string
    account_identifiers:
      example:
        number: "78277121"
        iban: faker.finance.iban
      properties:
        iban:
          description: |
            The IBAN of the account. Value may be masked, in which case only the last four digits are returned.
          example: faker.finance.iban
          type: string
        number:
          description: |
            The account number. Value may be masked, in which case only the last four digits are returned.
          example: "78277121"
          type: string
      required:
      - number
      title: Identifiers for the account
      type: object
    account_list:
      allOf:
      - $ref: '#/components/schemas/account_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    account_product:
      discriminator:
        mapping:
          FEE: '#/components/schemas/fee'
          INTEREST: '#/components/schemas/interest'
        propertyName: product_type
      oneOf:
      - $ref: '#/components/schemas/interest'
      - $ref: '#/components/schemas/fee'
      type: object
    account_product_list:
      allOf:
      - $ref: '#/components/schemas/account_product_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    account_range:
      properties:
        account_range:
          items:
            maxLength: 2
            minLength: 2
            type: integer
          type: array
        bank_id:
          description: The bank ID
          type: integer
        bin_id:
          description: The ID of the BIN this account range belogns to
          format: uuid
          type: string
        creation_time:
          description: The timestamp representing when the account range was created
          format: date-time
          readOnly: true
          type: string
        end_date:
          description: The time when account range becomes inactive
          format: date-time
          type: string
        id:
          description: Account Range Id
          format: uuid
          readOnly: true
          type: string
        last_modified_time:
          description: The timestamp representing when the account range was last
            modified
          format: date-time
          readOnly: true
          type: string
        partner_id:
          description: The partner ID
          type: integer
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        start_date:
          description: The time when account range becomes active
          format: date-time
          type: string
      required:
      - account_range
      - bank_id
      - bin_id
      - partner_id
      type: object
    account_range_id:
      description: The unique identifier of a account range
      format: uuid
      type: string
    account_range_response:
      allOf:
      - $ref: '#/components/schemas/account_range'
      required:
      - account_range
      - bank_id
      - bin_id
      - creation_time
      - id
      - last_modified_time
      - partner_id
    account_range_update_request:
      additionalProperties: false
      properties:
        end_date:
          description: The time when account range becomes inactive
          format: date-time
          type: string
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        start_date:
          description: The time when account range becomes active
          format: date-time
          type: string
      type: object
    account_relationship_type:
      description: Relationship type
      enum:
      - ACCOUNT_HOLDER
      - EMPLOYEE
      - BRANCH
      - ATM
      - OFFICER
      - PRIMARY_ACCOUNT_HOLDER
      - JOINT_ACCOUNT_HOLDER
      - AUTHORIZED_SIGNER
      type: string
    account_routing:
      example:
        eft_routing_number: "02101140"
        swift_code: CHASUS3AXXX
        bank_countries:
        - US
        - US
        bank_name: Chase
        wire_routing_number: "756392185"
        ach_routing_number: "756392185"
      properties:
        ach_routing_number:
          description: |
            The routing number used for US ACH payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.
          example: "756392185"
          type: string
        bank_countries:
          description: The countries that this bank operates the account in
          items:
            enum:
            - US
            - CA
            type: string
          type: array
        bank_name:
          description: The name of the bank managing the account
          example: Chase
          type: string
        eft_routing_number:
          description: |
            The routing number used for EFT payments, identifying a Canadian bank, consisting of the institution number and the branch number. Only appears if `bank_countries` contains `CA`. Value may be masked, in which case only the last four digits are returned.
          example: "02101140"
          type: string
        swift_code:
          description: |
            The SWIFT code for the bank. Value may be masked, in which case only the last four characters are returned.
          example: CHASUS3AXXX
          type: string
        wire_routing_number:
          description: |
            The routing number used for domestic wire payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.
          example: "756392185"
          type: string
      required:
      - bank_countries
      - bank_name
      title: Routing information for the account
      type: object
    account_template:
      example:
        is_enabled: true
        template:
          interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overdraft_limit: 0
          fee_product_ids:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          spending_limits:
            week:
              amount: 0
              transactions: 0
            month:
              amount: 0
              transactions: 0
            lifetime:
              amount: 0
              transactions: 0
            description: description
            day:
              amount: 0
              transactions: 0
            transaction:
              amount: 0
          is_ach_enabled: true
          bank_country: US
          currency: USD
          balance_ceiling:
            balance: 0
            overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          balance_floor:
            balance: 0
            overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          is_p2p_enabled: true
          is_card_enabled: true
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        description:
          description: Account template description
          type: string
        id:
          description: Generated ID for the template
          format: uuid
          readOnly: true
          type: string
        is_enabled:
          description: Whether this template can be used for account creation
          type: boolean
        name:
          description: Unique account template name
          type: string
        template:
          $ref: '#/components/schemas/template_fields'
      required:
      - is_enabled
      - name
      - template
      type: object
    account_type:
      enum:
      - SAVING
      - CHECKING
      - LINE_OF_CREDIT
      title: Account Type
      type: string
    account_verification:
      description: |
        Information about the account verification process. If the account has not been verified, this will be null.
      discriminator:
        mapping:
          MANUAL: '#/components/schemas/manual_account_verification'
          PLAID: '#/components/schemas/plaid_account_verification'
        propertyName: vendor
      nullable: true
      oneOf:
      - $ref: '#/components/schemas/plaid_account_verification'
      - $ref: '#/components/schemas/manual_account_verification'
      title: Information about the account verification process
      type: object
    accrual_payout_schedule:
      enum:
      - NONE
      - MONTHLY
      type: string
    add_accounts_request:
      properties:
        account_identifiers:
          $ref: '#/components/schemas/add_accounts_request_account_identifiers'
        account_owner_names:
          description: The names of the account owners.
          items:
            example: faker.name.findName
            minLength: 1
            type: string
          minItems: 1
          type: array
        customer_id:
          description: The identifier for the customer associated with the account.
          format: uuid
          type: string
        customer_type:
          description: The type of customer.
          enum:
          - PERSONAL
          - BUSINESS
          type: string
        metadata:
          description: User-supplied metadata
          type: object
        nickname:
          description: A user-meaningful name for the account
          example: faker.finance.accountName
          minLength: 1
          type: string
        routing_identifiers:
          $ref: '#/components/schemas/add_accounts_request_routing_identifiers'
        type:
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
          type: string
        vendor_account_id:
          description: The ID of the vendor account, will be empty for MANUAL vendor
          example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
          minLength: 1
          type: string
        verification:
          $ref: '#/components/schemas/account_verification'
      required:
      - account_identifiers
      - account_owner_names
      - customer_id
      - customer_type
      - routing_identifiers
      - type
      type: object
    add_accounts_request_account_identifiers:
      properties:
        number:
          description: |
            The account number.
          example: "78277121"
          minLength: 1
          type: string
      required:
      - number
      title: Identifiers for the account
      type: object
    add_accounts_request_routing_identifiers:
      properties:
        ach_routing_number:
          description: |
            The routing number used for US ACH payments.
          example: "756392185"
          minLength: 1
          type: string
        bank_countries:
          description: The countries that this bank operates the account in
          items:
            enum:
            - US
            type: string
          minItems: 1
          type: array
        bank_name:
          description: The name of the bank managing the account
          example: Chase
          minLength: 1
          type: string
      required:
      - ach_routing_number
      - bank_countries
      - bank_name
      title: Identifiers for the bank
      type: object
    add_vendor_account_failure:
      example:
        vendor_request_id: vendor_request_id
        vendor_error_message: vendor_error_message
        reason_description: reason_description
        vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
      properties:
        reason:
          $ref: '#/components/schemas/add_vendor_accounts_error_reason'
        reason_description:
          description: A human-readable message describing the reason for the failure.
          type: string
        vendor_account_id:
          description: |
            The vendor account ID for the account that failed. For Plaid, this is an `account_id`.
          example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
          type: string
        vendor_error_message:
          description: |
            The display_message returned by the vendor. Only returned if reason is set to `PROVIDER_ERROR`. For Plaid, this is the `display_message`.
          type: string
        vendor_request_id:
          description: |
            A unique identifier for the request from the vendor, which can be used for troubleshooting. Only returned if reason is set to `PROVIDER_ERROR`.
          type: string
      required:
      - reason
      - reason_description
      - vendor_account_id
      type: object
    add_vendor_accounts_error_reason:
      description: A machine-readable code describing the reason for the failure.
      enum:
      - FAILED_VERIFICATION
      - UNSUPPORTED_ACCOUNT_TYPE
      - DUPLICATE_ACCOUNT
      - ACCOUNT_NOT_FOUND
      - PROVIDER_ERROR
      type: string
    add_vendor_accounts_request:
      properties:
        customer_id:
          description: The identifier for the customer associated with these accounts.
          format: uuid
          type: string
        customer_type:
          description: The type of customer.
          enum:
          - PERSONAL
          - BUSINESS
          type: string
        vendor:
          $ref: '#/components/schemas/external_account_vendor_values'
        vendor_access_token:
          description: |
            The token provided to link external accounts. For Plaid, this is their `access_token`.
          example: access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6
          minLength: 1
          type: string
        vendor_account_ids:
          description: |
            The list of vendor account IDs that the customer chose to link. For Plaid, these are `account_id`s.
          items:
            description: The Plaid account_id.
            example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
            minLength: 1
            type: string
          minItems: 1
          type: array
        verify_owner:
          default: false
          description: |
            Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification will be suppressed by default
          type: boolean
      required:
      - customer_id
      - customer_type
      - vendor
      - vendor_access_token
      - vendor_account_ids
      type: object
    add_vendor_accounts_response:
      example:
        failed_accounts:
        - vendor_request_id: vendor_request_id
          vendor_error_message: vendor_error_message
          reason_description: reason_description
          vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        - vendor_request_id: vendor_request_id
          vendor_error_message: vendor_error_message
          reason_description: reason_description
          vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        added_accounts:
        - creation_time: 2022-01-01T00:00:00Z
          metadata: '{}'
          routing_identifiers:
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          account_identifiers:
            number: "78277121"
            iban: faker.finance.iban
          last_updated_time: 2022-01-01T00:00:00Z
          nickname: faker.finance.accountName
          account_owner_names:
          - faker.name.findName
          - faker.name.findName
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: ACTIVE
        - creation_time: 2022-01-01T00:00:00Z
          metadata: '{}'
          routing_identifiers:
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          account_identifiers:
            number: "78277121"
            iban: faker.finance.iban
          last_updated_time: 2022-01-01T00:00:00Z
          nickname: faker.finance.accountName
          account_owner_names:
          - faker.name.findName
          - faker.name.findName
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: ACTIVE
      properties:
        added_accounts:
          items:
            $ref: '#/components/schemas/external_account'
          type: array
        failed_accounts:
          items:
            $ref: '#/components/schemas/add_vendor_account_failure'
          type: array
      required:
      - added_accounts
      - failed_accounts
      type: object
    address:
      properties:
        address_line_1:
          description: Street address line 1
          example: faker.address.streetAddress
          type: string
        address_line_2:
          description: String address line 2
          example: faker.address.secondaryAddress
          type: string
        city:
          description: City
          example: faker.address.city
          type: string
        country_code:
          description: ISO-3166-1 Alpha-2 country code
          example: faker.address.countryCode
          type: string
        postal_code:
          description: Postal code
          example: "49633"
          type: string
        state:
          description: State, region, province, or prefecture
          example: faker.address.stateAbbr
          type: string
      required:
      - address_line_1
      - city
      - country_code
      - postal_code
      - state
      type: object
    address1:
      properties:
        address_line_1:
          description: Street address line 1
          example: faker.address.streetAddress
          type: string
        address_line_2:
          description: String address line 2
          example: faker.address.secondaryAddress
          type: string
        city:
          description: City
          example: faker.address.city
          type: string
        country_code:
          description: ISO-3166-1 Alpha-2 country code
          example: US
          pattern: ^[A-Z]{2}$
          type: string
        postal_code:
          description: Postal code
          example: "28620"
          type: string
        state:
          description: State, region, province, or prefecture
          example: faker.address.stateAbbr
          type: string
      required:
      - address_line_1
      - country_code
      type: object
    alias:
      properties:
        account_id:
          description: Account ID
          format: uuid
          type: string
        account_number:
          description: Account number
          type: string
        alias_info:
          description: Additional information for the alias
          type: object
        alias_name:
          description: Alias name
          type: string
        alias_source:
          description: Alias source
          type: string
        alias_type:
          description: Alias type
          type: string
        id:
          description: Alias ID
          format: uuid
          readOnly: true
          type: string
      title: Account Alias
      type: object
    alias_list:
      properties:
        aliases:
          description: Array of account alias
          items:
            $ref: '#/components/schemas/alias'
          type: array
      required:
      - aliases
      type: object
    apple_digital_wallet_provision_response:
      properties:
        activation_data:
          type: string
        card_id:
          description: The unique identifier of a card
          format: uuid
          type: string
        created_time:
          format: date-time
          type: string
        encrypted_pass_data:
          type: string
        ephemeral_public_key:
          type: string
        last_modified_time:
          format: date-time
          type: string
      type: object
    balance:
      example:
        balance: 1
      properties:
        balance:
          description: balance in ISO 4217 minor currency units
          format: int64
          readOnly: true
          type: integer
        type:
          $ref: '#/components/schemas/balance_type'
      required:
      - balance
      - type
      type: object
    balance_ceiling:
      example:
        balance: 0
        overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        balance:
          description: Maximum balance in the account's currency
          format: int64
          minimum: 0
          type: integer
        overflow_account_id:
          description: ID of overflow account for JIT funding of transactions
          format: uuid
          type: string
      required:
      - balance
      - overflow_account_id
      type: object
    balance_floor:
      example:
        balance: 0
        overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        balance:
          description: Minimum balance in the account's currency
          format: int64
          minimum: 0
          type: integer
        overdraft_account_id:
          description: ID of overdraft account for just-in-time (JIT) funding of transactions
          format: uuid
          type: string
      required:
      - balance
      - overdraft_account_id
      type: object
    balance_type:
      description: The type of the balance. GET operation default is for all types
      enum:
      - ACCOUNT_BALANCE
      - AVAILABLE_BALANCE
      type: string
    bank_debit_network_response:
      allOf:
      - $ref: '#/components/schemas/debit_network'
      - $ref: '#/components/schemas/bank_debit_network_response_allOf'
    base_account_verification:
      properties:
        creation_time:
          description: The time at which verification was first completed.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        last_updated_time:
          description: The time at which verification was last updated.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        status:
          description: The status of verification
          enum:
          - VERIFIED
          - UNVERIFIED
          type: string
        vendor:
          description: The vendor used for verifying the account
          enum:
          - PLAID
          - MANUAL
          type: string
      required:
      - status
      - vendor
      title: Information about account verification
      type: object
    base_card:
      allOf:
      - $ref: '#/components/schemas/card_format'
      - $ref: '#/components/schemas/base_card_allOf'
    base_disclosure:
      properties:
        business_id:
          description: |
            Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
          format: uuid
          type: string
        creation_time:
          description: The date and time the resource was created.
          example: 2021-06-14T11:23:41Z
          format: date-time
          readOnly: true
          type: string
        disclosure_date:
          description: Date and time the disclosure was made.
          example: 2021-06-14T11:21:17Z
          format: date-time
          type: string
        event_type:
          enum:
          - DISPLAYED
          - VIEWED
          - ACKNOWLEDGED
          example: ACKNOWLEDGED
          type: string
        id:
          description: The unique identifier for this resource.
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2022-01-18T17:54:12Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: |
            Optional field to store additional informaton about the resource.  Intended to be used by the integrator to store non-sensitive data.
          type: object
        person_id:
          description: |
            Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/disclosure_type'
        version:
          description: Version of the disclosure document.
          example: "1.0"
          pattern: ^[0-9]+\.[0-9]+$
          type: string
      type: object
    base_master_disclosure:
      properties:
        creation_time:
          description: The date and time the resource was created.
          example: 2021-06-14T11:23:41Z
          format: date-time
          readOnly: true
          type: string
        id:
          description: The unique identifier for this resource.
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2022-01-18T17:54:12Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: |
            Optional field to store additional informaton about the resource.  Intended to be used by the integrator to store non-sensitive data.
          type: object
        type:
          $ref: '#/components/schemas/disclosure_type'
        version:
          description: Version of the disclosure document.
          example: "1.0"
          pattern: ^[0-9]+\.[0-9]+$
          type: string
      type: object
    base_person:
      properties:
        creation_time:
          description: The date and time the resource was created.
          example: 2021-06-14T11:23:41Z
          format: date-time
          readOnly: true
          type: string
        email:
          description: Customer's email
          example: faker.internet.email
          type: string
        id:
          description: Customer unique identifier
          format: uuid
          readOnly: true
          type: string
        kyc_exempt:
          description: Customer's KYC exemption
          readOnly: true
          type: boolean
        kyc_last_run:
          description: Date and time KYC was last run on the customer
          example: 2022-01-18T17:54:12Z
          format: date-time
          readOnly: true
          type: string
        kyc_status:
          $ref: '#/components/schemas/customer_kyc_status'
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2022-01-18T17:54:12Z
          format: date-time
          readOnly: true
          type: string
        legal_address:
          $ref: '#/components/schemas/address1'
        metadata:
          description: User-supplied metadata. Do not use to store PII.
          type: object
        middle_name:
          description: Customer's middle name
          example: faker.name.middleName
          type: string
        phone_number:
          description: Customer's mobile phone number with country code in E.164 format
          example: faker.helpers.replaceSymbols(+###########)
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        related_customers:
          description: Customer's relationships with other accounts eg. guardian
          items:
            $ref: '#/components/schemas/relationship1'
          type: array
        shipping_address:
          $ref: '#/components/schemas/address1'
        ssn:
          description: Customer's full tax ID eg SSN formatted with hyphens. This
            optional parameter is required when running KYC on a customer. Input must
            match the pattern ^\d{3}-\d{2}-\d{4}$. The response contains the last
            4 digits only (e.g. 6789).
          example: faker.helpers.replaceSymbols(###-##-####)
          type: string
      type: object
    bin:
      properties:
        account_range_length:
          description: Account range length
          type: integer
        bank_id:
          description: The bank ID
          type: integer
        billing_ica:
          description: The ICA to which fees will be billed
          type: string
        bin:
          description: The bin number
          type: string
        bin_status:
          $ref: '#/components/schemas/bin_status'
        brand_product_code:
          description: The Mastercard or Visa Product Code - 3 alpha-numeric characters
          maxLength: 3
          minLength: 3
          type: string
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        country:
          description: ISO-3166-1 Alpha-2 country code
          example: faker.address.countryCode
          maxLength: 2
          minLength: 2
          type: string
        creation_time:
          description: The timestamp representing when the bin was created
          format: date-time
          readOnly: true
          type: string
        currency:
          description: ISO 4217  Alpha-3 currency code
          maxLength: 3
          minLength: 3
          type: string
        digital_wallet_active:
          default: false
          description: Determines if bin supports digital wallet tokenization
          example: true
          type: boolean
        end_date:
          description: The time when bin is decommissioned
          format: date-time
          type: string
        ica_bid:
          description: ICA/BID
          type: string
        id:
          description: Bin ID
          format: uuid
          readOnly: true
          type: string
        last_modified_time:
          description: The timestamp representing when the bin was last modified
          format: date-time
          readOnly: true
          type: string
        pan_utilization:
          description: Pan utilization
          type: integer
        partner_id:
          description: The partner ID
          type: integer
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        processor:
          description: The name of the card processor
          type: string
        start_date:
          description: The time when bin goes live
          format: date-time
          type: string
      required:
      - account_range_length
      - bank_id
      - billing_ica
      - bin
      - brand_product_code
      - card_brand
      - card_category
      - card_product_type
      - country
      - currency
      - ica_bid
      - partner_id
      - processor
      type: object
    bin_and_debit_network:
      properties:
        bank_network_id:
          description: The ID of the bank network
          type: string
        bin:
          $ref: '#/components/schemas/bin'
        debit_network:
          $ref: '#/components/schemas/debit_network'
      required:
      - bank_network_id
      - bin
      - debit_network
      type: object
    bin_and_debit_network_list:
      allOf:
      - $ref: '#/components/schemas/bin_and_debit_network_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    bin_id:
      description: The unique identifier of a bin
      format: uuid
      type: string
    bin_network_mapping:
      properties:
        active:
          description: indicates whether mapping is active
          type: boolean
        bank_network_id:
          description: ID debit network uses to identify a bank
          type: string
        bin_id:
          description: The ID of the bank's BIN that uses this debit network
          format: uuid
          type: string
        creation_time:
          description: The timestamp representing when BIN network mapping was created
          format: date-time
          readOnly: true
          type: string
        end_date:
          description: The time when mapping becomes inactive
          format: date-time
          type: string
        last_modified_time:
          description: The timestamp representing when the BIN network mapping was
            last modified
          format: date-time
          readOnly: true
          type: string
        network_id:
          description: The ID of the debit_network associated with the BIN of the
            bank
          format: uuid
          type: string
        start_date:
          description: The time when mapping becomes active
          format: date-time
          type: string
      required:
      - active
      - bank_network_id
      - bin_id
      - network_id
      type: object
    bin_network_mapping_response:
      allOf:
      - $ref: '#/components/schemas/bin_network_mapping'
      required:
      - active
      - bank_network_id
      - bin_id
      - creation_time
      - end_date
      - last_modified_time
      - network_id
      - start_date
    bin_response:
      allOf:
      - $ref: '#/components/schemas/bin'
      required:
      - account_range_length
      - bank_id
      - billing_ica
      - bin
      - bin_status
      - brand_product_code
      - card_brand
      - card_category
      - card_product_type
      - country
      - creation_time
      - currency
      - ica_bid
      - id
      - last_modified_time
      - partner_id
      - processor
    bin_response_list:
      allOf:
      - $ref: '#/components/schemas/bin_response_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    bin_status:
      description: Bin status
      enum:
      - ACTIVE
      - INACTIVE
      type: string
    bin_update_request:
      additionalProperties: false
      properties:
        bin_status:
          $ref: '#/components/schemas/bin_status'
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        end_date:
          description: The time when bin is decommissioned
          format: date-time
          type: string
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        start_date:
          description: The time when bin goes live
          format: date-time
          type: string
      type: object
    brand_product_code:
      description: The Mastercard or Visa Product Code - 3 alpha-numeric characters
      maxLength: 3
      minLength: 3
      type: string
    business_id:
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      format: uuid
      type: string
    calculation_method:
      enum:
      - COMPOUNDED_MONTHLY
      type: string
    card_activation_request:
      properties:
        activation_code:
          description: An activation code provided with the card required to prove
            possession of the card
          type: string
        customer_id:
          description: The ID of the customer for which card is being activated
          format: uuid
          type: string
      required:
      - activation_code
      - customer_id
      type: object
    card_brand:
      description: The brand of a card product
      enum:
      - MASTERCARD
      type: string
    card_category:
      description: The category of the card
      enum:
      - CONSUMER
      - COMMERCIAL
      type: string
    card_change:
      description: Card change details
      properties:
        change_type:
          $ref: '#/components/schemas/change_type'
        channel:
          $ref: '#/components/schemas/change_channel'
        id:
          description: Unique token
          format: uuid
          readOnly: true
          type: string
        memo:
          description: Additional details about the reason for the status change
          maxLength: 255
          type: string
        reason:
          $ref: '#/components/schemas/card_status_reason_code'
        state:
          $ref: '#/components/schemas/card_change_state'
        updated_at:
          description: Date of change
          format: date-time
          readOnly: true
          type: string
        updated_by:
          description: ID of user who initiated the change, if done via Synctera Admin
            System
          type: string
      required:
      - change_type
      - channel
      - id
      - state
      - updated_at
      - updated_by
      type: object
    card_change_state:
      oneOf:
      - $ref: '#/components/schemas/card_fulfillment_status'
      - $ref: '#/components/schemas/card_status'
      - $ref: '#/components/schemas/card_pin_status'
    card_changes_list:
      allOf:
      - $ref: '#/components/schemas/card_changes_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    card_edit_request:
      properties:
        card_status:
          $ref: '#/components/schemas/card_status_request'
        memo:
          description: Additional details about the reason for the status change
          maxLength: 255
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Additional data to include in the request structured as key-value
            pairs
          type: object
        reason:
          $ref: '#/components/schemas/card_status_reason_code'
      required:
      - card_status
      - reason
      type: object
    card_format:
      properties:
        form:
          description: PHYSICAL or VIRTUAL.
          enum:
          - PHYSICAL
          - VIRTUAL
          type: string
      required:
      - form
      type: object
    card_fulfillment_status:
      description: The status indicating the state of the card issuance
      enum:
      - ISSUED
      - REISSUED
      - ORDERED
      - REJECTED
      - REORDERED
      - SHIPPED
      - DIGITALLY_PRESENTED
      type: string
    card_id:
      description: The unique identifier of a card
      format: uuid
      type: string
    card_image_details:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        customer_id:
          description: The unique identifier of a customer
          format: uuid
          type: string
        id:
          description: The unique identifier of a card image
          format: uuid
          type: string
        status:
          $ref: '#/components/schemas/card_image_status'
      required:
      - customer_id
      - id
      - status
    card_image_details_list:
      allOf:
      - $ref: '#/components/schemas/card_image_details_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    card_image_id:
      description: The unique identifier of a card image
      format: uuid
      type: string
    card_image_mode:
      description: |
        The image mode of a card product. If the card product supports custom card images, this value determines how the images will be handled during card issuance. REQUIRED means that cards issued with this card product must have the ID of an image that has been uploaded. Note that the image does not necessarily have to have been approved prior to the issuance request. REQUIRED_APPROVED_FIRST means that cards issued with this card product must have the ID of an image that has been uploaded and approved.
      enum:
      - REQUIRED
      - REQUIRED_APPROVED_FIRST
      type: string
    card_image_status:
      description: The status of a custom card image
      enum:
      - NOT_UPLOADED
      - UNREVIEWED
      - APPROVED
      - REJECTED
      type: string
    card_issuance_request:
      discriminator:
        mapping:
          PHYSICAL: '#/components/schemas/physical_card_issuance_request'
          VIRTUAL: '#/components/schemas/virtual_card_issuance_request'
        propertyName: form
      oneOf:
      - $ref: '#/components/schemas/physical_card_issuance_request'
      - $ref: '#/components/schemas/virtual_card_issuance_request'
      type: object
    card_list_response:
      allOf:
      - $ref: '#/components/schemas/card_list_response_allOf'
      - $ref: '#/components/schemas/paginated_response'
    card_metadata:
      additionalProperties:
        type: string
      description: Additional data to include in the request structured as key-value
        pairs
      type: object
    card_pin:
      properties:
        pin:
          description: The new PIN
          type: string
      type: object
    card_pin_status:
      description: The status of the card PIN
      enum:
      - SET
      - CHANGED
      readOnly: true
      type: string
    card_product:
      allOf:
      - $ref: '#/components/schemas/card_format'
      - $ref: '#/components/schemas/card_product_allOf'
      description: Cards Product
    card_product_id:
      description: The unique identifier of a cards product
      format: uuid
      type: string
    card_product_list_response:
      allOf:
      - $ref: '#/components/schemas/card_product_list_response_allOf'
      - $ref: '#/components/schemas/paginated_response'
    card_product_response:
      allOf:
      - $ref: '#/components/schemas/card_product'
      required:
      - account_range_id
      - active
      - auto_allocate_range
      - bank_id
      - bin_id
      - card_program_id
      - creation_time
      - end_date
      - form
      - id
      - last_modified_time
      - name
      - partner_id
      - start_date
    card_product_type:
      description: The type of the card product
      enum:
      - DEBIT
      - CREDIT
      - PREPAID
      type: string
    card_program:
      properties:
        active:
          description: indicates whether program is active
          type: boolean
        bank_id:
          description: The ID of the bank partner works with within this program
          type: integer
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        creation_time:
          description: The timestamp representing when the program was created
          format: date-time
          readOnly: true
          type: string
        end_date:
          description: The time when program became inactive
          format: date-time
          type: string
        id:
          description: Program ID
          format: uuid
          readOnly: true
          type: string
        last_modified_time:
          description: The timestamp representing when the program was last modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: Program name
          type: string
        partner_id:
          description: The ID of the partner program belongs to
          type: integer
        start_date:
          description: The time when program becomes active
          format: date-time
          type: string
      required:
      - bank_id
      - card_brand
      - card_category
      - card_product_type
      - name
      - partner_id
      type: object
    card_program_id:
      description: The unique identifier of a cards program
      format: uuid
      type: string
    card_program_response:
      allOf:
      - $ref: '#/components/schemas/card_program'
      required:
      - active
      - bank_id
      - card_brand
      - card_category
      - card_product_type
      - creation_time
      - end_date
      - id
      - last_modified_time
      - name
      - partner_id
      - start_date
    card_program_response_list:
      allOf:
      - $ref: '#/components/schemas/card_program_response_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    card_program_update_request:
      additionalProperties: false
      properties:
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        end_date:
          description: The time when program became inactive
          format: date-time
          type: string
        name:
          description: Program name
          type: string
        start_date:
          description: The time when program becomes active
          format: date-time
          type: string
      type: object
    card_response:
      discriminator:
        mapping:
          PHYSICAL: '#/components/schemas/physical_card_response'
          VIRTUAL: '#/components/schemas/virtual_card_response'
        propertyName: form
      oneOf:
      - $ref: '#/components/schemas/physical_card_response'
      - $ref: '#/components/schemas/virtual_card_response'
    card_status:
      description: The status indicating the card lifecycle state
      enum:
      - ACTIVE
      - UNACTIVATED
      - SUSPENDED
      - TERMINATED
      type: string
    card_status_object:
      description: The status of the card
      properties:
        card_status:
          $ref: '#/components/schemas/card_status'
        memo:
          description: Additional details about the reason for the status change
          maxLength: 255
          type: string
        status_reason:
          $ref: '#/components/schemas/card_status_reason_code'
      required:
      - card_status
      title: Status
      type: object
    card_status_reason_code:
      description: |
        The reason for the card status

        Code | Description
        --- | ---
        NEW | Card activated
        REQ | Requested by you
        INA | Dormant
        UNK | Invalid shipping address
        NEG | Negative account balance
        REV | Account under review
        SUS | Suspicious activity
        OUT | Activity outside program parameters
        FRD | Confirmed fraud
        MAT | Matched with an OFAC list
        LOS | Card reported lost
        CLO | Card was cloned
        COM | Account or card was compromised
        TMP | Awaiting customer confirmation
        PRC | Initiated by Processor
        ISS | Initiated by Issuer
        EXP | Card expired
        KYC | Failed KYC
        INF | Information was validated
        ACT | Account activity was validated
        AUX | Initiated by a third party
        PIN | PIN try limit reached
        STO | Card reported stolen
        ADD | Address issue
        NAM | Name issue
        SSN | SSN issue
        DOB | DOB issue
        EML | Email issue
        PHO | Phone issue
        FUL | Account/fulfillment mismatch
        OTH | Other
      enum:
      - NEW
      - REQ
      - INA
      - UNK
      - NEG
      - REV
      - SUS
      - OUT
      - FRD
      - MAT
      - LOS
      - CLO
      - COM
      - TMP
      - PRC
      - ISS
      - EXP
      - KYC
      - INF
      - ACT
      - AUX
      - PIN
      - STO
      - ADD
      - NAM
      - SSN
      - DOB
      - EML
      - PHO
      - FUL
      - OTH
      type: string
    card_status_reason_memo:
      description: Additional details about the reason for the status change
      maxLength: 255
      type: string
    card_status_request:
      description: The status indicating the card lifecycle state
      enum:
      - ACTIVE
      - SUSPENDED
      - TERMINATED
      type: string
    card_widget_url_response:
      description: A URL for activate card and set pin widgets
      example:
        url: https://openapi-generator.tech
      properties:
        url:
          format: uri
          type: string
      type: object
    change_channel:
      description: How the change was submitted
      enum:
      - API
      - ADMIN
      - SYSTEM
      - FRAUD
      type: string
    change_type:
      description: The category of card change
      enum:
      - STATUS
      - FULFILLMENT
      - PIN
      type: string
    client_token:
      description: A short-lived, one-time token used for accessing client PINs/PANs
      example:
        client_token: faker.random.uuid
      properties:
        client_token:
          example: faker.random.uuid
          type: string
      title: Client Token
      type: object
    country_code:
      description: ISO-3166-1 Alpha-2 country code
      example: faker.address.countryCode
      maxLength: 2
      minLength: 2
      type: string
    create_card_image_request:
      properties:
        customer_id:
          description: The unique identifier of a customer
          format: uuid
          type: string
        image_data:
          format: base64
          type: string
      required:
      - customer_id
      type: object
    create_webhook_request:
      allOf:
      - $ref: '#/components/schemas/webhook_request'
      - required:
        - config
        - events
        - name
        type: object
    currency_code:
      description: ISO 4217  Alpha-3 currency code
      maxLength: 3
      minLength: 3
      type: string
    custom_headers:
      properties:
        my_header_name_1:
          type: string
        my_header_name_2:
          type: string
        my_header_name_3:
          type: string
      type: object
    customer:
      allOf:
      - $ref: '#/components/schemas/customer_allOf'
      - $ref: '#/components/schemas/base_person'
      description: Details of a customer
      title: Customer
      type: object
    customer_alias:
      description: Represents a customer's alias
      properties:
        alias_info:
          type: object
        alias_name:
          type: string
        alias_source:
          type: string
        alias_type:
          type: string
        customer_alias_id:
          format: uuid
          type: string
        customer_id:
          format: uuid
          type: string
      title: Customer Alias
      type: object
    customer_alias_list:
      allOf:
      - $ref: '#/components/schemas/customer_alias_list_allOf'
    customer_id:
      format: uuid
      type: string
    customer_id1:
      description: The unique identifier of a customer
      format: uuid
      type: string
    customer_in_path:
      discriminator:
        mapping:
          ACTIVE: '#/components/schemas/customer'
          DECEASED: '#/components/schemas/customer'
          DENIED: '#/components/schemas/customer'
          DORMANT: '#/components/schemas/customer'
          ESCHEAT: '#/components/schemas/customer'
          FROZEN: '#/components/schemas/customer'
          PROSPECT: '#/components/schemas/prospect'
          SANCTION: '#/components/schemas/customer'
        propertyName: status
      oneOf:
      - $ref: '#/components/schemas/customer'
      - $ref: '#/components/schemas/prospect'
      type: object
    customer_kyc_status:
      description: Customer's KYC status
      enum:
      - UNVERIFIED
      - REVIEW
      - PROVIDER_FAILURE
      - ACCEPTED
      - REJECTED
      type: string
    customer_list:
      allOf:
      - $ref: '#/components/schemas/customer_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    customer_verification:
      properties:
        customer_consent:
          description: |
            Whether this customer has consented to a KYC check.
          type: boolean
        customer_ip_address:
          description: IP address of the customer being verified.
          example: faker.internet.ip
          pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
          type: string
        document_id:
          description: |
            The ID of the uploaded government-issued identification document provided by the DV API endpoint.
          example: 1ab2c3de-fg45-6789-a01b-23c45678defg
          type: string
        verification_type:
          description: List of possible checks to run on a customer.
          items:
            $ref: '#/components/schemas/verification_type'
          type: array
      required:
      - customer_consent
      - verification_type
      title: PersonVerification
      type: object
    customer_verification_result:
      description: Verification result
      example:
        result: ACCEPTED
        verification_time: 2000-01-23T04:56:07.000+00:00
        verification_type: kyc
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        raw_response:
          provider: SOCURE
          raw_data: '{}'
        issues:
        - 'R186: Global Watchlist sources selected are correlated with the input identifiers'
        - 'R186: Global Watchlist sources selected are correlated with the input identifiers'
      properties:
        id:
          description: Unique ID for this verification result.
          format: uuid
          readOnly: true
          type: string
        issues:
          deprecated: true
          description: |
            List of potential problems found. These are subject to change.
          items:
            example: 'R186: Global Watchlist sources selected are correlated with
              the input identifiers'
            type: string
          readOnly: true
          type: array
        raw_response:
          $ref: '#/components/schemas/raw_response'
        result:
          description: The determination of this verification.
          enum:
          - ACCEPTED
          - REJECTED
          - REVIEW
          - PROVIDER_FAILURE
          example: ACCEPTED
          type: string
        vendor_info:
          $ref: '#/components/schemas/verification_vendor_info'
        verification_time:
          description: The date and time the verification was completed.
          format: date-time
          type: string
        verification_type:
          $ref: '#/components/schemas/verification_type'
      required:
      - result
      - verification_time
      - verification_type
      title: CustomerVerificationResult
      type: object
    customer_verification_result_list:
      allOf:
      - $ref: '#/components/schemas/customer_verification_result_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    customer_verify_response:
      allOf:
      - $ref: '#/components/schemas/customer_verify_response_allOf'
      - $ref: '#/components/schemas/paginated_response'
    dc_sign:
      description: The `dc_sign` represents the direction money was moved.
      enum:
      - debit
      - credit
      type: string
    debit_network:
      properties:
        active:
          description: indicates whether debit network is active
          type: boolean
        creation_time:
          description: The timestamp representing when the debit network was created
          format: date-time
          readOnly: true
          type: string
        end_date:
          description: The time when debit network became inactive
          format: date-time
          type: string
        id:
          description: Debit Network ID
          format: uuid
          readOnly: true
          type: string
        last_modified_time:
          description: The timestamp representing when the debit network was last
            modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name describing the debit network
          type: string
        start_date:
          description: The time when debit network goes live
          format: date-time
          type: string
      type: object
    debit_network_create_request:
      allOf:
      - $ref: '#/components/schemas/debit_network'
      required:
      - name
    debit_network_id:
      description: The unique identifier of a debit network
      format: uuid
      type: string
    debit_network_response:
      allOf:
      - $ref: '#/components/schemas/debit_network'
      required:
      - active
      - creation_time
      - id
      - last_modified_time
      - name
    debit_network_response_list:
      allOf:
      - $ref: '#/components/schemas/debit_network_response_list_allOf'
    delete_response:
      description: Deleted object information
      example:
        resource: resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Object ID
          format: uuid
          type: string
        resource:
          description: The resource name
          type: string
      title: Deleted Object
      type: object
    digital_wallet_token_edit_request:
      properties:
        token_status:
          description: The status indicating the digital wallet token lifecycle state
          enum:
          - ACTIVE
          - SUSPENDED
          - TERMINATED
          type: string
      required:
      - token_status
      type: object
    digital_wallet_token_id:
      description: The unique identifier of a digital wallet token
      format: string
      type: string
    digital_wallet_token_response:
      properties:
        approved_time:
          format: date-time
          type: string
        card_id:
          description: Card ID of the Digital wallet Token
          format: uuid
          type: string
        device_id:
          description: The user’s Android device ID; the device’s unique identifier.
          maxLength: 124
          type: string
        device_type:
          description: Type of the device where the Digital Wallet Token is used in
          enum:
          - MOBILE_PHONE
          - WATCH
          - TABLET
          - MOBILE_PHONE_OR_TABLET
          - VEHICLE
          - APPLIANCE
          - LAPTOP
          - GAMING_DEVICE
          - UNKNOWN
          type: string
        id:
          description: Digital Wallet Token ID
          format: uuid
          type: string
        last_modified_time:
          format: date-time
          type: string
        requested_time:
          format: date-time
          type: string
        state:
          description: Current status of the Digital Wallet Token
          enum:
          - REQUESTED
          - REQUEST_DENIED
          - ACTIVE
          - SUSPENDED
          - TERMINATED
          type: string
        type:
          description: Type of the Digital Wallet
          enum:
          - APPLE_PAY
          - GOOGLE_PAY
          type: string
      type: object
    disclosure:
      allOf:
      - required:
        - disclosure_date
        - event_type
        - type
        - version
      - $ref: '#/components/schemas/base_disclosure'
      description: Represents a disclosure.
      type: object
    disclosure_list:
      allOf:
      - $ref: '#/components/schemas/disclosure_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    disclosure_type:
      description: |
        Describes the regulatory requirement that triggered the disclosure.
      enum:
      - REG_DD
      - KYC_DATA_COLLECTION
      - REG_E
      - REG_CC
      - E_SIGN
      - PRIVACY_NOTICE
      - TERMS_AND_CONDITIONS
      type: string
    emboss_name:
      description: The customer details to emboss on the card - Defaults to customer
        first and last name. Is limited to 21 characters. Valid characters are A-Z,
        a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-),
        ampersand (&), single quote (').
      properties:
        line_1:
          description: line 1
          example: faker.name.findName
          type: string
        line_2:
          description: line 2
          example: faker.company.companyName
          type: string
      required:
      - line_1
      type: object
    employment:
      description: |
        A period of time in which a customer is (was) employed by a particular employer.
      example:
        employment_to: 2018-11-19T00:00:00Z
        employment_occupation: clerk
        employment_from: 2016-05-11T00:00:00Z
        employment_income: 5000000
        employment_hours: 37.5
        employment_income_currency: USD
        employer_name: ABC, Inc.
        employment_info: '{}'
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        employer_name:
          description: Name of customer's employer.
          example: ABC, Inc.
          type: string
        employment_from:
          description: First day of employment.
          example: 2016-05-11T00:00:00Z
          format: date-time
          type: string
        employment_hours:
          description: Number of hours spent per week working for specified employment.
          example: 37.5
          format: float
          maximum: 80
          minimum: 0
          type: number
        employment_income:
          description: Annual income in cents.
          example: 5000000
          type: integer
        employment_income_currency:
          description: |
            The 3-letter alphabetic ISO 4217 code for the currency in which the employee was paid.
          example: USD
          type: string
        employment_info:
          description: |
            A collection of arbitrary key-value pairs providing additional information about this employment relationship.
          type: object
        employment_occupation:
          description: Customer's work title, profession, or field.
          example: clerk
          type: string
        employment_to:
          description: Last day of employment.
          example: 2018-11-19T00:00:00Z
          format: date-time
          type: string
        id:
          description: Unique ID for this employment relationship.
          format: uuid
          readOnly: true
          type: string
      required:
      - employer_name
      title: Customer employment record
      type: object
    employment_list:
      allOf:
      - $ref: '#/components/schemas/employment_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    error:
      properties:
        detail:
          description: a human-readable string explaining this particular error
          example: 'missing required fields: first_name, dob'
          type: string
        status:
          description: the HTTP status code for this response
          example: 400
          type: integer
        title:
          description: a human-readable string for this general category of error
          example: Bad Request Body
          type: string
        type:
          description: a URI that identifies this general category of error
          example: https://dev.synctera.com/errors/bad-request-body
          type: string
      title: Standard error response (RFC 7807 problem report)
      type: object
    event:
      description: Webhook event object
      example:
        metadata: metadata
        response_history:
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        webhook_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        event_resource_changed_fields: event_resource_changed_fields
        event_resource: event_resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        event_time: 2000-01-23T04:56:07.000+00:00
        status: RUNNING
      properties:
        event_resource:
          description: |
            Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.
          type: string
        event_resource_changed_fields:
          description: |
            Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.
          type: string
        event_time:
          description: Timestamp of the current event raised
          format: date-time
          type: string
        id:
          description: Unique event ID of the webhook request. Use event endpoints
            to get more event summary data
          format: uuid
          readOnly: true
          type: string
        metadata:
          description: Metadata that stored in the webhook subscription
          maxLength: 1024
          type: string
        response_history:
          description: Response history of the webhook request
          items:
            $ref: '#/components/schemas/event_response_history'
          type: array
        status:
          description: Current event status. Failing event will keep retry until it
            is purged.
          enum:
          - RUNNING
          - SUCCESS
          - RETRYING
          type: string
        type:
          $ref: '#/components/schemas/event_type_explicit'
        webhook_id:
          description: Webhook the current event belongs to
          format: uuid
          type: string
      title: Webhook event
      type: object
    event_list:
      allOf:
      - $ref: '#/components/schemas/event_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    event_resend:
      properties:
        event_id:
          description: id of the event notification you want to resend
          format: uuid
          type: string
        event_type:
          $ref: '#/components/schemas/event_type'
      required:
      - event_id
      - event_type
      type: object
    event_type:
      description: The reason for issuing/re-issuing a card
      enum:
      - usertransition
      - businesstransition
      - cardtransition
      - transaction
      - digitalwallettokentransition
      - chargebacktransition
      - commandomodetransition
      - casetransition
      - directdeposittransition
      - banktransfertransition
      type: string
    event_type_explicit:
      description: All the webhook event types
      enum:
      - ACCOUNT.CREATED
      - CARD.UPDATED
      - CUSTOMER.UPDATED
      - CUSTOMER.KYC_OUTCOME.UPDATED
      - INTEREST.MONTHLY_PAYOUT
      - INTERNAL_TRANSFER.SUCCEEDED
      - TRANSACTION.POSTED.CREATED
      - TRANSACTION.POSTED.UPDATED
      - TRANSACTION.PENDING.CREATED
      - TRANSACTION.PENDING.UPDATED
      type: string
    event_type_wildcard:
      enum:
      - ACCOUNT.*
      - CARD.*
      - CUSTOMER.*
      - INTEREST.*
      - INTERNAL_TRANSFER.*
      - TRANSACTION.*
      type: string
    event_type1:
      oneOf:
      - $ref: '#/components/schemas/event_type_explicit'
      - $ref: '#/components/schemas/event_type_wildcard'
    external_account:
      example:
        creation_time: 2022-01-01T00:00:00Z
        metadata: '{}'
        routing_identifiers:
          eft_routing_number: "02101140"
          swift_code: CHASUS3AXXX
          bank_countries:
          - US
          - US
          bank_name: Chase
          wire_routing_number: "756392185"
          ach_routing_number: "756392185"
        vendor_data:
          account_number_mask: account_number_mask
          institution_id: institution_id
        type: CHECKING
        account_identifiers:
          number: "78277121"
          iban: faker.finance.iban
        last_updated_time: 2022-01-01T00:00:00Z
        nickname: faker.finance.accountName
        account_owner_names:
        - faker.name.findName
        - faker.name.findName
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: ACTIVE
      properties:
        account_identifiers:
          $ref: '#/components/schemas/account_identifiers'
        account_owner_names:
          description: |
            The names of the account owners. Values may be masked, in which case the array will be empty.
          items:
            example: faker.name.findName
            type: string
          type: array
        creation_time:
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        customer_id:
          description: The identifier for the customer associated with this account
          format: uuid
          type: string
        id:
          description: External account unique identifier
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        metadata:
          description: User-supplied JSON format metadata.
          type: object
        nickname:
          description: A user-meaningful name for the account
          example: faker.finance.accountName
          type: string
        routing_identifiers:
          $ref: '#/components/schemas/account_routing'
        status:
          description: The current state of the account
          enum:
          - ACTIVE
          - CLOSED
          type: string
        type:
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
          - CREDIT_CARD
          - MONEY_MARKET
          - OTHER
          type: string
        vendor_data:
          $ref: '#/components/schemas/external_account_vendor_data'
        verification:
          $ref: '#/components/schemas/account_verification'
      required:
      - account_identifiers
      - account_owner_names
      - creation_time
      - customer_id
      - id
      - last_updated_time
      - routing_identifiers
      - status
      - type
      - verification
      title: External account
      type: object
    external_account_access_token:
      example:
        vendor_customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        vendor_access_token: vendor_access_token
        vendor_institution_id: vendor_institution_id
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        request_id: request_id
        vendor_public_token: vendor_public_token
      properties:
        customer_id:
          description: The identifier for the customer associated with this account
          format: uuid
          type: string
        request_id:
          description: A unique identifier for the request, which can be used for
            troubleshooting
          readOnly: true
          type: string
        vendor_access_token:
          description: The access token associated with the Item data is being requested
            for.
          readOnly: true
          type: string
        vendor_customer_id:
          description: The identifier for the customer associated with this account(deprecated)
          format: uuid
          type: string
          x-status: deprecated
        vendor_institution_id:
          description: |
            The ID of the institution the access token is requested for
          minLength: 1
          type: string
        vendor_public_token:
          description: |
            The user's public token obtained from successful link login.
          type: string
      required:
      - vendor_institution_id
      - vendor_public_token
      type: object
    external_account_balance:
      example:
        current: 0
        available: 0
        limit: 0
        currency: faker.finance.currencyCode
      properties:
        available:
          description: The available balance of the account
          format: int64
          minimum: 0
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code
          example: faker.finance.currencyCode
          type: string
        current:
          description: The current balance of the account
          format: int64
          minimum: 0
          type: integer
        limit:
          description: The limit on the balance amount
          format: int64
          minimum: 0
          type: integer
      required:
      - available
      - currency
      - current
      - limit
      title: External Account Balance
      type: object
    external_account_link_token:
      example:
        link_token: link_token
        link_customization_name: link_customization_name
        language: EN
        type: DEPOSITORY
        verify_owner: false
        vendor_access_token: vendor_access_token
        country_codes:
        - US
        - US
        expiration: 2000-01-23T04:56:07.000+00:00
        redirect_uri: redirect_uri
        vendor_institution_id: vendor_institution_id
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        client_name: client_name
        request_id: request_id
      properties:
        client_name:
          description: The name of your application, as it should be displayed in
            Link. Maximum length of 30 characters.
          type: string
        country_codes:
          description: Country codes in the ISO-3166-1 alpha-2 country code standard.
          items:
            enum:
            - US
            type: string
          minItems: 1
          type: array
        customer_id:
          description: The identifier for the customer associated with this account
          format: uuid
          type: string
        expiration:
          description: The expiration date for the link_token. Expires in 4 hours.
          format: date-time
          readOnly: true
          type: string
        language:
          description: |
            The language that corresponds to the link token. For Plaid, see their [documentation](https://plaid.com/docs/api/tokens/#link-token-create-request-language) for a list of allowed values.
          enum:
          - EN
          - FR
          - ES
          - NL
          - DE
          type: string
        link_customization_name:
          description: |
            The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the default customization will be used. When using a Link customization, the language in the customization must match the language selected via the language parameter, and the countries in the customization should match the country codes selected via country_codes.
          type: string
        link_token:
          description: |
            A link_token, which can be supplied to Link in order to initialize it and receive a public_token, which can be exchanged for an access_token.
          readOnly: true
          type: string
        redirect_uri:
          description: |
            A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview.
          type: string
        request_id:
          description: A unique identifier for the request, which can be used for
            troubleshooting.
          readOnly: true
          type: string
        type:
          description: The type of the link token. DEPOSITORY for checking and savings
            accounts, CREDIT for credit card type accounts.
          enum:
          - DEPOSITORY
          - CREDIT
          - MICRO_DEPOSIT
          type: string
        vendor_access_token:
          description: The access token associated with the Item data is being requested
            for.
          type: string
        vendor_institution_id:
          description: |
            The ID of the institution the access token is requested for. If present the link token will be created in an update mode.
          minLength: 1
          type: string
        verify_owner:
          default: false
          description: |
            Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification will be suppressed by default
          type: boolean
      required:
      - client_name
      - country_codes
      - customer_id
      - language
      - type
      type: object
    external_account_transaction:
      example:
        date: 2000-01-23
        transaction_id: transaction_id
        amount: 0
        check_number: check_number
        payment_channel: IN_STORE
        merchant_name: Fancy store
        currency: USD
        category:
        - category
        - category
        authorized_date: 2000-01-23
        payment_method: payment_method
        is_pending: true
      properties:
        amount:
          description: Transaction amount. Number in cents. E.g. 1000 represents $10.00
          format: int64
          type: integer
        authorized_date:
          description: Date that the transaction is authorized. ISO 8601 format (
            YYYY-MM-DD ).
          format: date
          type: string
        category:
          description: Category of the transaction
          items:
            type: string
          type: array
        check_number:
          description: Check number of the transaction. This field will be null if
            not a check transaction.
          type: string
        currency:
          description: ISO 4217 alphabetic currency code
          example: USD
          type: string
        date:
          description: |
            For pending transactions, this represents the date of the transaction occurred; for posted transactions, this represents the date of the transaction posted. ISO 8601 format ( YYYY-MM-DD ).
          format: date
          type: string
        is_pending:
          description: Indicates the transaction is pending or unsettled if true.
          type: boolean
        merchant_name:
          description: Merchant name of the transaction
          example: Fancy store
          type: string
        payment_channel:
          description: channel used to make a payment
          enum:
          - IN_STORE
          - ONLINE
          - OTHER
          type: string
          x-enumDescriptions:
          - IN_STORE: In store transaction.
          - ONLINE: Online transaction.
          - OTHER: Transactions that relate to banks, e.g. fees or deposits.
        payment_method:
          description: Transfer type of the transaction, e.g. ACH
          type: string
        transaction_id:
          description: case-sensitive transaction ID
          type: string
      type: object
    external_account_vendor_data:
      example:
        account_number_mask: account_number_mask
        institution_id: institution_id
      properties:
        account_number_mask:
          description: |
            The last alphanumeric characters of an account's official account number. Note that the mask may be non-unique between accounts, and it may also not match the mask that the bank displays to the user.
          type: string
        institution_id:
          description: The ID of the institution external account belongs
          type: string
      type: object
    external_account_vendor_values:
      description: |
        The vendor selected for the operation.
      enum:
      - PLAID
      type: string
    external_accounts_list:
      allOf:
      - $ref: '#/components/schemas/external_accounts_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    external_accounts_transaction_list:
      example:
        transactions:
        - date: 2000-01-23
          transaction_id: transaction_id
          amount: 0
          check_number: check_number
          payment_channel: IN_STORE
          merchant_name: Fancy store
          currency: USD
          category:
          - category
          - category
          authorized_date: 2000-01-23
          payment_method: payment_method
          is_pending: true
        - date: 2000-01-23
          transaction_id: transaction_id
          amount: 0
          check_number: check_number
          payment_channel: IN_STORE
          merchant_name: Fancy store
          currency: USD
          category:
          - category
          - category
          authorized_date: 2000-01-23
          payment_method: payment_method
          is_pending: true
      properties:
        transactions:
          description: Array of transactions of a given external account
          items:
            $ref: '#/components/schemas/external_account_transaction'
          type: array
      required:
      - transactions
      type: object
    fee:
      properties:
        amount:
          description: Fee amount
          format: int64
          type: integer
        currency:
          description: Fee currency code in ISO 4217
          pattern: ^[A-Z]{3}$
          type: string
        fee_type:
          description: Fee type
          enum:
          - MONTHLY_FEE
          - ANNUAL_FEE
          - ATM_WITHDRWAL_FEE
          - OVERDRAFT_FEE
          - ACH_FEE
          - WIRE_FEE
          type: string
        id:
          description: Fee ID
          format: uuid
          readOnly: true
          type: string
        product_type:
          enum:
          - INTEREST
          - FEE
          type: string
      required:
      - amount
      - currency
      - fee_type
      - product_type
      type: object
    form:
      description: PHYSICAL or VIRTUAL.
      enum:
      - PHYSICAL
      - VIRTUAL
      type: string
    funding_source:
      properties:
        id:
          description: Funding Source ID
          format: uuid
          readOnly: true
          type: string
        name:
          description: Funding Source Name
          readOnly: true
          type: string
        url:
          description: Funding Source URL
          readOnly: true
          type: string
      type: object
    funding_source_response:
      allOf:
      - $ref: '#/components/schemas/funding_source'
      required:
      - id
      - name
      - url
    funding_source_response_list:
      properties:
        funding_sources:
          description: Array of funding sources
          items:
            $ref: '#/components/schemas/funding_source_response'
          type: array
      required:
      - funding_sources
      type: object
    google_digital_wallet_provision_response:
      properties:
        card_id:
          description: The unique identifier of a card
          format: uuid
          type: string
        created_time:
          format: date-time
          type: string
        last_modified_time:
          format: date-time
          type: string
        push_tokenize_request_data:
          $ref: '#/components/schemas/push_tokenize_request_data'
      type: object
    id:
      description: The unique identifier for this resource.
      format: uuid
      readOnly: true
      type: string
    ingestion_status:
      description: Reconciliation ingestion status values
      enum:
      - IN_PROCESS
      - COMPLETED
      - FAILED
      title: Reconciliation Ingestion Status Values
      type: string
    interest:
      properties:
        accrual_payout_schedule:
          $ref: '#/components/schemas/accrual_payout_schedule'
        calculation_method:
          $ref: '#/components/schemas/calculation_method'
        description:
          description: User provided description for the current interest.
          example: The rate is designed for high interest saving account.
          type: string
        id:
          description: Interest ID
          format: uuid
          readOnly: true
          type: string
        product_type:
          enum:
          - INTEREST
          - FEE
          type: string
        rates:
          description: |
            A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
          items:
            $ref: '#/components/schemas/rate_details'
          type: array
      required:
      - accrual_payout_schedule
      - calculation_method
      - product_type
      - rates
      type: object
    internal_transfer:
      example:
        amount: 1025
        currency: USD
        originating_account_id: faker.random.uuid
        receiving_account_id: faker.random.uuid
        type: ACCOUNT_TO_ACCOUNT
      properties:
        amount:
          description: The amount (in cents) to transfer from originating account
            to receiving account.
          minimum: 1
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          example: USD
          type: string
        memo:
          description: A short note to the recipient
          type: string
        metadata:
          description: Arbitrary key-value metadata to associate with the transaction
          type: object
        originating_account_alias:
          description: An alias representing a GL account to debit. This is alternative
            to specifying by account id
          example: ach_suspense
          type: string
        originating_account_id:
          description: The UUID of the account being debited
          format: uuid
          type: string
        receiving_account_alias:
          description: An alias representing a GL account to credit. This is an alternative
            to specifying by account id
          example: ach_suspense
          type: string
        receiving_account_customer_id:
          description: The customer id of the owner of the receiving account. Only
            required when type is "outgoing_remittance"
          format: uuid
          type: string
        receiving_account_id:
          description: The UUID of the account being credited
          format: uuid
          type: string
        type:
          description: The desired transaction type to use for this transfer
          enum:
          - INTEREST_PAYOUT
          - ACCOUNT_TO_ACCOUNT
          - MANUAL_ADJUSTMENT
          - MANUAL_ADJUSTMENT_REVERSAL
          - TRANSFER_FEE
          - TRANSFER_FEE_REVERSAL
          - OUTGOING_INTERNATIONAL_REMITTANCE
          - OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL
          - SIGN_UP_BONUS
          - ACH_CREDIT_SWEEP
          - ACH_DEBIT_SWEEP
          example: outgoing_international_remittance
          type: string
      required:
      - amount
      - currency
      - type
      type: object
    internal_transfer_response:
      allOf:
      - $ref: '#/components/schemas/internal_transfer'
      - $ref: '#/components/schemas/internal_transfer_response_allOf'
    manual_account_verification:
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
      title: Information specific to Manual verification
    master_disclosure:
      allOf:
      - required:
        - type
        - version
      - $ref: '#/components/schemas/base_master_disclosure'
      description: |
        Represents a document that must be shown to every party who is subject  to a particular regulatory requirement (the _disclosure type_). The  master disclosure record is the same for all such customers.
      type: object
    master_disclosure_list:
      allOf:
      - $ref: '#/components/schemas/master_disclosure_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    metadata:
      description: |
        Optional field to store additional informaton about the resource.  Intended to be used by the integrator to store non-sensitive data.
      type: object
    paginated_response:
      properties:
        next_page_token:
          description: If returned, use the next_page_token to query for the next
            page of results. Not returned if there are no more rows.
          example: faker.random.alphaNumeric(10)
          type: string
      title: Paginated List response
      type: object
    patch_account_product:
      discriminator:
        mapping:
          FEE: '#/components/schemas/fee'
          INTEREST: '#/components/schemas/patch_interest'
        propertyName: product_type
      oneOf:
      - $ref: '#/components/schemas/patch_interest'
      - $ref: '#/components/schemas/fee'
      type: object
    patch_accounts_request_account_identifiers:
      properties:
        number:
          description: |
            The account number.
          example: faker.finance.account
          minLength: 1
          type: string
      title: Identifiers for the account
      type: object
    patch_accounts_request_routing_identifiers:
      properties:
        ach_routing_number:
          description: |
            The routing number used for US ACH payments.
          example: "756392185"
          minLength: 1
          type: string
        bank_name:
          description: The name of the bank managing the account
          example: Chase
          minLength: 1
          type: string
      title: Identifiers for the bank
      type: object
    patch_customer:
      description: Customer object for patch purpose. All fields are optional
      properties:
        dob:
          description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
          format: date
          type: string
        email:
          description: Customer's email
          example: faker.internet.email
          type: string
        first_name:
          description: Customer's first name
          example: faker.name.firstName
          type: string
        last_name:
          description: Customer's last name
          example: faker.name.lastName
          type: string
        legal_address:
          $ref: '#/components/schemas/address1'
        metadata:
          description: User-supplied JSON format metadata. Do not use to store PII.
          type: object
        middle_name:
          description: Customer's middle name
          example: faker.name.middleName
          type: string
        phone_number:
          description: Customer's mobile phone number with country code in E.164 format
          example: faker.helpers.replaceSymbols(+###########)
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        shipping_address:
          $ref: '#/components/schemas/address1'
        ssn:
          description: Customer's full tax ID eg SSN formatted with hyphens. This
            optional parameter is required when running KYC on a customer. Must be
            compiled with ^\d{3}-\d{2}-\d{4}$. Response contains the last 4 digits
            only (e.g. 6789).
          example: faker.helpers.replaceSymbols(###-##-####)
          type: string
        status:
          description: Customer's status
          enum:
          - PROSPECT
          - ACTIVE
          - FROZEN
          - ESCHEAT
          - DECEASED
          - SANCTION
          - DORMANT
          - DENIED
          type: string
      title: Customer
      type: object
    patch_external_account:
      properties:
        account_identifiers:
          $ref: '#/components/schemas/patch_accounts_request_account_identifiers'
        account_owner_names:
          description: The names of the account owners.
          items:
            example: faker.name.findName
            type: string
          type: array
        nickname:
          description: A user-meaningful name for the account
          example: faker.finance.accountName
          minLength: 1
          type: string
        routing_identifiers:
          $ref: '#/components/schemas/patch_accounts_request_routing_identifiers'
        type:
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
          type: string
        verification:
          $ref: '#/components/schemas/account_verification'
      type: object
    patch_interest:
      properties:
        accrual_payout_schedule:
          $ref: '#/components/schemas/accrual_payout_schedule'
        calculation_method:
          $ref: '#/components/schemas/calculation_method'
        description:
          description: User provided description for the current interest.
          example: The rate is designed for high interest saving account.
          type: string
        id:
          description: Interest ID
          format: uuid
          readOnly: true
          type: string
        product_type:
          enum:
          - INTEREST
          type: string
        rates:
          description: |
            A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
          items:
            $ref: '#/components/schemas/rate_details'
          type: array
      required:
      - product_type
      type: object
    pending_transaction:
      example:
        account_id: faker.random.uuid
        data:
          reason: reason
          amount: 0
          external_data: '{}'
          was_partial: true
          avail_balance: 6
          history:
          - data:
              reason: reason
              amount: 0
              external_data: '{}'
              was_partial: true
              avail_balance: 5
              user_data: '{}'
              type: type
              network: network
              force_post: true
              expires_at: 2000-01-23T04:56:07.000+00:00
              balance: 2
              subtype: subtype
              total_amount: 0
              effective_date: 2000-01-23T04:56:07.000+00:00
              currency: currency
              req_amount: 0
              risk_info: '{}'
              operation: hold_new
              status: PENDING
            created: 2000-01-23T04:56:07.000+00:00
            idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            id: 3
            account_no: account_no
            updated: 2000-01-23T04:56:07.000+00:00
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tenant: tenant
          - data:
              reason: reason
              amount: 0
              external_data: '{}'
              was_partial: true
              avail_balance: 5
              user_data: '{}'
              type: type
              network: network
              force_post: true
              expires_at: 2000-01-23T04:56:07.000+00:00
              balance: 2
              subtype: subtype
              total_amount: 0
              effective_date: 2000-01-23T04:56:07.000+00:00
              currency: currency
              req_amount: 0
              risk_info: '{}'
              operation: hold_new
              status: PENDING
            created: 2000-01-23T04:56:07.000+00:00
            idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            id: 3
            account_no: account_no
            updated: 2000-01-23T04:56:07.000+00:00
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tenant: tenant
          user_data: '{}'
          type: type
          network: network
          force_post: true
          expires_at: 2000-01-23T04:56:07.000+00:00
          balance: 1
          subtype: subtype
          total_amount: 0
          effective_date: 2000-01-23T04:56:07.000+00:00
          currency: currency
          req_amount: 0
          risk_info: '{}'
          operation: hold_new
          status: PENDING
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 7
        account_no: account_no
        updated: 2000-01-23T04:56:07.000+00:00
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: tenant
      properties:
        account_id:
          description: The account id associated with the hold
          example: faker.random.uuid
          type: string
        account_no:
          description: The account number associated with the hold
          type: string
        created:
          description: The creation date of the hold
          format: date-time
          type: string
        data:
          $ref: '#/components/schemas/pending_transaction_data'
        id:
          type: integer
        idemkey:
          description: The idempotency key used when initially creating this hold.
          format: uuid
          type: string
        tenant:
          description: The tenant associated with this hold, in the form "<bankid>_<partnerid>"
          type: string
        updated:
          description: The date the hold was last update
          format: date-time
          type: string
        uuid:
          description: The unique identifier of the hold transaction.
          format: uuid
          type: string
      required:
      - account_id
      - account_no
      - created
      - data
      - id
      - idemkey
      - tenant
      - updated
      - uuid
      title: A pending transaction
      type: object
    pending_transaction_data:
      example:
        reason: reason
        amount: 0
        external_data: '{}'
        was_partial: true
        avail_balance: 6
        history:
        - data:
            reason: reason
            amount: 0
            external_data: '{}'
            was_partial: true
            avail_balance: 5
            user_data: '{}'
            type: type
            network: network
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 2
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: '{}'
            operation: hold_new
            status: PENDING
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 3
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        - data:
            reason: reason
            amount: 0
            external_data: '{}'
            was_partial: true
            avail_balance: 5
            user_data: '{}'
            type: type
            network: network
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 2
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: '{}'
            operation: hold_new
            status: PENDING
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 3
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        user_data: '{}'
        type: type
        network: network
        force_post: true
        expires_at: 2000-01-23T04:56:07.000+00:00
        balance: 1
        subtype: subtype
        total_amount: 0
        effective_date: 2000-01-23T04:56:07.000+00:00
        currency: currency
        req_amount: 0
        risk_info: '{}'
        operation: hold_new
        status: PENDING
      properties:
        amount:
          description: The amount of the hold.
          minimum: 0
          type: integer
        avail_balance:
          description: The account "available balance" at the time this hold was created
          type: integer
        balance:
          description: The account balance at the time this hold was created
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        effective_date:
          description: The effective date of the transaction once it gets posted
          format: date-time
          type: string
        expires_at:
          description: The date that at which this hold is no longer valid.
          format: date-time
          type: string
        external_data:
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
          type: object
        force_post:
          description: Whether or not the hold was forced (spending controls ignored)
          type: boolean
        history:
          description: An array representing any previous states of the hold, if it
            has been modified (For example, increasing or decreasing the hold amount).
          items:
            $ref: '#/components/schemas/pending_transaction_history'
          type: array
        network:
          description: The network this transaction is associated with
          type: string
        operation:
          enum:
          - hold_new
          - hold_increase
          - hold_decrease
          - hold_replace
          - hold_decline
          - hold_cancel
          - hold_post
          type: string
        reason:
          description: If a hold has been declined or modified, this will include
            the reason.
          type: string
        req_amount:
          description: The requested amount, in the case of hold modifications.
          minimum: 0
          type: integer
        risk_info:
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
          type: object
        status:
          description: The status of the hold.
          enum:
          - PENDING
          - REPLACED
          - DECLINED
          - RELEASED
          - PARTCLEARD
          - EXPIRED
          - CLEARED
          - INTERNAL_ERROR
          type: string
        subtype:
          description: The specific transaction type. For example, for `ach`, this
            may be "outgoing_debit".
          type: string
        total_amount:
          description: The total amount of the hold. This may be different than `amount`
            in the case where a hold increase or decrease was requested.
          minimum: 0
          type: integer
        type:
          description: The general type of transaction. For example, "card" or "ach".
          type: string
        user_data:
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
          type: object
        was_partial:
          description: Does this hold represent a partial debit (or credit)?
          type: boolean
      required:
      - amount
      - avail_balance
      - balance
      - currency
      - dc_sign
      - effective_date
      - expires_at
      - external_data
      - force_post
      - history
      - network
      - operation
      - reason
      - req_amount
      - risk_info
      - status
      - subtype
      - total_amount
      - type
      - user_data
      - was_partial
      type: object
    pending_transaction_history:
      example:
        data:
          reason: reason
          amount: 0
          external_data: '{}'
          was_partial: true
          avail_balance: 5
          user_data: '{}'
          type: type
          network: network
          force_post: true
          expires_at: 2000-01-23T04:56:07.000+00:00
          balance: 2
          subtype: subtype
          total_amount: 0
          effective_date: 2000-01-23T04:56:07.000+00:00
          currency: currency
          req_amount: 0
          risk_info: '{}'
          operation: hold_new
          status: PENDING
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 3
        account_no: account_no
        updated: 2000-01-23T04:56:07.000+00:00
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: tenant
      properties:
        account_no:
          description: The account number associated with the hold
          type: string
        created:
          description: The creation date of the hold
          format: date-time
          type: string
        data:
          $ref: '#/components/schemas/pending_transaction_history_data'
        id:
          type: integer
        idemkey:
          description: The idempotency key used when initially creating this transaction.
          format: uuid
          type: string
        tenant:
          description: The tenant associated with this transaction, in the form "<bankid>_<partnerid>"
          type: string
        updated:
          description: The date the hold was last update
          format: date-time
          type: string
        uuid:
          description: The unique identifier of the hold.
          format: uuid
          type: string
      required:
      - account_no
      - created
      - data
      - id
      - idemkey
      - tenant
      - updated
      - uuid
      title: A pending transaction
      type: object
    pending_transaction_history_data:
      example:
        reason: reason
        amount: 0
        external_data: '{}'
        was_partial: true
        avail_balance: 5
        user_data: '{}'
        type: type
        network: network
        force_post: true
        expires_at: 2000-01-23T04:56:07.000+00:00
        balance: 2
        subtype: subtype
        total_amount: 0
        effective_date: 2000-01-23T04:56:07.000+00:00
        currency: currency
        req_amount: 0
        risk_info: '{}'
        operation: hold_new
        status: PENDING
      properties:
        amount:
          description: The amount of the hold.
          minimum: 0
          type: integer
        avail_balance:
          description: The account "available balance" at the time this hold was created
          type: integer
        balance:
          description: The account balance at the time this hold was created
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        effective_date:
          description: The effective date of the transaction once it gets posted
          format: date-time
          type: string
        expires_at:
          description: The date that at which this hold is no longer valid.
          format: date-time
          type: string
        external_data:
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
          type: object
        force_post:
          description: Whether or not the hold was forced (spending controls ignored)
          type: boolean
        network:
          description: The network this transaction is associated with
          type: string
        operation:
          enum:
          - hold_new
          - hold_increase
          - hold_decrease
          - hold_replace
          - hold_decline
          - hold_cancel
          - hold_post
          type: string
        reason:
          description: If a hold has been declined or modified, this will include
            the reason.
          type: string
        req_amount:
          description: The requested amount, in the case of hold modifications.
          minimum: 0
          type: integer
        risk_info:
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
          type: object
        status:
          description: The status of the hold.
          enum:
          - PENDING
          - REPLACED
          - DECLINED
          - RELEASED
          - PARTCLEARD
          - EXPIRED
          - CLEARED
          - INTERNAL_ERROR
          type: string
        subtype:
          description: The specific transaction type. For example, for `ach`, this
            may be "outgoing_debit".
          type: string
        total_amount:
          description: The total amount of the hold. This may be different than `amount`
            in the case where a hold increase or decrease was requested.
          minimum: 0
          type: integer
        type:
          description: The general type of transaction. For example, "card" or "ach".
          type: string
        user_data:
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
          type: object
        was_partial:
          description: Does this hold represent a partial debit (or credit)?
          type: boolean
      required:
      - amount
      - avail_balance
      - balance
      - currency
      - dc_sign
      - effective_date
      - expires_at
      - external_data
      - force_post
      - history
      - network
      - operation
      - reason
      - req_amount
      - risk_info
      - status
      - subtype
      - total_amount
      - type
      - user_data
      - was_partial
      type: object
    pending_transactions:
      example:
        result:
        - account_id: faker.random.uuid
          data:
            reason: reason
            amount: 0
            external_data: '{}'
            was_partial: true
            avail_balance: 6
            history:
            - data:
                reason: reason
                amount: 0
                external_data: '{}'
                was_partial: true
                avail_balance: 5
                user_data: '{}'
                type: type
                network: network
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: '{}'
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            - data:
                reason: reason
                amount: 0
                external_data: '{}'
                was_partial: true
                avail_balance: 5
                user_data: '{}'
                type: type
                network: network
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: '{}'
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            user_data: '{}'
            type: type
            network: network
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 1
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: '{}'
            operation: hold_new
            status: PENDING
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 7
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        - account_id: faker.random.uuid
          data:
            reason: reason
            amount: 0
            external_data: '{}'
            was_partial: true
            avail_balance: 6
            history:
            - data:
                reason: reason
                amount: 0
                external_data: '{}'
                was_partial: true
                avail_balance: 5
                user_data: '{}'
                type: type
                network: network
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: '{}'
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            - data:
                reason: reason
                amount: 0
                external_data: '{}'
                was_partial: true
                avail_balance: 5
                user_data: '{}'
                type: type
                network: network
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: '{}'
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            user_data: '{}'
            type: type
            network: network
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 1
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: '{}'
            operation: hold_new
            status: PENDING
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 7
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        next_page_token: next_page_token
      properties:
        next_page_token:
          description: If returned, use the next_page_token to query for the next
            page of results. Not returned if there are no more rows.
          nullable: true
          type: string
        result:
          description: List of pending transactions
          items:
            $ref: '#/components/schemas/pending_transaction'
          type: array
      required:
      - next_page_token
      - result
      title: Pending Transactions Response
      type: object
    person_id:
      description: |
        Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
      format: uuid
      type: string
    physical_card:
      allOf:
      - $ref: '#/components/schemas/base_card'
      - $ref: '#/components/schemas/physical_card_allOf'
      description: Details pertaining to issuing a new physical card
      title: Physical Card
    physical_card_format:
      description: The format of a physical card product
      enum:
      - MAGNETIC_STRIPE
      - CHIP
      - CONTACT
      - CONTACTLESS
      - PHYSICAL_COMBO
      type: string
    physical_card_issuance_request:
      allOf:
      - $ref: '#/components/schemas/physical_card'
      - required:
        - account_id
        - card_product_id
        - customer_id
        - form
        - type
        type: object
    physical_card_plus_status:
      allOf:
      - $ref: '#/components/schemas/physical_card'
      - $ref: '#/components/schemas/physical_card_response_status'
    physical_card_response:
      allOf:
      - $ref: '#/components/schemas/physical_card_plus_status'
      - $ref: '#/components/schemas/physical_card_response_allOf'
    physical_card_response_status:
      allOf:
      - $ref: '#/components/schemas/card_status_object'
      - $ref: '#/components/schemas/physical_card_response_status_allOf'
    ping_response:
      properties:
        webhook_status:
          description: status of webhook endpoint
          example: alive
          type: string
      required:
      - webhook_status
      type: object
    plaid_account_verification:
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
      title: Information specific to Plaid verification
    posted_transaction:
      example:
        lead_mode: true
        data:
          metadata: '{}'
          external_data: '{}'
          original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          memo: memo
          risk_info: '{}'
          user_data: '{}'
          lines:
          - amount: 0
            is_primary: true
            created: 2000-01-23T04:56:07.000+00:00
            related_line: 5
            is_offset: true
            available_balance: 6
            account_no: account_no
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            network: network
            account_id: faker.random.uuid
            balance: 1
            is_gl_acc: true
            meta: '{}'
            currency: currency
            updated: 2000-01-23T04:56:07.000+00:00
            seq: 5
            tenant: tenant
            is_fee: true
          - amount: 0
            is_primary: true
            created: 2000-01-23T04:56:07.000+00:00
            related_line: 5
            is_offset: true
            available_balance: 6
            account_no: account_no
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            network: network
            account_id: faker.random.uuid
            balance: 1
            is_gl_acc: true
            meta: '{}'
            currency: currency
            updated: 2000-01-23T04:56:07.000+00:00
            seq: 5
            tenant: tenant
            is_fee: true
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: faker.random.uuid
        type: type
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subtype: subtype
        effective_date: 2000-01-23T04:56:07.000+00:00
        info_only: true
        id: 2
        updated: 2000-01-23T04:56:07.000+00:00
        posted_date: 2000-01-23T04:56:07.000+00:00
        tenant: tenant
        status: status
      properties:
        created:
          description: The creation date of the transaction
          format: date-time
          type: string
        data:
          $ref: '#/components/schemas/posted_transaction_data'
        effective_date:
          description: The "effective date" of a transaction. This may be earlier
            than posted_date in some cases (for example, a transaction that occurs
            on a Saturday may not be posted until the following Monday, but would
            have an effective date of Saturday)
          format: date-time
          type: string
        id:
          type: integer
        idemkey:
          description: The idempotency key used when initially creating this transaction.
          example: faker.random.uuid
          type: string
        info_only:
          description: Whether or not this transaction represents a purely informational
            operation or an actual money movement
          type: boolean
        lead_mode:
          description: Whether or not this transaction was created operating in "lead
            ledger" mode
          type: boolean
        posted_date:
          description: The date the transaction was posted. This is the date any money
            is considered to be added or removed from an account.
          format: date-time
          type: string
        status:
          type: string
        subtype:
          description: The specific transaction type. For example, for `ach`, this
            may be "outgoing_debit".
          type: string
        tenant:
          description: The tenant associated with this transaction, in the form "<bankid>_<partnerid>"
          type: string
        type:
          description: The general type of transaction. For example, "card" or "ach".
          type: string
        updated:
          description: The date the transaction was last updated
          format: date-time
          type: string
        uuid:
          description: The unique identifier of the transaction.
          format: uuid
          type: string
      required:
      - created
      - data
      - effective_date
      - id
      - idemkey
      - info_only
      - lead_mode
      - posted_date
      - status
      - subtype
      - tenant
      - type
      - updated
      - uuid
      title: A posted transaction
      type: object
    posted_transaction_data:
      example:
        metadata: '{}'
        external_data: '{}'
        original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        memo: memo
        risk_info: '{}'
        user_data: '{}'
        lines:
        - amount: 0
          is_primary: true
          created: 2000-01-23T04:56:07.000+00:00
          related_line: 5
          is_offset: true
          available_balance: 6
          account_no: account_no
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          network: network
          account_id: faker.random.uuid
          balance: 1
          is_gl_acc: true
          meta: '{}'
          currency: currency
          updated: 2000-01-23T04:56:07.000+00:00
          seq: 5
          tenant: tenant
          is_fee: true
        - amount: 0
          is_primary: true
          created: 2000-01-23T04:56:07.000+00:00
          related_line: 5
          is_offset: true
          available_balance: 6
          account_no: account_no
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          network: network
          account_id: faker.random.uuid
          balance: 1
          is_gl_acc: true
          meta: '{}'
          currency: currency
          updated: 2000-01-23T04:56:07.000+00:00
          seq: 5
          tenant: tenant
          is_fee: true
      properties:
        external_data:
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
          type: object
        lines:
          description: The set of accounting entries associated with this transaction.
            For example, a debit to a customer account will have a corresponding credit
            in a general ledger account.
          items:
            $ref: '#/components/schemas/transaction_line'
          type: array
        memo:
          type: string
        metadata:
          nullable: true
          type: object
        original_trx:
          description: The "original" transaction that this transaction is related
            to. This is only populated in the case of reversed transactions.
          format: uuid
          type: string
        risk_info:
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
          type: object
        user_data:
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
          type: object
      required:
      - external_data
      - lines
      - memo
      - metadata
      - risk_info
      - user_data
      type: object
    posted_transactions:
      example:
        result:
        - lead_mode: true
          data:
            metadata: '{}'
            external_data: '{}'
            original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            memo: memo
            risk_info: '{}'
            user_data: '{}'
            lines:
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              account_id: faker.random.uuid
              balance: 1
              is_gl_acc: true
              meta: '{}'
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              account_id: faker.random.uuid
              balance: 1
              is_gl_acc: true
              meta: '{}'
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: faker.random.uuid
          type: type
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          info_only: true
          id: 2
          updated: 2000-01-23T04:56:07.000+00:00
          posted_date: 2000-01-23T04:56:07.000+00:00
          tenant: tenant
          status: status
        - lead_mode: true
          data:
            metadata: '{}'
            external_data: '{}'
            original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            memo: memo
            risk_info: '{}'
            user_data: '{}'
            lines:
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              account_id: faker.random.uuid
              balance: 1
              is_gl_acc: true
              meta: '{}'
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              account_id: faker.random.uuid
              balance: 1
              is_gl_acc: true
              meta: '{}'
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: faker.random.uuid
          type: type
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          info_only: true
          id: 2
          updated: 2000-01-23T04:56:07.000+00:00
          posted_date: 2000-01-23T04:56:07.000+00:00
          tenant: tenant
          status: status
        next_page_token: next_page_token
      properties:
        next_page_token:
          description: If returned, use the next_page_token to query for the next
            page of results. Not returned if there are no more rows.
          nullable: true
          type: string
        result:
          description: List of posted transactions
          items:
            $ref: '#/components/schemas/posted_transaction'
          type: array
      required:
      - next_page_token
      - result
      title: Posted Transactions Response
      type: object
    prospect:
      allOf:
      - $ref: '#/components/schemas/prospect_allOf'
      - $ref: '#/components/schemas/base_person'
      description: A prospect has a unique identifier. It can be upgrade to a customer
        with required information
      title: Customer
      type: object
    provider_type:
      description: Name of the organization that provided this data.
      enum:
      - IDOLOGY
      - SOCURE
      example: SOCURE
      type: string
    push_tokenize_request_data:
      properties:
        display_name:
          type: string
        last_digits:
          type: string
        network:
          example: mastercard
          type: string
        opaque_payment_card:
          type: string
        token_service_provider:
          type: string
        user_address:
          $ref: '#/components/schemas/address'
      type: object
    rate_details:
      properties:
        accrual_period:
          enum:
          - DAILY
          - MONTHLY
          type: string
        rate:
          description: Rate in basis points. E.g. 5 represents 0.05%
          format: int32
          type: integer
        valid_from:
          description: Rate effective start date. Inclusive.
          format: date
          type: string
        valid_to:
          description: Rate effective end date. Exclusive.
          format: date
          type: string
      required:
      - accrual_period
      - rate
      - valid_from
      type: object
    rates:
      description: |
        A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
      items:
        $ref: '#/components/schemas/rate_details'
      type: array
    raw_response:
      deprecated: true
      example:
        provider: SOCURE
        raw_data: '{}'
      properties:
        provider:
          $ref: '#/components/schemas/provider_type'
        raw_data:
          description: Raw data from an external provider, as a JSON string.
          example: '{}'
          type: string
      title: Raw response from providers.
      type: object
    recipient_name:
      description: The name of the recipient to whom the card will be shipped
      properties:
        first_name:
          example: faker.name.firstName
          type: string
        last_name:
          example: faker.name.lastName
          type: string
        middle_name:
          example: faker.name.middleName
          type: string
      required:
      - first_name
      - last_name
      type: object
    reconciliation:
      description: Reconciliation
      example:
        file_name: faker.random.alphaNumeric(14)
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        file_name:
          description: Filename of the data to be reconciled
          example: faker.random.alphaNumeric(14)
          readOnly: true
          type: string
        id:
          description: Reconciliation ID
          format: uuid
          readOnly: true
          type: string
        ingestion_status:
          $ref: '#/components/schemas/ingestion_status'
      required:
      - file_name
      - id
      - ingestion_status
      title: Reconciliation
      type: object
    reconciliation_input:
      description: Input data for a reconciliation
      properties:
        byte_data:
          description: Base64url encoded image
          format: byte
          type: string
        file_name:
          description: Filename of the data to be reconciled
          example: faker.random.alphaNumeric(14)
          type: string
      required:
      - byte_data
      - file_name
      title: Reconciliation Input
      type: object
    reconciliation_list:
      allOf:
      - $ref: '#/components/schemas/reconciliation_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    relationship:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        customer_id:
          description: Customer that the current account is associated with
          format: uuid
          type: string
        id:
          description: ID of account relationship
          format: uuid
          readOnly: true
          type: string
        relationship_type:
          $ref: '#/components/schemas/account_relationship_type'
      required:
      - customer_id
      - relationship_type
      title: Account Relationship
      type: object
    relationship_list:
      allOf:
      - $ref: '#/components/schemas/relationship_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    relationship_role:
      description: CUSTODIAN - Related party is the custodian e.g. the parent, BENEFICIARY
        - Related party is the beneficiary e.g. the dependent, PARTNER - Related party
        is the partner
      enum:
      - CUSTODIAN
      - BENEFICIARY
      - PARTNER
      example: CUSTODIAN
      title: Relationship Role
      type: string
    relationship1:
      properties:
        id:
          description: ID of related entity
          format: uuid
          type: string
        relationship_role:
          $ref: '#/components/schemas/relationship_role'
      required:
      - id
      - relationship_role
      title: Relationship
      type: object
    resend_response:
      properties:
        body:
          description: response of the event notification
          example: usertransition response
          type: string
      type: object
    risk_rating:
      description: Represents a customer's risk profile
      example:
        risk_level: low
        risk_score: 0.8008282
        risk_review: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        configuration_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        next_review: 2000-01-23T04:56:07.000+00:00
      properties:
        configuration_id:
          description: The risk configuration id used in risk score calculation
          format: uuid
          readOnly: true
          type: string
        id:
          description: Risk rating ID
          format: uuid
          readOnly: true
          type: string
        next_review:
          description: The next review date where customer risk will be calculated
          format: date-time
          type: string
        risk_level:
          description: A textual representation of the customer risk score
          enum:
          - low
          - medium
          - high
          type: string
        risk_review:
          description: The date the customer risk rating was calculated
          format: date-time
          readOnly: true
          type: string
        risk_score:
          description: The cumulative score of all risk rating fields
          format: float
          type: number
      title: Customer Risk Rating
      type: object
    risk_rating_list:
      allOf:
      - $ref: '#/components/schemas/risk_rating_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    shipping:
      description: Details about the shipping method. If supplied this will override
        the default shipping address of the customer or account.
      properties:
        address:
          $ref: '#/components/schemas/address'
        care_of_line:
          description: The name of the person to send in care of
          type: string
        is_expedited_fulfillment:
          default: false
          description: Is the shipment expedited
          example: false
          type: boolean
        method:
          default: LOCAL_MAIL
          description: The shipping method
          enum:
          - LOCAL_MAIL
          - TWO_DAY
          - OVERNIGHT
          - INTERNATIONAL
          example: LOCAL_MAIL
          type: string
        phone_number:
          description: The phone number of the recipient
          example: faker.helpers.replaceSymbols(+###########)
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        recipient_name:
          $ref: '#/components/schemas/recipient_name'
      type: object
    single_use_token_request:
      properties:
        account_id:
          description: The ID of the account to which the token will be linked
          format: uuid
          type: string
        customer_id:
          description: The ID of the customer to whom the token will be issued
          format: uuid
          type: string
      required:
      - account_id
      - customer_id
      type: object
    single_use_token_response:
      example:
        customer_account_mapping_id: user_token
        expires: 2000-01-23T04:56:07.000Z
        token: token
      properties:
        customer_account_mapping_id:
          type: string
        expires:
          description: yyyy-MM-ddTHH:mm:ssZ
          format: date-time
          type: string
        token:
          type: string
      required:
      - expires
      type: object
    socure_event_body:
      properties:
        environmentName:
          description: Environment the event belongs to
          type: string
        event:
          $ref: '#/components/schemas/socure_watchlist_result'
        id:
          description: Unique identifier for the monitoring event
          type: string
      required:
      - environmentName
      - event
      - id
      type: object
    socure_global_watchlist:
      properties:
        matches:
          additionalProperties:
            $ref: '#/components/schemas/socure_match_list'
          description: Contains key-value pair of the Source list name and an array
            of details about that match.
          type: object
        reasonCodes:
          description: Array of reason codes
          items:
            $ref: '#/components/schemas/socure_reason_code'
          type: array
      required:
      - matches
      type: object
    socure_match:
      properties:
        comments:
          $ref: '#/components/schemas/socure_match_comments'
        entityId:
          type: string
        matchFields:
          items:
            type: string
          type: array
        sourceUrls:
          items:
            type: string
          type: array
        status:
          type: string
      required:
      - entityId
      - status
      type: object
    socure_match_list:
      description: Array of socure matches
      items:
        $ref: '#/components/schemas/socure_match'
      type: array
    socure_matches:
      additionalProperties:
        $ref: '#/components/schemas/socure_match_list'
      description: Contains key-value pair of the Source list name and an array of
        details about that match.
      type: object
    socure_reason_code:
      description: Applicable reason code for the transaction.
      type: string
    socure_watchlist_result:
      description: |
        Encapsulates the relationship between a person and any number of watchlists. That is, this tells you which watchlists a person is believed to be on (there might be false positives for similar names).
      properties:
        globalWatchlist:
          $ref: '#/components/schemas/socure_global_watchlist'
        referenceId:
          description: A 36 character reference ID included with every ID+ response.
          type: string
      required:
      - referenceId
      type: object
    spending_limit_with_time:
      example:
        amount: 0
        transactions: 0
      properties:
        amount:
          description: Maximum amount allowed within the time range
          format: int64
          minimum: 0
          type: integer
        transactions:
          description: Maximum number of transactions allowed within the time range
          format: int64
          minimum: 0
          type: integer
      type: object
    spending_limits:
      description: Account spending limits
      example:
        week:
          amount: 0
          transactions: 0
        month:
          amount: 0
          transactions: 0
        lifetime:
          amount: 0
          transactions: 0
        description: description
        day:
          amount: 0
          transactions: 0
        transaction:
          amount: 0
      properties:
        day:
          $ref: '#/components/schemas/spending_limit_with_time'
        description:
          description: User provided description on the spending limits
          type: string
        lifetime:
          $ref: '#/components/schemas/spending_limit_with_time'
        month:
          $ref: '#/components/schemas/spending_limit_with_time'
        transaction:
          $ref: '#/components/schemas/spending_limits_transaction'
        week:
          $ref: '#/components/schemas/spending_limit_with_time'
      type: object
    status:
      description: |
        The status of the account
      enum:
      - APPLICATION_SUBMITTED
      - FAILED_KYC
      - ACCOUNT_NOT_DESIRED
      - ACTIVE_OR_DISBURSED
      - CLOSED
      - SUSPENDED
      - CHARGED_OFF
      - ACCOUNT_NEVER_ACTIVE
      - ACTIVATED_NOT_DISBURSED
      - AWAITING_FIXING
      - IN_CLOSING
      - RESTRICTED
      title: Account Status
      type: string
    template_fields:
      example:
        interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overdraft_limit: 0
        fee_product_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        spending_limits:
          week:
            amount: 0
            transactions: 0
          month:
            amount: 0
            transactions: 0
          lifetime:
            amount: 0
            transactions: 0
          description: description
          day:
            amount: 0
            transactions: 0
          transaction:
            amount: 0
        is_ach_enabled: true
        bank_country: US
        currency: USD
        balance_ceiling:
          balance: 0
          overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        balance_floor:
          balance: 0
          overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_p2p_enabled: true
        is_card_enabled: true
      properties:
        account_type:
          $ref: '#/components/schemas/account_type'
        balance_ceiling:
          $ref: '#/components/schemas/balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/balance_floor'
        bank_country:
          description: Bank country of the account
          example: US
          pattern: ^[A-Z]{2,3}$
          type: string
        currency:
          description: Account currency. ISO 4217 alphabetic currency code
          example: USD
          pattern: ^[A-Z]{3}$
          type: string
        fee_product_ids:
          description: A list of fee resources from account product that new accounts
            will associate with
          items:
            format: uuid
            type: string
          type: array
        interest_product_id:
          description: Interest from account product that new accounts will associate
            with
          format: uuid
          type: string
        is_ach_enabled:
          description: Enable ACH transaction on ledger. Default is false
          type: boolean
        is_card_enabled:
          description: Enable card transaction on ledger. Default is false
          type: boolean
        is_p2p_enabled:
          description: Enable P2P transaction on ledger. Default is false
          type: boolean
        overdraft_limit:
          description: Account's overdraft limit. Default is 0
          format: int64
          minimum: 0
          type: integer
        spending_limits:
          $ref: '#/components/schemas/spending_limits'
      required:
      - account_type
      - bank_country
      - currency
      type: object
    template_list:
      allOf:
      - $ref: '#/components/schemas/template_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    tenant:
      description: The unique identifier of a tenant
      example: 1_1
      format: string
      type: string
    token_list_response:
      allOf:
      - $ref: '#/components/schemas/token_list_response_allOf'
    transaction_line:
      example:
        amount: 0
        is_primary: true
        created: 2000-01-23T04:56:07.000+00:00
        related_line: 5
        is_offset: true
        available_balance: 6
        account_no: account_no
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        network: network
        account_id: faker.random.uuid
        balance: 1
        is_gl_acc: true
        meta: '{}'
        currency: currency
        updated: 2000-01-23T04:56:07.000+00:00
        seq: 5
        tenant: tenant
        is_fee: true
      properties:
        account_id:
          description: The account uuid associated with this transaction line
          example: faker.random.uuid
          type: string
        account_no:
          description: The account number associated with this transaction line
          type: string
        amount:
          description: The amount (in cents) of the transaction
          type: integer
        available_balance:
          description: The account "available balance" at the point in time this transaction
            was posted
          type: integer
        balance:
          description: The account balance at the point in time this transaction was
            posted
          type: integer
        created:
          description: The creation date of the transaction
          format: date-time
          type: string
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        is_fee:
          description: Whether or not this line is considered a fee
          type: boolean
        is_gl_acc:
          description: Whether or not this line represents a GL account
          type: boolean
        is_offset:
          description: Whether or not this line is considered the "offset" line
          type: boolean
        is_primary:
          description: Whether or not this line is considered the "primary" line
          type: boolean
        meta:
          nullable: true
          type: object
        network:
          description: The network this transaction is associated with
          type: string
        related_line:
          type: integer
        seq:
          type: integer
        tenant:
          description: The tenant associated with this transaction, in the form "<bankid>_<partnerid>"
          type: string
        updated:
          description: The creation date of the transaction
          format: date-time
          type: string
        uuid:
          format: uuid
          type: string
      required:
      - account_id
      - account_no
      - amount
      - available_balance
      - balance
      - created
      - currency
      - dc_sign
      - is_fee
      - is_gl_acc
      - is_offset
      - is_primary
      - meta
      - network
      - related_line
      - seq
      - tenant
      - updated
      - uuid
      type: object
    vendor_info:
      description: |
        The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
      discriminator:
        mapping:
          application/json: '#/components/schemas/vendor_json'
          text/xml: '#/components/schemas/vendor_xml'
        propertyName: content_type
      oneOf:
      - $ref: '#/components/schemas/vendor_json'
      - $ref: '#/components/schemas/vendor_xml'
      title: Vendor Info
      type: object
    vendor_json:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor
          enum:
          - application/json
          type: string
        json:
          description: Data representation in JSON
          type: object
        vendor:
          example: SOCURE
          type: string
      required:
      - content_type
      - json
      - vendor
    vendor_xml:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor
          enum:
          - text/xml
          type: string
        vendor:
          example: IDOLOGY
          type: string
        xml:
          description: Data representaion in XML
          type: string
      required:
      - content_type
      - vendor
      - xml
    verification_type:
      description: The type of check run on the customer.
      enum:
      - fraud
      - synthetic
      - emailrisk
      - phonerisk
      - addressrisk
      - kyc
      - social
      - watchliststandard
      - watchlistpremier
      - watchlistplus
      - documentverification
      - alertlist
      - decision
      example: kyc
      type: string
    verification_vendor_info:
      description: |
        The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
      discriminator:
        mapping:
          application/json: '#/components/schemas/verification_vendor_json'
          text/xml: '#/components/schemas/verification_vendor_xml'
        propertyName: content_type
      oneOf:
      - $ref: '#/components/schemas/verification_vendor_json'
      - $ref: '#/components/schemas/verification_vendor_xml'
      type: object
    verification_vendor_info_detail:
      properties:
        code:
          description: Vendor specific code.
          example: R186
          type: string
        description:
          description: Description of vendor specific code.
          example: Global Watchlist sources selected are correlated with the input
            identifiers
          type: string
      type: object
    verification_vendor_json:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor.
          enum:
          - application/json
          type: string
        details:
          description: Array of vendor specific information.
          items:
            $ref: '#/components/schemas/verification_vendor_info_detail'
          readOnly: true
          type: array
        json:
          description: Data representation in JSON.
          type: object
        vendor:
          description: Name of the vendor used.
          example: SOCURE
          type: string
      required:
      - content_type
      - json
      - vendor
    verification_vendor_xml:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor.
          enum:
          - text/xml
          type: string
        details:
          description: Array of vendor specific information.
          items:
            $ref: '#/components/schemas/verification_vendor_info_detail'
          readOnly: true
          type: array
        vendor:
          description: Name of the vendor used.
          example: IDOLOGY
          type: string
        xml:
          description: Data representaion in XML.
          type: string
      required:
      - content_type
      - vendor
      - xml
    version:
      description: Version of the disclosure document.
      example: "1.0"
      pattern: ^[0-9]+\.[0-9]+$
      type: string
    virtual_card:
      allOf:
      - $ref: '#/components/schemas/base_card'
      description: A virtual card
      title: Virtual Card
    virtual_card_issuance_request:
      allOf:
      - $ref: '#/components/schemas/virtual_card'
      - required:
        - account_id
        - card_product_id
        - customer_id
        - form
        - type
        type: object
    virtual_card_plus_status:
      allOf:
      - $ref: '#/components/schemas/virtual_card'
      - $ref: '#/components/schemas/virtual_card_response_status'
    virtual_card_response:
      allOf:
      - $ref: '#/components/schemas/virtual_card_plus_status'
      - required:
        - account_id
        - card_brand
        - card_product_id
        - creation_time
        - customer_id
        - emboss_name
        - expiration_month
        - expiration_year
        - form
        - id
        - last_four
        - type
        type: object
    virtual_card_response_status:
      allOf:
      - $ref: '#/components/schemas/card_status_object'
      - required:
        - card_status
        - status_reason
        type: object
    watchlist_alert:
      example:
        provider_watchlist_name: provider_watchlist_name
        urls:
        - urls
        - urls
        created: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        provider_subject_id: provider_subject_id
        provider_subscription_id: provider_subscription_id
        provider_info: '{}'
        status: ACTIVE
      properties:
        created:
          description: When this alert was created
          format: date-time
          type: string
        id:
          description: Unique identifier for this alert
          format: uuid
          type: string
        provider_info:
          description: |
            The information provided to Synctera that triggered this alert, as an arbitrary JSON object. Interpretation of this object is up to the client.
          type: object
        provider_subject_id:
          description: The id of the provider subject for this alert
          type: string
        provider_subscription_id:
          description: The id of the provider subscription for this alert
          type: string
        provider_watchlist_name:
          description: The name of the provider for this alert
          type: string
        status:
          description: The status of this alert
          enum:
          - ACTIVE
          - SUPPRESSED
          type: string
        urls:
          description: |
            Where to get more information about this alert (according to our third-party data provider).
          items:
            type: string
          type: array
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
      required:
      - status
      type: object
    watchlist_alert_list:
      allOf:
      - $ref: '#/components/schemas/watchlist_alert_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    watchlist_subscription:
      example:
        period_end: 2000-01-23
        auto_renew: true
        period_start: 2000-01-23
        created: 2000-01-23T04:56:07.000+00:00
        customer_consent: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        provider_subscription_id: provider_subscription_id
        status: ACTIVE
      properties:
        auto_renew:
          description: |
            Whether this subscription should automatically renew when the subscription period is over (default: vendor-dependent).
          type: boolean
        created:
          description: When this subscription was created
          format: date-time
          type: string
        customer_consent:
          description: |
            Whether this customer has consented to being enrolled for watchlist monitoring
          type: boolean
        id:
          description: Unique identifier for this subscription
          format: uuid
          type: string
        period_end:
          description: The date when monitoring of this individual should end.
          format: date
          type: string
        period_start:
          description: 'The date when monitoring of this individual should begin (default:
            today).'
          format: date
          type: string
        provider_subscription_id:
          description: External provider subscription id
          type: string
        status:
          enum:
          - ACTIVE
          - INACTIVE
          type: string
      required:
      - customer_consent
      type: object
    watchlist_subscription_list:
      allOf:
      - $ref: '#/components/schemas/watchlist_subscription_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    watchlist_suppress:
      properties:
        provider_subject_id:
          description: |
            The id of the subject (person) for whom future alerts should be suppressed.
          type: string
        provider_subscription_id:
          description: |
            The provider's id for the subscription that caused the alert(s) that are being suppressed.
          type: string
        status:
          description: The status of this suppression
          enum:
          - SUPPRESS
          - UNSUPPRESS
          type: string
      required:
      - provider_subject_id
      - provider_subscription_id
      - status
      type: object
    webhook:
      description: Webhook object
      example:
        is_enabled: true
        last_updated: 2000-01-23T04:56:07.000+00:00
        metadata: metadata
        enabled_events:
        - null
        - null
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: https://openapi-generator.tech
      properties:
        description:
          description: A description of what the webhook is used for
          type: string
        enabled_events:
          description: A list of the events that will trigger the webhook
          items:
            $ref: '#/components/schemas/event_type1'
          type: array
        id:
          description: The unique ID of the webhook
          format: uuid
          type: string
        is_enabled:
          description: Set the webhook to be enabled or disabled
          type: boolean
        last_updated:
          description: Timestamp that this webhook was created or the last time any
            field was changed
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: Additional information stored to the webhook
          maxLength: 1024
          type: string
        url:
          description: URL that the webhook will send request to
          format: uri
          maxLength: 1000
          type: string
      required:
      - enabled_events
      - is_enabled
      - url
      title: Webhook
      type: object
    webhook_config:
      properties:
        custom_header:
          $ref: '#/components/schemas/custom_headers'
        password:
          description: password for access webhook endpoint
          type: string
        url:
          description: url of webhook endpoint
          type: string
        username:
          description: username for access webhook endpoint
          type: string
      type: object
    webhook_event:
      description: name of the event
      type: string
    webhook_list:
      allOf:
      - $ref: '#/components/schemas/webhook_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    webhook_request:
      properties:
        active:
          description: indicates whether webhook is active
          type: boolean
        config:
          $ref: '#/components/schemas/webhook_config'
        events:
          description: list of webhook events, use * to receive all notifications
          items:
            $ref: '#/components/schemas/webhook_event'
          type: array
        id:
          description: id of the webhook
          format: uuid
          type: string
        name:
          description: name of the webhook
          type: string
      type: object
    webhook_response:
      allOf:
      - $ref: '#/components/schemas/webhook_request'
      - $ref: '#/components/schemas/webhook_response_allOf'
    widget_type:
      description: The widget type
      enum:
      - set_pin
      - activate_card
      type: string
    inline_response_200:
      example:
        barcode: barcode
      properties:
        barcode:
          description: Barcode of the card
          type: string
      type: object
    inline_object:
      properties:
        is_rolling_secret:
          description: Set true to let the current secret expire in the next 24 hours.
            Set false to let the current secret expire immediately.
          type: boolean
      type: object
    inline_response_200_1:
      example:
        delete_at: 2000-01-23T04:56:07.000+00:00
        secret: secret
      properties:
        delete_at:
          description: Timestamp that the old secret is delete
          format: date-time
          type: string
        secret:
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
          maxLength: 64
          minLength: 64
          type: string
      type: object
    inline_response_201:
      example:
        secret: secret
      properties:
        secret:
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
          maxLength: 64
          minLength: 64
          type: string
      type: object
    inline_object_1:
      properties:
        event:
          $ref: '#/components/schemas/event_type1'
      type: object
    account_creation_allOf:
      properties:
        account_template_id:
          description: Account template ID
          format: uuid
          type: string
        relationships:
          description: List of the relationship for this account to the parties
          items:
            $ref: '#/components/schemas/relationship'
          type: array
      type: object
    account_list_allOf:
      properties:
        accounts:
          description: Array of Accounts
          items:
            $ref: '#/components/schemas/account'
          type: array
      required:
      - accounts
      type: object
    account_product_list_allOf:
      properties:
        account_products:
          description: Array of account products
          items:
            $ref: '#/components/schemas/account_product'
          type: array
      required:
      - account_products
      type: object
    bank_debit_network_response_allOf:
      properties:
        bank_network_id:
          description: The ID of the bank network
          type: string
        bin_id:
          description: The ID of the bank's bin that uses this debit network
          format: uuid
          type: string
      type: object
    base_card_allOf:
      properties:
        account_id:
          description: The ID of the account to which the card will be linked
          format: uuid
          type: string
        bin:
          description: The bin number
          type: string
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_product_id:
          description: The card product to which the card is attached
          format: uuid
          type: string
        creation_time:
          description: The timestamp representing when the card issuance request was
            made
          format: date-time
          readOnly: true
          type: string
        customer_id:
          description: The ID of the customer to whom the card will be issued
          format: uuid
          type: string
        emboss_name:
          $ref: '#/components/schemas/emboss_name'
        expiration_month:
          example: "06"
          pattern: ^\d{2}$
          readOnly: true
          type: string
        expiration_time:
          description: The timestamp representing when the card would expire at
          format: date-time
          readOnly: true
          type: string
        expiration_year:
          example: "25"
          pattern: ^\d{2}$
          readOnly: true
          type: string
        id:
          description: Card ID
          format: uuid
          readOnly: true
          type: string
        last_four:
          description: The last 4 digits of the card PAN
          example: "1234"
          pattern: ^\d{4}$
          readOnly: true
          type: string
        last_modified_time:
          description: The timestamp representing when the card was last modified
            at
          format: date-time
          readOnly: true
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Additional data to include in the request structured as key-value
            pairs
          type: object
        reissue_reason:
          description: The reason the card needs to be reissued
          enum:
          - EXPIRATION
          - LOST
          - STOLEN
          - DAMAGED
          - NAME_CHANGE
          - VIRTUAL_TO_PHYSICAL
          type: string
        reissued_from_id:
          description: |
            When reissuing a card, specify the card to be replaced here. When getting a card's details, if this card was issued as a reissuance of another card, this ID refers to the card was replaced.
          format: uuid
          type: string
        reissued_to_id:
          description: If this card was reissued, this ID refers to the card that
            replaced it.
          format: uuid
          readOnly: true
          type: string
        shipping:
          $ref: '#/components/schemas/shipping'
        type:
          description: Indicates the type of card to be issued
          enum:
          - DEBIT
          type: string
      required:
      - form
      type: object
    bin_and_debit_network_list_allOf:
      properties:
        bin_and_debit_networks:
          description: Array of BINs and debit networks
          items:
            $ref: '#/components/schemas/bin_and_debit_network'
          type: array
      required:
      - bin_and_debit_networks
      type: object
    bin_response_list_allOf:
      properties:
        bins:
          description: Array of Bins
          items:
            $ref: '#/components/schemas/bin_response'
          type: array
      required:
      - bins
      type: object
    card_changes_list_allOf:
      properties:
        changes:
          description: List of changes in descending chronological order
          items:
            $ref: '#/components/schemas/card_change'
          type: array
      required:
      - changes
      type: object
    card_image_details_list_allOf:
      properties:
        images:
          description: Array of image details
          items:
            $ref: '#/components/schemas/card_image_details'
          type: array
      required:
      - images
      type: object
    card_list_response_allOf:
      properties:
        cards:
          description: Array of Cards
          items:
            $ref: '#/components/schemas/card_response'
          type: array
      required:
      - cards
      type: object
    card_product_allOf:
      properties:
        account_range_id:
          description: ID of the Account Range for which card product was created
          format: uuid
          type: string
        active:
          description: indicates whether program is active
          type: boolean
        auto_allocate_range:
          description: Identifies whether a new account range will be automatically
            allocated
          type: boolean
        bank_id:
          description: The ID of the bank partner works with within this product
          type: integer
        bin_id:
          description: Bin ID
          format: uuid
          type: string
        card_program_id:
          description: Program ID
          format: uuid
          type: string
        creation_time:
          description: The timestamp representing when the card product was created
          format: date-time
          readOnly: true
          type: string
        end_date:
          description: The time when bin is decommissioned
          format: date-time
          type: string
        funding_source_id:
          description: Funding source ID
          format: uuid
          type: string
        id:
          description: Card Product ID
          format: uuid
          readOnly: true
          type: string
        image_mode:
          $ref: '#/components/schemas/card_image_mode'
        last_modified_time:
          description: The timestamp representing when the card product was last modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name of the card product
          type: string
        partner_id:
          description: The ID of the partner card product belongs to
          type: integer
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        start_date:
          description: The time when bin goes live
          format: date-time
          type: string
      required:
      - account_range_id
      - active
      - auto_allocate_range
      - bank_id
      - bin_id
      - card_program_id
      - funding_source_id
      - name
      - partner_id
      - start_date
      type: object
    card_product_list_response_allOf:
      properties:
        card_products:
          description: Array of Card Products
          items:
            $ref: '#/components/schemas/card_product_response'
          type: array
      required:
      - card_products
      type: object
    card_program_response_list_allOf:
      properties:
        programs:
          description: Array of Card Programs
          items:
            $ref: '#/components/schemas/card_program_response'
          type: array
      required:
      - programs
      type: object
    customer_allOf:
      properties:
        dob:
          description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
          format: date
          type: string
        first_name:
          description: Customer's first name
          example: faker.name.firstName
          type: string
        last_name:
          description: Customer's last name
          example: faker.name.lastName
          type: string
        status:
          description: Customer's status
          enum:
          - PROSPECT
          - ACTIVE
          - FROZEN
          - ESCHEAT
          - DECEASED
          - SANCTION
          - DORMANT
          - DENIED
          type: string
      required:
      - dob
      - first_name
      - last_name
      - status
    customer_alias_list_allOf:
      properties:
        customer_alias:
          description: Array of customer alias
          items:
            $ref: '#/components/schemas/customer_alias'
          type: array
      required:
      - customer_alias
      type: object
    customer_list_allOf:
      properties:
        customers:
          description: Array of Customers
          items:
            $ref: '#/components/schemas/customer_in_path'
          type: array
      required:
      - customers
      type: object
    customer_verification_result_list_allOf:
      properties:
        verifications:
          description: Array of verification results.
          items:
            $ref: '#/components/schemas/customer_verification_result'
          type: array
      required:
      - verifications
      type: object
    customer_verify_response_allOf:
      properties:
        kyc_status:
          $ref: '#/components/schemas/customer_kyc_status'
        verifications:
          description: Array of verification results.
          items:
            $ref: '#/components/schemas/customer_verification_result'
          type: array
      required:
      - kyc_status
      - verifications
      type: object
    debit_network_response_list_allOf:
      properties:
        debit_networks:
          description: Array of debit networks
          items:
            $ref: '#/components/schemas/debit_network_response'
          type: array
      required:
      - debit_networks
      type: object
    disclosure_list_allOf:
      properties:
        disclosures:
          description: Array of disclosures.
          items:
            $ref: '#/components/schemas/disclosure'
          type: array
      required:
      - disclosures
      type: object
    employment_list_allOf:
      properties:
        employment:
          description: Array of customer employment records.
          items:
            $ref: '#/components/schemas/employment'
          type: array
      required:
      - employment
      type: object
    event_response_history:
      example:
        sent_time: 2000-01-23T04:56:07.000+00:00
        code: 0
        response_body: response_body
        response_time: 2000-01-23T04:56:07.000+00:00
      properties:
        code:
          description: Response code from the request
          type: integer
        response_body:
          description: Response body from the request
          type: string
        response_time:
          description: Timestamp that the response is received
          format: date-time
          type: string
        sent_time:
          description: Timestamp that the request is sent
          format: date-time
          type: string
      type: object
    event_list_allOf:
      properties:
        event_list:
          description: Array of events
          items:
            $ref: '#/components/schemas/event'
          type: array
      required:
      - event_list
      type: object
    external_accounts_list_allOf:
      properties:
        external_accounts:
          description: Array of external accounts
          items:
            $ref: '#/components/schemas/external_account'
          type: array
      required:
      - external_accounts
      type: object
    internal_transfer_response_allOf:
      properties:
        id:
          description: The transaction id associated with the transfer
          format: uuid
          type: string
      required:
      - id
      type: object
    master_disclosure_list_allOf:
      properties:
        master_disclosures:
          description: Array of master disclosures.
          items:
            $ref: '#/components/schemas/master_disclosure'
          type: array
      required:
      - master_disclosures
      type: object
    physical_card_allOf:
      properties:
        is_pin_set:
          default: false
          description: indicates whether a pin has been set on the card
          example: false
          readOnly: true
          type: boolean
      type: object
    physical_card_response_allOf:
      properties:
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
      required:
      - account_id
      - card_brand
      - card_product_id
      - creation_time
      - customer_id
      - emboss_name
      - expiration_month
      - expiration_year
      - form
      - id
      - last_four
      - physical_card_format
      - shipping
      - type
      type: object
    physical_card_response_status_allOf:
      properties:
        card_fulfillment_status:
          $ref: '#/components/schemas/card_fulfillment_status'
        tracking_number:
          description: The tracking number
          example: "41991234567890123456"
          readOnly: true
          type: string
      required:
      - card_fulfillment_status
      - card_status
      - status_reason
      type: object
    prospect_allOf:
      properties:
        dob:
          description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
          format: date
          type: string
        first_name:
          description: Customer's first name
          example: faker.name.firstName
          type: string
        last_name:
          description: Customer's last name
          example: faker.name.lastName
          type: string
        status:
          description: Customer's status
          enum:
          - PROSPECT
          - ACTIVE
          - FROZEN
          - ESCHEAT
          - DECEASED
          - SANCTION
          - DORMANT
          - DENIED
          type: string
      required:
      - status
    reconciliation_list_allOf:
      properties:
        reconciliations:
          description: Array of reconciliations
          items:
            $ref: '#/components/schemas/reconciliation'
          type: array
      required:
      - reconciliations
      type: object
    relationship_list_allOf:
      properties:
        relationships:
          description: Array of relationships
          items:
            $ref: '#/components/schemas/relationship'
          type: array
      required:
      - relationships
      type: object
    risk_rating_list_allOf:
      properties:
        risk_ratings:
          description: Array of customer risk ratings
          items:
            $ref: '#/components/schemas/risk_rating'
          type: array
      required:
      - risk_ratings
      type: object
    socure_match_comments:
      properties:
        relatedURL:
          items:
            type: string
          type: array
      type: object
    spending_limits_transaction:
      description: Individual transaction limit
      example:
        amount: 0
      properties:
        amount:
          description: Maximum amount allowed
          format: int64
          minimum: 0
          type: integer
      type: object
    template_list_allOf:
      properties:
        account_templates:
          description: Array of account templates
          items:
            $ref: '#/components/schemas/account_template'
          type: array
      required:
      - account_templates
      type: object
    token_list_response_allOf:
      properties:
        digital_wallet_tokens:
          description: Array of digital wallet token information of a card
          items:
            $ref: '#/components/schemas/digital_wallet_token_response'
          type: array
      type: object
    watchlist_alert_list_allOf:
      properties:
        alerts:
          items:
            $ref: '#/components/schemas/watchlist_alert'
          type: array
      required:
      - alerts
      type: object
    watchlist_subscription_list_allOf:
      properties:
        subscriptions:
          items:
            $ref: '#/components/schemas/watchlist_subscription'
          type: array
      required:
      - subscriptions
      type: object
    webhook_list_allOf:
      properties:
        webhooks:
          description: Array of webhooks
          items:
            $ref: '#/components/schemas/webhook'
          type: array
      required:
      - webhooks
      type: object
    webhook_response_allOf:
      properties:
        creation_time:
          description: The timestamp representing when the webhook request was made
          format: date-time
          readOnly: true
          type: string
        last_modified_time:
          description: The timestamp representing when the webhook was last modified
          format: date-time
          readOnly: true
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: api_key
      scheme: bearer
      type: http
