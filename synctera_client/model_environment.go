/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// Environment Indicates which environment the workspace belongs to
type Environment string

// List of environment
const (
	ENVIRONMENT_SANDBOX      Environment = "SANDBOX"
	ENVIRONMENT_LIVE_TESTING Environment = "LIVE_TESTING"
	ENVIRONMENT_PROD_LITE    Environment = "PROD_LITE"
	ENVIRONMENT_PROD         Environment = "PROD"
)

// All allowed values of Environment enum
var AllowedEnvironmentEnumValues = []Environment{
	"SANDBOX",
	"LIVE_TESTING",
	"PROD_LITE",
	"PROD",
}

func (v *Environment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Environment(value)
	for _, existing := range AllowedEnvironmentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Environment", value)
}

// NewEnvironmentFromValue returns a pointer to a valid Environment
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentFromValue(v string) (*Environment, error) {
	ev := Environment(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Environment: valid values are %v", v, AllowedEnvironmentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Environment) IsValid() bool {
	for _, existing := range AllowedEnvironmentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to environment value
func (v Environment) Ptr() *Environment {
	return &v
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
