/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// BaseStatementAllOf struct for BaseStatementAllOf
type BaseStatementAllOf struct {
	AccountSummary               *AccountSummary `json:"account_summary,omitempty"`
	AuthorizedSigner             []Person1       `json:"authorized_signer,omitempty"`
	Disclosure                   *string         `json:"disclosure,omitempty"`
	JointAccountHolders          []Person1       `json:"joint_account_holders,omitempty"`
	PrimaryAccountHolderBusiness *Business1      `json:"primary_account_holder_business,omitempty"`
	PrimaryAccountHolderPersonal *Person1        `json:"primary_account_holder_personal,omitempty"`
	Transactions                 []Transaction   `json:"transactions,omitempty"`
}

// NewBaseStatementAllOf instantiates a new BaseStatementAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseStatementAllOf() *BaseStatementAllOf {
	this := BaseStatementAllOf{}
	return &this
}

// NewBaseStatementAllOfWithDefaults instantiates a new BaseStatementAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseStatementAllOfWithDefaults() *BaseStatementAllOf {
	this := BaseStatementAllOf{}
	return &this
}

// GetAccountSummary returns the AccountSummary field value if set, zero value otherwise.
func (o *BaseStatementAllOf) GetAccountSummary() AccountSummary {
	if o == nil || o.AccountSummary == nil {
		var ret AccountSummary
		return ret
	}
	return *o.AccountSummary
}

// GetAccountSummaryOk returns a tuple with the AccountSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatementAllOf) GetAccountSummaryOk() (*AccountSummary, bool) {
	if o == nil || o.AccountSummary == nil {
		return nil, false
	}
	return o.AccountSummary, true
}

// HasAccountSummary returns a boolean if a field has been set.
func (o *BaseStatementAllOf) HasAccountSummary() bool {
	if o != nil && o.AccountSummary != nil {
		return true
	}

	return false
}

// SetAccountSummary gets a reference to the given AccountSummary and assigns it to the AccountSummary field.
func (o *BaseStatementAllOf) SetAccountSummary(v AccountSummary) {
	o.AccountSummary = &v
}

// GetAuthorizedSigner returns the AuthorizedSigner field value if set, zero value otherwise.
func (o *BaseStatementAllOf) GetAuthorizedSigner() []Person1 {
	if o == nil || o.AuthorizedSigner == nil {
		var ret []Person1
		return ret
	}
	return o.AuthorizedSigner
}

// GetAuthorizedSignerOk returns a tuple with the AuthorizedSigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatementAllOf) GetAuthorizedSignerOk() ([]Person1, bool) {
	if o == nil || o.AuthorizedSigner == nil {
		return nil, false
	}
	return o.AuthorizedSigner, true
}

// HasAuthorizedSigner returns a boolean if a field has been set.
func (o *BaseStatementAllOf) HasAuthorizedSigner() bool {
	if o != nil && o.AuthorizedSigner != nil {
		return true
	}

	return false
}

// SetAuthorizedSigner gets a reference to the given []Person1 and assigns it to the AuthorizedSigner field.
func (o *BaseStatementAllOf) SetAuthorizedSigner(v []Person1) {
	o.AuthorizedSigner = v
}

// GetDisclosure returns the Disclosure field value if set, zero value otherwise.
func (o *BaseStatementAllOf) GetDisclosure() string {
	if o == nil || o.Disclosure == nil {
		var ret string
		return ret
	}
	return *o.Disclosure
}

// GetDisclosureOk returns a tuple with the Disclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatementAllOf) GetDisclosureOk() (*string, bool) {
	if o == nil || o.Disclosure == nil {
		return nil, false
	}
	return o.Disclosure, true
}

// HasDisclosure returns a boolean if a field has been set.
func (o *BaseStatementAllOf) HasDisclosure() bool {
	if o != nil && o.Disclosure != nil {
		return true
	}

	return false
}

// SetDisclosure gets a reference to the given string and assigns it to the Disclosure field.
func (o *BaseStatementAllOf) SetDisclosure(v string) {
	o.Disclosure = &v
}

// GetJointAccountHolders returns the JointAccountHolders field value if set, zero value otherwise.
func (o *BaseStatementAllOf) GetJointAccountHolders() []Person1 {
	if o == nil || o.JointAccountHolders == nil {
		var ret []Person1
		return ret
	}
	return o.JointAccountHolders
}

// GetJointAccountHoldersOk returns a tuple with the JointAccountHolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatementAllOf) GetJointAccountHoldersOk() ([]Person1, bool) {
	if o == nil || o.JointAccountHolders == nil {
		return nil, false
	}
	return o.JointAccountHolders, true
}

// HasJointAccountHolders returns a boolean if a field has been set.
func (o *BaseStatementAllOf) HasJointAccountHolders() bool {
	if o != nil && o.JointAccountHolders != nil {
		return true
	}

	return false
}

// SetJointAccountHolders gets a reference to the given []Person1 and assigns it to the JointAccountHolders field.
func (o *BaseStatementAllOf) SetJointAccountHolders(v []Person1) {
	o.JointAccountHolders = v
}

// GetPrimaryAccountHolderBusiness returns the PrimaryAccountHolderBusiness field value if set, zero value otherwise.
func (o *BaseStatementAllOf) GetPrimaryAccountHolderBusiness() Business1 {
	if o == nil || o.PrimaryAccountHolderBusiness == nil {
		var ret Business1
		return ret
	}
	return *o.PrimaryAccountHolderBusiness
}

// GetPrimaryAccountHolderBusinessOk returns a tuple with the PrimaryAccountHolderBusiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatementAllOf) GetPrimaryAccountHolderBusinessOk() (*Business1, bool) {
	if o == nil || o.PrimaryAccountHolderBusiness == nil {
		return nil, false
	}
	return o.PrimaryAccountHolderBusiness, true
}

// HasPrimaryAccountHolderBusiness returns a boolean if a field has been set.
func (o *BaseStatementAllOf) HasPrimaryAccountHolderBusiness() bool {
	if o != nil && o.PrimaryAccountHolderBusiness != nil {
		return true
	}

	return false
}

// SetPrimaryAccountHolderBusiness gets a reference to the given Business1 and assigns it to the PrimaryAccountHolderBusiness field.
func (o *BaseStatementAllOf) SetPrimaryAccountHolderBusiness(v Business1) {
	o.PrimaryAccountHolderBusiness = &v
}

// GetPrimaryAccountHolderPersonal returns the PrimaryAccountHolderPersonal field value if set, zero value otherwise.
func (o *BaseStatementAllOf) GetPrimaryAccountHolderPersonal() Person1 {
	if o == nil || o.PrimaryAccountHolderPersonal == nil {
		var ret Person1
		return ret
	}
	return *o.PrimaryAccountHolderPersonal
}

// GetPrimaryAccountHolderPersonalOk returns a tuple with the PrimaryAccountHolderPersonal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatementAllOf) GetPrimaryAccountHolderPersonalOk() (*Person1, bool) {
	if o == nil || o.PrimaryAccountHolderPersonal == nil {
		return nil, false
	}
	return o.PrimaryAccountHolderPersonal, true
}

// HasPrimaryAccountHolderPersonal returns a boolean if a field has been set.
func (o *BaseStatementAllOf) HasPrimaryAccountHolderPersonal() bool {
	if o != nil && o.PrimaryAccountHolderPersonal != nil {
		return true
	}

	return false
}

// SetPrimaryAccountHolderPersonal gets a reference to the given Person1 and assigns it to the PrimaryAccountHolderPersonal field.
func (o *BaseStatementAllOf) SetPrimaryAccountHolderPersonal(v Person1) {
	o.PrimaryAccountHolderPersonal = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *BaseStatementAllOf) GetTransactions() []Transaction {
	if o == nil || o.Transactions == nil {
		var ret []Transaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatementAllOf) GetTransactionsOk() ([]Transaction, bool) {
	if o == nil || o.Transactions == nil {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *BaseStatementAllOf) HasTransactions() bool {
	if o != nil && o.Transactions != nil {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []Transaction and assigns it to the Transactions field.
func (o *BaseStatementAllOf) SetTransactions(v []Transaction) {
	o.Transactions = v
}

func (o BaseStatementAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountSummary != nil {
		toSerialize["account_summary"] = o.AccountSummary
	}
	if o.AuthorizedSigner != nil {
		toSerialize["authorized_signer"] = o.AuthorizedSigner
	}
	if o.Disclosure != nil {
		toSerialize["disclosure"] = o.Disclosure
	}
	if o.JointAccountHolders != nil {
		toSerialize["joint_account_holders"] = o.JointAccountHolders
	}
	if o.PrimaryAccountHolderBusiness != nil {
		toSerialize["primary_account_holder_business"] = o.PrimaryAccountHolderBusiness
	}
	if o.PrimaryAccountHolderPersonal != nil {
		toSerialize["primary_account_holder_personal"] = o.PrimaryAccountHolderPersonal
	}
	if o.Transactions != nil {
		toSerialize["transactions"] = o.Transactions
	}
	return json.Marshal(toSerialize)
}

type NullableBaseStatementAllOf struct {
	value *BaseStatementAllOf
	isSet bool
}

func (v NullableBaseStatementAllOf) Get() *BaseStatementAllOf {
	return v.value
}

func (v *NullableBaseStatementAllOf) Set(val *BaseStatementAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseStatementAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseStatementAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseStatementAllOf(val *BaseStatementAllOf) *NullableBaseStatementAllOf {
	return &NullableBaseStatementAllOf{value: val, isSet: true}
}

func (v NullableBaseStatementAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseStatementAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
