/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// Processor The transaction processor
type Processor string

// List of processor
const (
	PROCESSOR_VISA_V1       Processor = "VISA_V1"
	PROCESSOR_MASTERCARD_V1 Processor = "MASTERCARD_V1"
)

// All allowed values of Processor enum
var AllowedProcessorEnumValues = []Processor{
	"VISA_V1",
	"MASTERCARD_V1",
}

func (v *Processor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Processor(value)
	for _, existing := range AllowedProcessorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Processor", value)
}

// NewProcessorFromValue returns a pointer to a valid Processor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProcessorFromValue(v string) (*Processor, error) {
	ev := Processor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Processor: valid values are %v", v, AllowedProcessorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Processor) IsValid() bool {
	for _, existing := range AllowedProcessorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to processor value
func (v Processor) Ptr() *Processor {
	return &v
}

type NullableProcessor struct {
	value *Processor
	isSet bool
}

func (v NullableProcessor) Get() *Processor {
	return v.value
}

func (v *NullableProcessor) Set(val *Processor) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessor) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessor(val *Processor) *NullableProcessor {
	return &NullableProcessor{value: val, isSet: true}
}

func (v NullableProcessor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
