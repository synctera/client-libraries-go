/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// RateDetails struct for RateDetails
type RateDetails struct {
	AccrualPeriod string `json:"accrual_period"`
	// Rate in basis points. E.g. 5 represents 0.05%
	Rate int32 `json:"rate"`
	// Rate effective start date. Inclusive.
	ValidFrom string `json:"valid_from"`
	// Rate effective end date. Exclusive.
	ValidTo *string `json:"valid_to,omitempty"`
}

// NewRateDetails instantiates a new RateDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateDetails(accrualPeriod string, rate int32, validFrom string) *RateDetails {
	this := RateDetails{}
	this.AccrualPeriod = accrualPeriod
	this.Rate = rate
	this.ValidFrom = validFrom
	return &this
}

// NewRateDetailsWithDefaults instantiates a new RateDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateDetailsWithDefaults() *RateDetails {
	this := RateDetails{}
	return &this
}

// GetAccrualPeriod returns the AccrualPeriod field value
func (o *RateDetails) GetAccrualPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccrualPeriod
}

// GetAccrualPeriodOk returns a tuple with the AccrualPeriod field value
// and a boolean to check if the value has been set.
func (o *RateDetails) GetAccrualPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccrualPeriod, true
}

// SetAccrualPeriod sets field value
func (o *RateDetails) SetAccrualPeriod(v string) {
	o.AccrualPeriod = v
}

// GetRate returns the Rate field value
func (o *RateDetails) GetRate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *RateDetails) GetRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *RateDetails) SetRate(v int32) {
	o.Rate = v
}

// GetValidFrom returns the ValidFrom field value
func (o *RateDetails) GetValidFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value
// and a boolean to check if the value has been set.
func (o *RateDetails) GetValidFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidFrom, true
}

// SetValidFrom sets field value
func (o *RateDetails) SetValidFrom(v string) {
	o.ValidFrom = v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *RateDetails) GetValidTo() string {
	if o == nil || o.ValidTo == nil {
		var ret string
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateDetails) GetValidToOk() (*string, bool) {
	if o == nil || o.ValidTo == nil {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *RateDetails) HasValidTo() bool {
	if o != nil && o.ValidTo != nil {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given string and assigns it to the ValidTo field.
func (o *RateDetails) SetValidTo(v string) {
	o.ValidTo = &v
}

func (o RateDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accrual_period"] = o.AccrualPeriod
	}
	if true {
		toSerialize["rate"] = o.Rate
	}
	if true {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if o.ValidTo != nil {
		toSerialize["valid_to"] = o.ValidTo
	}
	return json.Marshal(toSerialize)
}

type NullableRateDetails struct {
	value *RateDetails
	isSet bool
}

func (v NullableRateDetails) Get() *RateDetails {
	return v.value
}

func (v *NullableRateDetails) Set(val *RateDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRateDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRateDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateDetails(val *RateDetails) *NullableRateDetails {
	return &NullableRateDetails{value: val, isSet: true}
}

func (v NullableRateDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
