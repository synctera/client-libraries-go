/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// VerificationType1 The verification run on the customer. One the following:   * `IDENTITY` – verify that the information provided is associated with the identity of a real person or business.   * `WATCHLIST` – checks watchlists for known fraud, money laundering, and other suspicious activity.   * `RELATED_ENTITIES` – represents dependent verification checks for related parties (e.g. all beneficial owners must pass KYC for a business to pass KYB).   * `MANUAL_REVIEW` – represents the outcome of a manual review of the verification done on a party (note: overrides the outcome of other verification types).
type VerificationType1 string

// List of verification_type1
const (
	VERIFICATIONTYPE1_IDENTITY         VerificationType1 = "IDENTITY"
	VERIFICATIONTYPE1_WATCHLIST        VerificationType1 = "WATCHLIST"
	VERIFICATIONTYPE1_RELATED_ENTITIES VerificationType1 = "RELATED_ENTITIES"
	VERIFICATIONTYPE1_MANUAL_REVIEW    VerificationType1 = "MANUAL_REVIEW"
)

// All allowed values of VerificationType1 enum
var AllowedVerificationType1EnumValues = []VerificationType1{
	"IDENTITY",
	"WATCHLIST",
	"RELATED_ENTITIES",
	"MANUAL_REVIEW",
}

func (v *VerificationType1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationType1(value)
	for _, existing := range AllowedVerificationType1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationType1", value)
}

// NewVerificationType1FromValue returns a pointer to a valid VerificationType1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerificationType1FromValue(v string) (*VerificationType1, error) {
	ev := VerificationType1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerificationType1: valid values are %v", v, AllowedVerificationType1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerificationType1) IsValid() bool {
	for _, existing := range AllowedVerificationType1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to verification_type1 value
func (v VerificationType1) Ptr() *VerificationType1 {
	return &v
}

type NullableVerificationType1 struct {
	value *VerificationType1
	isSet bool
}

func (v NullableVerificationType1) Get() *VerificationType1 {
	return v.value
}

func (v *NullableVerificationType1) Set(val *VerificationType1) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationType1) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationType1(val *VerificationType1) *NullableVerificationType1 {
	return &NullableVerificationType1{value: val, isSet: true}
}

func (v NullableVerificationType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
