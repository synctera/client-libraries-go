/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// RelatedResourceType Related resource type
type RelatedResourceType string

// List of related_resource_type
const (
	RELATEDRESOURCETYPE_CUSTOMER RelatedResourceType = "CUSTOMER"
	RELATEDRESOURCETYPE_BUSINESS RelatedResourceType = "BUSINESS"
)

// All allowed values of RelatedResourceType enum
var AllowedRelatedResourceTypeEnumValues = []RelatedResourceType{
	"CUSTOMER",
	"BUSINESS",
}

func (v *RelatedResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelatedResourceType(value)
	for _, existing := range AllowedRelatedResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelatedResourceType", value)
}

// NewRelatedResourceTypeFromValue returns a pointer to a valid RelatedResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRelatedResourceTypeFromValue(v string) (*RelatedResourceType, error) {
	ev := RelatedResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelatedResourceType: valid values are %v", v, AllowedRelatedResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RelatedResourceType) IsValid() bool {
	for _, existing := range AllowedRelatedResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to related_resource_type value
func (v RelatedResourceType) Ptr() *RelatedResourceType {
	return &v
}

type NullableRelatedResourceType struct {
	value *RelatedResourceType
	isSet bool
}

func (v NullableRelatedResourceType) Get() *RelatedResourceType {
	return v.value
}

func (v *NullableRelatedResourceType) Set(val *RelatedResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedResourceType(val *RelatedResourceType) *NullableRelatedResourceType {
	return &NullableRelatedResourceType{value: val, isSet: true}
}

func (v NullableRelatedResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

