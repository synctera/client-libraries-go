/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// CreateGatewayRequest struct for CreateGatewayRequest
type CreateGatewayRequest struct {
	// Current status of the Authorization gateway
	Active *bool `json:"active,omitempty"`
	// List of Card Product unique identifiers that will utilize the Gateway
	CardProducts []string `json:"card_products"`
	// Custom Headers of the Authorization gateway
	CustomHeaders *map[string]string `json:"custom_headers,omitempty"`
	// URL of the Authorization gateway
	Url string `json:"url"`
}

// NewCreateGatewayRequest instantiates a new CreateGatewayRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGatewayRequest(cardProducts []string, url string) *CreateGatewayRequest {
	this := CreateGatewayRequest{}
	var active bool = true
	this.Active = &active
	this.CardProducts = cardProducts
	this.Url = url
	return &this
}

// NewCreateGatewayRequestWithDefaults instantiates a new CreateGatewayRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGatewayRequestWithDefaults() *CreateGatewayRequest {
	this := CreateGatewayRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateGatewayRequest) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateGatewayRequest) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CreateGatewayRequest) SetActive(v bool) {
	o.Active = &v
}

// GetCardProducts returns the CardProducts field value
func (o *CreateGatewayRequest) GetCardProducts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CardProducts
}

// GetCardProductsOk returns a tuple with the CardProducts field value
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetCardProductsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardProducts, true
}

// SetCardProducts sets field value
func (o *CreateGatewayRequest) SetCardProducts(v []string) {
	o.CardProducts = v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *CreateGatewayRequest) GetCustomHeaders() map[string]string {
	if o == nil || o.CustomHeaders == nil {
		var ret map[string]string
		return ret
	}
	return *o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetCustomHeadersOk() (*map[string]string, bool) {
	if o == nil || o.CustomHeaders == nil {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *CreateGatewayRequest) HasCustomHeaders() bool {
	if o != nil && o.CustomHeaders != nil {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given map[string]string and assigns it to the CustomHeaders field.
func (o *CreateGatewayRequest) SetCustomHeaders(v map[string]string) {
	o.CustomHeaders = &v
}

// GetUrl returns the Url field value
func (o *CreateGatewayRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateGatewayRequest) SetUrl(v string) {
	o.Url = v
}

func (o CreateGatewayRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["card_products"] = o.CardProducts
	}
	if o.CustomHeaders != nil {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableCreateGatewayRequest struct {
	value *CreateGatewayRequest
	isSet bool
}

func (v NullableCreateGatewayRequest) Get() *CreateGatewayRequest {
	return v.value
}

func (v *NullableCreateGatewayRequest) Set(val *CreateGatewayRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGatewayRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGatewayRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGatewayRequest(val *CreateGatewayRequest) *NullableCreateGatewayRequest {
	return &NullableCreateGatewayRequest{value: val, isSet: true}
}

func (v NullableCreateGatewayRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGatewayRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


