/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// ExternalAccountBalance struct for ExternalAccountBalance
type ExternalAccountBalance struct {
	// The available balance of the account
	Available NullableInt64 `json:"available,omitempty"`
	// ISO 4217 alphabetic currency code
	Currency string `json:"currency"`
	// The current balance of the account
	Current NullableInt64 `json:"current,omitempty"`
	// The limit on the balance amount
	Limit NullableInt64 `json:"limit,omitempty"`
}

// NewExternalAccountBalance instantiates a new ExternalAccountBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalAccountBalance(currency string) *ExternalAccountBalance {
	this := ExternalAccountBalance{}
	this.Currency = currency
	return &this
}

// NewExternalAccountBalanceWithDefaults instantiates a new ExternalAccountBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalAccountBalanceWithDefaults() *ExternalAccountBalance {
	this := ExternalAccountBalance{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalAccountBalance) GetAvailable() int64 {
	if o == nil || o.Available.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Available.Get()
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalAccountBalance) GetAvailableOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Available.Get(), o.Available.IsSet()
}

// HasAvailable returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasAvailable() bool {
	if o != nil && o.Available.IsSet() {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given NullableInt64 and assigns it to the Available field.
func (o *ExternalAccountBalance) SetAvailable(v int64) {
	o.Available.Set(&v)
}

// SetAvailableNil sets the value for Available to be an explicit nil
func (o *ExternalAccountBalance) SetAvailableNil() {
	o.Available.Set(nil)
}

// UnsetAvailable ensures that no value is present for Available, not even an explicit nil
func (o *ExternalAccountBalance) UnsetAvailable() {
	o.Available.Unset()
}

// GetCurrency returns the Currency field value
func (o *ExternalAccountBalance) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ExternalAccountBalance) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ExternalAccountBalance) SetCurrency(v string) {
	o.Currency = v
}

// GetCurrent returns the Current field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalAccountBalance) GetCurrent() int64 {
	if o == nil || o.Current.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Current.Get()
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalAccountBalance) GetCurrentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Current.Get(), o.Current.IsSet()
}

// HasCurrent returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasCurrent() bool {
	if o != nil && o.Current.IsSet() {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given NullableInt64 and assigns it to the Current field.
func (o *ExternalAccountBalance) SetCurrent(v int64) {
	o.Current.Set(&v)
}

// SetCurrentNil sets the value for Current to be an explicit nil
func (o *ExternalAccountBalance) SetCurrentNil() {
	o.Current.Set(nil)
}

// UnsetCurrent ensures that no value is present for Current, not even an explicit nil
func (o *ExternalAccountBalance) UnsetCurrent() {
	o.Current.Unset()
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalAccountBalance) GetLimit() int64 {
	if o == nil || o.Limit.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalAccountBalance) GetLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt64 and assigns it to the Limit field.
func (o *ExternalAccountBalance) SetLimit(v int64) {
	o.Limit.Set(&v)
}

// SetLimitNil sets the value for Limit to be an explicit nil
func (o *ExternalAccountBalance) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *ExternalAccountBalance) UnsetLimit() {
	o.Limit.Unset()
}

func (o ExternalAccountBalance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Available.IsSet() {
		toSerialize["available"] = o.Available.Get()
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.Current.IsSet() {
		toSerialize["current"] = o.Current.Get()
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExternalAccountBalance struct {
	value *ExternalAccountBalance
	isSet bool
}

func (v NullableExternalAccountBalance) Get() *ExternalAccountBalance {
	return v.value
}

func (v *NullableExternalAccountBalance) Set(val *ExternalAccountBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalAccountBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalAccountBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalAccountBalance(val *ExternalAccountBalance) *NullableExternalAccountBalance {
	return &NullableExternalAccountBalance{value: val, isSet: true}
}

func (v NullableExternalAccountBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalAccountBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
