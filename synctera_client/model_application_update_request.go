/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// ApplicationUpdateRequest struct for ApplicationUpdateRequest
type ApplicationUpdateRequest struct {
	// To enable or disable aft/oct feature
	Enabled   *bool      `json:"enabled,omitempty"`
	Processor *Processor `json:"processor,omitempty"`
}

// NewApplicationUpdateRequest instantiates a new ApplicationUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationUpdateRequest() *ApplicationUpdateRequest {
	this := ApplicationUpdateRequest{}
	return &this
}

// NewApplicationUpdateRequestWithDefaults instantiates a new ApplicationUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationUpdateRequestWithDefaults() *ApplicationUpdateRequest {
	this := ApplicationUpdateRequest{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApplicationUpdateRequest) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUpdateRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApplicationUpdateRequest) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApplicationUpdateRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetProcessor returns the Processor field value if set, zero value otherwise.
func (o *ApplicationUpdateRequest) GetProcessor() Processor {
	if o == nil || o.Processor == nil {
		var ret Processor
		return ret
	}
	return *o.Processor
}

// GetProcessorOk returns a tuple with the Processor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUpdateRequest) GetProcessorOk() (*Processor, bool) {
	if o == nil || o.Processor == nil {
		return nil, false
	}
	return o.Processor, true
}

// HasProcessor returns a boolean if a field has been set.
func (o *ApplicationUpdateRequest) HasProcessor() bool {
	if o != nil && o.Processor != nil {
		return true
	}

	return false
}

// SetProcessor gets a reference to the given Processor and assigns it to the Processor field.
func (o *ApplicationUpdateRequest) SetProcessor(v Processor) {
	o.Processor = &v
}

func (o ApplicationUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Processor != nil {
		toSerialize["processor"] = o.Processor
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationUpdateRequest struct {
	value *ApplicationUpdateRequest
	isSet bool
}

func (v NullableApplicationUpdateRequest) Get() *ApplicationUpdateRequest {
	return v.value
}

func (v *NullableApplicationUpdateRequest) Set(val *ApplicationUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationUpdateRequest(val *ApplicationUpdateRequest) *NullableApplicationUpdateRequest {
	return &NullableApplicationUpdateRequest{value: val, isSet: true}
}

func (v NullableApplicationUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
