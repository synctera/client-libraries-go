/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// ExtAccountCustomerType The type of customer in the external financial institution. _Not_ necessarily the customer type on Synctera's platform: a business customer might link to the owner's personal account at an external financial institution.
type ExtAccountCustomerType string

// List of ext_account_customer_type
const (
	EXTACCOUNTCUSTOMERTYPE_PERSONAL ExtAccountCustomerType = "PERSONAL"
	EXTACCOUNTCUSTOMERTYPE_BUSINESS ExtAccountCustomerType = "BUSINESS"
)

// All allowed values of ExtAccountCustomerType enum
var AllowedExtAccountCustomerTypeEnumValues = []ExtAccountCustomerType{
	"PERSONAL",
	"BUSINESS",
}

func (v *ExtAccountCustomerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtAccountCustomerType(value)
	for _, existing := range AllowedExtAccountCustomerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtAccountCustomerType", value)
}

// NewExtAccountCustomerTypeFromValue returns a pointer to a valid ExtAccountCustomerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtAccountCustomerTypeFromValue(v string) (*ExtAccountCustomerType, error) {
	ev := ExtAccountCustomerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtAccountCustomerType: valid values are %v", v, AllowedExtAccountCustomerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtAccountCustomerType) IsValid() bool {
	for _, existing := range AllowedExtAccountCustomerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ext_account_customer_type value
func (v ExtAccountCustomerType) Ptr() *ExtAccountCustomerType {
	return &v
}

type NullableExtAccountCustomerType struct {
	value *ExtAccountCustomerType
	isSet bool
}

func (v NullableExtAccountCustomerType) Get() *ExtAccountCustomerType {
	return v.value
}

func (v *NullableExtAccountCustomerType) Set(val *ExtAccountCustomerType) {
	v.value = val
	v.isSet = true
}

func (v NullableExtAccountCustomerType) IsSet() bool {
	return v.isSet
}

func (v *NullableExtAccountCustomerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtAccountCustomerType(val *ExtAccountCustomerType) *NullableExtAccountCustomerType {
	return &NullableExtAccountCustomerType{value: val, isSet: true}
}

func (v NullableExtAccountCustomerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtAccountCustomerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
