/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// TransactionReverseRequest struct for TransactionReverseRequest
type TransactionReverseRequest struct {
	// The description of the transaction
	Description *string `json:"description,omitempty"`
	// Whether or not the hold was forced (spending controls ignored)
	ForcePost bool `json:"force_post"`
	// The description of the offset transaction
	OffsetDescription *string `json:"offset_description,omitempty"`
	// The reason for the reversal
	Reason string `json:"reason"`
	// An external ID provided by the payment network to represent this transaction. This will always be null for internal transfers.
	ReferenceId NullableString `json:"reference_id"`
	// An unstructured JSON blob representing additional transaction information specific to each payment rail.
	UserData map[string]interface{} `json:"user_data"`
}

// NewTransactionReverseRequest instantiates a new TransactionReverseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionReverseRequest(forcePost bool, reason string, referenceId NullableString, userData map[string]interface{}) *TransactionReverseRequest {
	this := TransactionReverseRequest{}
	this.ForcePost = forcePost
	this.Reason = reason
	this.ReferenceId = referenceId
	this.UserData = userData
	return &this
}

// NewTransactionReverseRequestWithDefaults instantiates a new TransactionReverseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionReverseRequestWithDefaults() *TransactionReverseRequest {
	this := TransactionReverseRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransactionReverseRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReverseRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransactionReverseRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransactionReverseRequest) SetDescription(v string) {
	o.Description = &v
}

// GetForcePost returns the ForcePost field value
func (o *TransactionReverseRequest) GetForcePost() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ForcePost
}

// GetForcePostOk returns a tuple with the ForcePost field value
// and a boolean to check if the value has been set.
func (o *TransactionReverseRequest) GetForcePostOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForcePost, true
}

// SetForcePost sets field value
func (o *TransactionReverseRequest) SetForcePost(v bool) {
	o.ForcePost = v
}

// GetOffsetDescription returns the OffsetDescription field value if set, zero value otherwise.
func (o *TransactionReverseRequest) GetOffsetDescription() string {
	if o == nil || o.OffsetDescription == nil {
		var ret string
		return ret
	}
	return *o.OffsetDescription
}

// GetOffsetDescriptionOk returns a tuple with the OffsetDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReverseRequest) GetOffsetDescriptionOk() (*string, bool) {
	if o == nil || o.OffsetDescription == nil {
		return nil, false
	}
	return o.OffsetDescription, true
}

// HasOffsetDescription returns a boolean if a field has been set.
func (o *TransactionReverseRequest) HasOffsetDescription() bool {
	if o != nil && o.OffsetDescription != nil {
		return true
	}

	return false
}

// SetOffsetDescription gets a reference to the given string and assigns it to the OffsetDescription field.
func (o *TransactionReverseRequest) SetOffsetDescription(v string) {
	o.OffsetDescription = &v
}

// GetReason returns the Reason field value
func (o *TransactionReverseRequest) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *TransactionReverseRequest) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *TransactionReverseRequest) SetReason(v string) {
	o.Reason = v
}

// GetReferenceId returns the ReferenceId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TransactionReverseRequest) GetReferenceId() string {
	if o == nil || o.ReferenceId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ReferenceId.Get()
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionReverseRequest) GetReferenceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferenceId.Get(), o.ReferenceId.IsSet()
}

// SetReferenceId sets field value
func (o *TransactionReverseRequest) SetReferenceId(v string) {
	o.ReferenceId.Set(&v)
}

// GetUserData returns the UserData field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *TransactionReverseRequest) GetUserData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionReverseRequest) GetUserDataOk() (map[string]interface{}, bool) {
	if o == nil || o.UserData == nil {
		return nil, false
	}
	return o.UserData, true
}

// SetUserData sets field value
func (o *TransactionReverseRequest) SetUserData(v map[string]interface{}) {
	o.UserData = v
}

func (o TransactionReverseRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["force_post"] = o.ForcePost
	}
	if o.OffsetDescription != nil {
		toSerialize["offset_description"] = o.OffsetDescription
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["reference_id"] = o.ReferenceId.Get()
	}
	if o.UserData != nil {
		toSerialize["user_data"] = o.UserData
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionReverseRequest struct {
	value *TransactionReverseRequest
	isSet bool
}

func (v NullableTransactionReverseRequest) Get() *TransactionReverseRequest {
	return v.value
}

func (v *NullableTransactionReverseRequest) Set(val *TransactionReverseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionReverseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionReverseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionReverseRequest(val *TransactionReverseRequest) *NullableTransactionReverseRequest {
	return &NullableTransactionReverseRequest{value: val, isSet: true}
}

func (v NullableTransactionReverseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionReverseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
