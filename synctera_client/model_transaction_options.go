/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// TransactionOptions struct for TransactionOptions
type TransactionOptions struct {
	AdditionalData                     *string `json:"additional_data,omitempty"`
	CardExpirationDateYymm             *string `json:"card_expiration_date_yymm,omitempty"`
	DatabaseTransactionTimeout         *int32  `json:"database_transaction_timeout,omitempty"`
	EncryptionKeyId                    *string `json:"encryption_key_id,omitempty"`
	IsAsync                            *bool   `json:"is_async,omitempty"`
	PreAuthTimeLimit                   *string `json:"pre_auth_time_limit,omitempty"`
	SendExpirationDate                 *bool   `json:"send_expiration_date,omitempty"`
	SendTrackData                      *bool   `json:"send_track_data,omitempty"`
	TransactionId                      *string `json:"transaction_id,omitempty"`
	TransactionTimeoutThresholdSeconds *int64  `json:"transaction_timeout_threshold_seconds,omitempty"`
}

// NewTransactionOptions instantiates a new TransactionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionOptions() *TransactionOptions {
	this := TransactionOptions{}
	var isAsync bool = false
	this.IsAsync = &isAsync
	var sendExpirationDate bool = false
	this.SendExpirationDate = &sendExpirationDate
	var sendTrackData bool = false
	this.SendTrackData = &sendTrackData
	return &this
}

// NewTransactionOptionsWithDefaults instantiates a new TransactionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionOptionsWithDefaults() *TransactionOptions {
	this := TransactionOptions{}
	var isAsync bool = false
	this.IsAsync = &isAsync
	var sendExpirationDate bool = false
	this.SendExpirationDate = &sendExpirationDate
	var sendTrackData bool = false
	this.SendTrackData = &sendTrackData
	return &this
}

// GetAdditionalData returns the AdditionalData field value if set, zero value otherwise.
func (o *TransactionOptions) GetAdditionalData() string {
	if o == nil || o.AdditionalData == nil {
		var ret string
		return ret
	}
	return *o.AdditionalData
}

// GetAdditionalDataOk returns a tuple with the AdditionalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetAdditionalDataOk() (*string, bool) {
	if o == nil || o.AdditionalData == nil {
		return nil, false
	}
	return o.AdditionalData, true
}

// HasAdditionalData returns a boolean if a field has been set.
func (o *TransactionOptions) HasAdditionalData() bool {
	if o != nil && o.AdditionalData != nil {
		return true
	}

	return false
}

// SetAdditionalData gets a reference to the given string and assigns it to the AdditionalData field.
func (o *TransactionOptions) SetAdditionalData(v string) {
	o.AdditionalData = &v
}

// GetCardExpirationDateYymm returns the CardExpirationDateYymm field value if set, zero value otherwise.
func (o *TransactionOptions) GetCardExpirationDateYymm() string {
	if o == nil || o.CardExpirationDateYymm == nil {
		var ret string
		return ret
	}
	return *o.CardExpirationDateYymm
}

// GetCardExpirationDateYymmOk returns a tuple with the CardExpirationDateYymm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetCardExpirationDateYymmOk() (*string, bool) {
	if o == nil || o.CardExpirationDateYymm == nil {
		return nil, false
	}
	return o.CardExpirationDateYymm, true
}

// HasCardExpirationDateYymm returns a boolean if a field has been set.
func (o *TransactionOptions) HasCardExpirationDateYymm() bool {
	if o != nil && o.CardExpirationDateYymm != nil {
		return true
	}

	return false
}

// SetCardExpirationDateYymm gets a reference to the given string and assigns it to the CardExpirationDateYymm field.
func (o *TransactionOptions) SetCardExpirationDateYymm(v string) {
	o.CardExpirationDateYymm = &v
}

// GetDatabaseTransactionTimeout returns the DatabaseTransactionTimeout field value if set, zero value otherwise.
func (o *TransactionOptions) GetDatabaseTransactionTimeout() int32 {
	if o == nil || o.DatabaseTransactionTimeout == nil {
		var ret int32
		return ret
	}
	return *o.DatabaseTransactionTimeout
}

// GetDatabaseTransactionTimeoutOk returns a tuple with the DatabaseTransactionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetDatabaseTransactionTimeoutOk() (*int32, bool) {
	if o == nil || o.DatabaseTransactionTimeout == nil {
		return nil, false
	}
	return o.DatabaseTransactionTimeout, true
}

// HasDatabaseTransactionTimeout returns a boolean if a field has been set.
func (o *TransactionOptions) HasDatabaseTransactionTimeout() bool {
	if o != nil && o.DatabaseTransactionTimeout != nil {
		return true
	}

	return false
}

// SetDatabaseTransactionTimeout gets a reference to the given int32 and assigns it to the DatabaseTransactionTimeout field.
func (o *TransactionOptions) SetDatabaseTransactionTimeout(v int32) {
	o.DatabaseTransactionTimeout = &v
}

// GetEncryptionKeyId returns the EncryptionKeyId field value if set, zero value otherwise.
func (o *TransactionOptions) GetEncryptionKeyId() string {
	if o == nil || o.EncryptionKeyId == nil {
		var ret string
		return ret
	}
	return *o.EncryptionKeyId
}

// GetEncryptionKeyIdOk returns a tuple with the EncryptionKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetEncryptionKeyIdOk() (*string, bool) {
	if o == nil || o.EncryptionKeyId == nil {
		return nil, false
	}
	return o.EncryptionKeyId, true
}

// HasEncryptionKeyId returns a boolean if a field has been set.
func (o *TransactionOptions) HasEncryptionKeyId() bool {
	if o != nil && o.EncryptionKeyId != nil {
		return true
	}

	return false
}

// SetEncryptionKeyId gets a reference to the given string and assigns it to the EncryptionKeyId field.
func (o *TransactionOptions) SetEncryptionKeyId(v string) {
	o.EncryptionKeyId = &v
}

// GetIsAsync returns the IsAsync field value if set, zero value otherwise.
func (o *TransactionOptions) GetIsAsync() bool {
	if o == nil || o.IsAsync == nil {
		var ret bool
		return ret
	}
	return *o.IsAsync
}

// GetIsAsyncOk returns a tuple with the IsAsync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetIsAsyncOk() (*bool, bool) {
	if o == nil || o.IsAsync == nil {
		return nil, false
	}
	return o.IsAsync, true
}

// HasIsAsync returns a boolean if a field has been set.
func (o *TransactionOptions) HasIsAsync() bool {
	if o != nil && o.IsAsync != nil {
		return true
	}

	return false
}

// SetIsAsync gets a reference to the given bool and assigns it to the IsAsync field.
func (o *TransactionOptions) SetIsAsync(v bool) {
	o.IsAsync = &v
}

// GetPreAuthTimeLimit returns the PreAuthTimeLimit field value if set, zero value otherwise.
func (o *TransactionOptions) GetPreAuthTimeLimit() string {
	if o == nil || o.PreAuthTimeLimit == nil {
		var ret string
		return ret
	}
	return *o.PreAuthTimeLimit
}

// GetPreAuthTimeLimitOk returns a tuple with the PreAuthTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetPreAuthTimeLimitOk() (*string, bool) {
	if o == nil || o.PreAuthTimeLimit == nil {
		return nil, false
	}
	return o.PreAuthTimeLimit, true
}

// HasPreAuthTimeLimit returns a boolean if a field has been set.
func (o *TransactionOptions) HasPreAuthTimeLimit() bool {
	if o != nil && o.PreAuthTimeLimit != nil {
		return true
	}

	return false
}

// SetPreAuthTimeLimit gets a reference to the given string and assigns it to the PreAuthTimeLimit field.
func (o *TransactionOptions) SetPreAuthTimeLimit(v string) {
	o.PreAuthTimeLimit = &v
}

// GetSendExpirationDate returns the SendExpirationDate field value if set, zero value otherwise.
func (o *TransactionOptions) GetSendExpirationDate() bool {
	if o == nil || o.SendExpirationDate == nil {
		var ret bool
		return ret
	}
	return *o.SendExpirationDate
}

// GetSendExpirationDateOk returns a tuple with the SendExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetSendExpirationDateOk() (*bool, bool) {
	if o == nil || o.SendExpirationDate == nil {
		return nil, false
	}
	return o.SendExpirationDate, true
}

// HasSendExpirationDate returns a boolean if a field has been set.
func (o *TransactionOptions) HasSendExpirationDate() bool {
	if o != nil && o.SendExpirationDate != nil {
		return true
	}

	return false
}

// SetSendExpirationDate gets a reference to the given bool and assigns it to the SendExpirationDate field.
func (o *TransactionOptions) SetSendExpirationDate(v bool) {
	o.SendExpirationDate = &v
}

// GetSendTrackData returns the SendTrackData field value if set, zero value otherwise.
func (o *TransactionOptions) GetSendTrackData() bool {
	if o == nil || o.SendTrackData == nil {
		var ret bool
		return ret
	}
	return *o.SendTrackData
}

// GetSendTrackDataOk returns a tuple with the SendTrackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetSendTrackDataOk() (*bool, bool) {
	if o == nil || o.SendTrackData == nil {
		return nil, false
	}
	return o.SendTrackData, true
}

// HasSendTrackData returns a boolean if a field has been set.
func (o *TransactionOptions) HasSendTrackData() bool {
	if o != nil && o.SendTrackData != nil {
		return true
	}

	return false
}

// SetSendTrackData gets a reference to the given bool and assigns it to the SendTrackData field.
func (o *TransactionOptions) SetSendTrackData(v bool) {
	o.SendTrackData = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *TransactionOptions) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *TransactionOptions) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *TransactionOptions) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTransactionTimeoutThresholdSeconds returns the TransactionTimeoutThresholdSeconds field value if set, zero value otherwise.
func (o *TransactionOptions) GetTransactionTimeoutThresholdSeconds() int64 {
	if o == nil || o.TransactionTimeoutThresholdSeconds == nil {
		var ret int64
		return ret
	}
	return *o.TransactionTimeoutThresholdSeconds
}

// GetTransactionTimeoutThresholdSecondsOk returns a tuple with the TransactionTimeoutThresholdSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionOptions) GetTransactionTimeoutThresholdSecondsOk() (*int64, bool) {
	if o == nil || o.TransactionTimeoutThresholdSeconds == nil {
		return nil, false
	}
	return o.TransactionTimeoutThresholdSeconds, true
}

// HasTransactionTimeoutThresholdSeconds returns a boolean if a field has been set.
func (o *TransactionOptions) HasTransactionTimeoutThresholdSeconds() bool {
	if o != nil && o.TransactionTimeoutThresholdSeconds != nil {
		return true
	}

	return false
}

// SetTransactionTimeoutThresholdSeconds gets a reference to the given int64 and assigns it to the TransactionTimeoutThresholdSeconds field.
func (o *TransactionOptions) SetTransactionTimeoutThresholdSeconds(v int64) {
	o.TransactionTimeoutThresholdSeconds = &v
}

func (o TransactionOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalData != nil {
		toSerialize["additional_data"] = o.AdditionalData
	}
	if o.CardExpirationDateYymm != nil {
		toSerialize["card_expiration_date_yymm"] = o.CardExpirationDateYymm
	}
	if o.DatabaseTransactionTimeout != nil {
		toSerialize["database_transaction_timeout"] = o.DatabaseTransactionTimeout
	}
	if o.EncryptionKeyId != nil {
		toSerialize["encryption_key_id"] = o.EncryptionKeyId
	}
	if o.IsAsync != nil {
		toSerialize["is_async"] = o.IsAsync
	}
	if o.PreAuthTimeLimit != nil {
		toSerialize["pre_auth_time_limit"] = o.PreAuthTimeLimit
	}
	if o.SendExpirationDate != nil {
		toSerialize["send_expiration_date"] = o.SendExpirationDate
	}
	if o.SendTrackData != nil {
		toSerialize["send_track_data"] = o.SendTrackData
	}
	if o.TransactionId != nil {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if o.TransactionTimeoutThresholdSeconds != nil {
		toSerialize["transaction_timeout_threshold_seconds"] = o.TransactionTimeoutThresholdSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionOptions struct {
	value *TransactionOptions
	isSet bool
}

func (v NullableTransactionOptions) Get() *TransactionOptions {
	return v.value
}

func (v *NullableTransactionOptions) Set(val *TransactionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionOptions(val *TransactionOptions) *NullableTransactionOptions {
	return &NullableTransactionOptions{value: val, isSet: true}
}

func (v NullableTransactionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
