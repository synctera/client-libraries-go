/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"time"
)

// Document struct for Document
type Document struct {
	// The date and time the resource was created.
	CreationTime *time.Time `json:"creation_time,omitempty"`
	// A description of the attached document.
	Description *string     `json:"description,omitempty"`
	Encryption  *Encryption `json:"encryption,omitempty"`
	// The name of the document.
	FileName *string `json:"file_name,omitempty"`
	// The unique identifier for this resource.
	Id *string `json:"id,omitempty"`
	// The date and time the resource was last update.
	LastUpdatedTime *time.Time `json:"last_updated_time,omitempty"`
	// Optional field to store additional informaton about the resource.  Intended to be used by the integrator to store non-sensitive data.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// A user-friendly name for the document.
	Name *string `json:"name,omitempty"`
	// Related resource ID
	RelatedResourceId   *string              `json:"related_resource_id,omitempty"`
	RelatedResourceType *RelatedResourceType `json:"related_resource_type,omitempty"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument() *Document {
	this := Document{}
	var encryption Encryption = ENCRYPTION_NOT_REQUIRED
	this.Encryption = &encryption
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	var encryption Encryption = ENCRYPTION_NOT_REQUIRED
	this.Encryption = &encryption
	return &this
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *Document) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *Document) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *Document) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Document) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Document) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Document) SetDescription(v string) {
	o.Description = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *Document) GetEncryption() Encryption {
	if o == nil || o.Encryption == nil {
		var ret Encryption
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetEncryptionOk() (*Encryption, bool) {
	if o == nil || o.Encryption == nil {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *Document) HasEncryption() bool {
	if o != nil && o.Encryption != nil {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given Encryption and assigns it to the Encryption field.
func (o *Document) SetEncryption(v Encryption) {
	o.Encryption = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *Document) GetFileName() string {
	if o == nil || o.FileName == nil {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetFileNameOk() (*string, bool) {
	if o == nil || o.FileName == nil {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *Document) HasFileName() bool {
	if o != nil && o.FileName != nil {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *Document) SetFileName(v string) {
	o.FileName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Document) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Document) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Document) SetId(v string) {
	o.Id = &v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value if set, zero value otherwise.
func (o *Document) GetLastUpdatedTime() time.Time {
	if o == nil || o.LastUpdatedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || o.LastUpdatedTime == nil {
		return nil, false
	}
	return o.LastUpdatedTime, true
}

// HasLastUpdatedTime returns a boolean if a field has been set.
func (o *Document) HasLastUpdatedTime() bool {
	if o != nil && o.LastUpdatedTime != nil {
		return true
	}

	return false
}

// SetLastUpdatedTime gets a reference to the given time.Time and assigns it to the LastUpdatedTime field.
func (o *Document) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Document) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Document) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Document) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Document) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Document) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Document) SetName(v string) {
	o.Name = &v
}

// GetRelatedResourceId returns the RelatedResourceId field value if set, zero value otherwise.
func (o *Document) GetRelatedResourceId() string {
	if o == nil || o.RelatedResourceId == nil {
		var ret string
		return ret
	}
	return *o.RelatedResourceId
}

// GetRelatedResourceIdOk returns a tuple with the RelatedResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetRelatedResourceIdOk() (*string, bool) {
	if o == nil || o.RelatedResourceId == nil {
		return nil, false
	}
	return o.RelatedResourceId, true
}

// HasRelatedResourceId returns a boolean if a field has been set.
func (o *Document) HasRelatedResourceId() bool {
	if o != nil && o.RelatedResourceId != nil {
		return true
	}

	return false
}

// SetRelatedResourceId gets a reference to the given string and assigns it to the RelatedResourceId field.
func (o *Document) SetRelatedResourceId(v string) {
	o.RelatedResourceId = &v
}

// GetRelatedResourceType returns the RelatedResourceType field value if set, zero value otherwise.
func (o *Document) GetRelatedResourceType() RelatedResourceType {
	if o == nil || o.RelatedResourceType == nil {
		var ret RelatedResourceType
		return ret
	}
	return *o.RelatedResourceType
}

// GetRelatedResourceTypeOk returns a tuple with the RelatedResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetRelatedResourceTypeOk() (*RelatedResourceType, bool) {
	if o == nil || o.RelatedResourceType == nil {
		return nil, false
	}
	return o.RelatedResourceType, true
}

// HasRelatedResourceType returns a boolean if a field has been set.
func (o *Document) HasRelatedResourceType() bool {
	if o != nil && o.RelatedResourceType != nil {
		return true
	}

	return false
}

// SetRelatedResourceType gets a reference to the given RelatedResourceType and assigns it to the RelatedResourceType field.
func (o *Document) SetRelatedResourceType(v RelatedResourceType) {
	o.RelatedResourceType = &v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreationTime != nil {
		toSerialize["creation_time"] = o.CreationTime
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Encryption != nil {
		toSerialize["encryption"] = o.Encryption
	}
	if o.FileName != nil {
		toSerialize["file_name"] = o.FileName
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdatedTime != nil {
		toSerialize["last_updated_time"] = o.LastUpdatedTime
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RelatedResourceId != nil {
		toSerialize["related_resource_id"] = o.RelatedResourceId
	}
	if o.RelatedResourceType != nil {
		toSerialize["related_resource_type"] = o.RelatedResourceType
	}
	return json.Marshal(toSerialize)
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
