/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"time"
)

// BillingPeriod The scheme for determining an account's billing period. 
type BillingPeriod struct {
	// The frequency of billing cycles. Along with the start date, this will determine the start and end of each cycle. 
	Frequency string `json:"frequency"`
	// The first day of the first billing cycle for this account. For a monthly billing cycle, this would determine the day of the month each billing cycle will start on. 
	StartDate time.Time `json:"start_date"`
}

// NewBillingPeriod instantiates a new BillingPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingPeriod(frequency string, startDate time.Time) *BillingPeriod {
	this := BillingPeriod{}
	this.Frequency = frequency
	this.StartDate = startDate
	return &this
}

// NewBillingPeriodWithDefaults instantiates a new BillingPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingPeriodWithDefaults() *BillingPeriod {
	this := BillingPeriod{}
	return &this
}

// GetFrequency returns the Frequency field value
func (o *BillingPeriod) GetFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *BillingPeriod) GetFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *BillingPeriod) SetFrequency(v string) {
	o.Frequency = v
}

// GetStartDate returns the StartDate field value
func (o *BillingPeriod) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *BillingPeriod) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *BillingPeriod) SetStartDate(v time.Time) {
	o.StartDate = v
}

func (o BillingPeriod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["frequency"] = o.Frequency
	}
	if true {
		toSerialize["start_date"] = o.StartDate
	}
	return json.Marshal(toSerialize)
}

type NullableBillingPeriod struct {
	value *BillingPeriod
	isSet bool
}

func (v NullableBillingPeriod) Get() *BillingPeriod {
	return v.value
}

func (v *NullableBillingPeriod) Set(val *BillingPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPeriod(val *BillingPeriod) *NullableBillingPeriod {
	return &NullableBillingPeriod{value: val, isSet: true}
}

func (v NullableBillingPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


