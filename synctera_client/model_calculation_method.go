/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// CalculationMethod the model 'CalculationMethod'
type CalculationMethod string

// List of calculation_method
const (
	CALCULATIONMETHOD_MONTHLY CalculationMethod = "COMPOUNDED_MONTHLY"
	CALCULATIONMETHOD_DAILY CalculationMethod = "COMPOUNDED_DAILY"
)

// All allowed values of CalculationMethod enum
var AllowedCalculationMethodEnumValues = []CalculationMethod{
	"COMPOUNDED_MONTHLY",
	"COMPOUNDED_DAILY",
}

func (v *CalculationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalculationMethod(value)
	for _, existing := range AllowedCalculationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalculationMethod", value)
}

// NewCalculationMethodFromValue returns a pointer to a valid CalculationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalculationMethodFromValue(v string) (*CalculationMethod, error) {
	ev := CalculationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalculationMethod: valid values are %v", v, AllowedCalculationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalculationMethod) IsValid() bool {
	for _, existing := range AllowedCalculationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to calculation_method value
func (v CalculationMethod) Ptr() *CalculationMethod {
	return &v
}

type NullableCalculationMethod struct {
	value *CalculationMethod
	isSet bool
}

func (v NullableCalculationMethod) Get() *CalculationMethod {
	return v.value
}

func (v *NullableCalculationMethod) Set(val *CalculationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculationMethod(val *CalculationMethod) *NullableCalculationMethod {
	return &NullableCalculationMethod{value: val, isSet: true}
}

func (v NullableCalculationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

