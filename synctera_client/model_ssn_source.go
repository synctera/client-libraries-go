/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// SsnSource Describes the collection method for the customer's SSN: * `MANUAL` – the full 9 digits of the customer's SSN was collected. * `PREFILL` – the customer's SSN was collected using SSN Prefill.
type SsnSource string

// List of ssn_source
const (
	SSNSOURCE_MANUAL  SsnSource = "MANUAL"
	SSNSOURCE_PREFILL SsnSource = "PREFILL"
)

// All allowed values of SsnSource enum
var AllowedSsnSourceEnumValues = []SsnSource{
	"MANUAL",
	"PREFILL",
}

func (v *SsnSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SsnSource(value)
	for _, existing := range AllowedSsnSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SsnSource", value)
}

// NewSsnSourceFromValue returns a pointer to a valid SsnSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSsnSourceFromValue(v string) (*SsnSource, error) {
	ev := SsnSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SsnSource: valid values are %v", v, AllowedSsnSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SsnSource) IsValid() bool {
	for _, existing := range AllowedSsnSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ssn_source value
func (v SsnSource) Ptr() *SsnSource {
	return &v
}

type NullableSsnSource struct {
	value *SsnSource
	isSet bool
}

func (v NullableSsnSource) Get() *SsnSource {
	return v.value
}

func (v *NullableSsnSource) Set(val *SsnSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSsnSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSsnSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsnSource(val *SsnSource) *NullableSsnSource {
	return &NullableSsnSource{value: val, isSet: true}
}

func (v NullableSsnSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsnSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
