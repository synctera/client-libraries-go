/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"time"
)

// AccountToAccountTransferRequest A request to transfer funds from one account to another
type AccountToAccountTransferRequest struct {
	// The amount (in cents) to transfer from originating account to receiving account.
	Amount int64 `json:"amount"`
	// ISO 4217 alphabetic currency code of the transfer amount
	Currency string `json:"currency"`
	// A description of the transaction
	Description *string `json:"description,omitempty"`
	// An alias representing a GL account to credit. This is an alternative to specifying by account id
	DestAccountAlias string `json:"dest_account_alias"`
	// The account number of the account being credited
	DestAccountNo string `json:"dest_account_no"`
	// The date the transaction should be effective
	EffectiveDate time.Time `json:"effective_date"`
	// an unstructured json blob representing additional transaction information supplied by the integrator.
	ExternalData map[string]interface{} `json:"external_data"`
	// A short note to the recipient
	Memo string `json:"memo"`
	// A description of the offsetting transaction
	OffsetDescription *string `json:"offset_description,omitempty"`
	// The date the transaction was posted
	PostedDate *time.Time `json:"posted_date,omitempty"`
	// An alias representing a GL account to debit. This is alternative to specifying by account id
	SourceAccountAlias string `json:"source_account_alias"`
	// The account number of the account being debited
	SourceAccountNo string `json:"source_account_no"`
	// The desired transaction subtype to use for this transfer
	Subtype string `json:"subtype"`
	// The desired transaction type to use for this transfer
	Type string `json:"type"`
	// An unstructured JSON blob representing additional transaction information specific to each payment rail.
	UserData map[string]interface{} `json:"user_data"`
	// The UUID of the transaction
	Uuid string `json:"uuid"`
}

// NewAccountToAccountTransferRequest instantiates a new AccountToAccountTransferRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountToAccountTransferRequest(amount int64, currency string, destAccountAlias string, destAccountNo string, effectiveDate time.Time, externalData map[string]interface{}, memo string, sourceAccountAlias string, sourceAccountNo string, subtype string, type_ string, userData map[string]interface{}, uuid string) *AccountToAccountTransferRequest {
	this := AccountToAccountTransferRequest{}
	this.Amount = amount
	this.Currency = currency
	this.DestAccountAlias = destAccountAlias
	this.DestAccountNo = destAccountNo
	this.EffectiveDate = effectiveDate
	this.ExternalData = externalData
	this.Memo = memo
	this.SourceAccountAlias = sourceAccountAlias
	this.SourceAccountNo = sourceAccountNo
	this.Subtype = subtype
	this.Type = type_
	this.UserData = userData
	this.Uuid = uuid
	return &this
}

// NewAccountToAccountTransferRequestWithDefaults instantiates a new AccountToAccountTransferRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountToAccountTransferRequestWithDefaults() *AccountToAccountTransferRequest {
	this := AccountToAccountTransferRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *AccountToAccountTransferRequest) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AccountToAccountTransferRequest) SetAmount(v int64) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *AccountToAccountTransferRequest) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *AccountToAccountTransferRequest) SetCurrency(v string) {
	o.Currency = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AccountToAccountTransferRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AccountToAccountTransferRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AccountToAccountTransferRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDestAccountAlias returns the DestAccountAlias field value
func (o *AccountToAccountTransferRequest) GetDestAccountAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestAccountAlias
}

// GetDestAccountAliasOk returns a tuple with the DestAccountAlias field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetDestAccountAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestAccountAlias, true
}

// SetDestAccountAlias sets field value
func (o *AccountToAccountTransferRequest) SetDestAccountAlias(v string) {
	o.DestAccountAlias = v
}

// GetDestAccountNo returns the DestAccountNo field value
func (o *AccountToAccountTransferRequest) GetDestAccountNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestAccountNo
}

// GetDestAccountNoOk returns a tuple with the DestAccountNo field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetDestAccountNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestAccountNo, true
}

// SetDestAccountNo sets field value
func (o *AccountToAccountTransferRequest) SetDestAccountNo(v string) {
	o.DestAccountNo = v
}

// GetEffectiveDate returns the EffectiveDate field value
func (o *AccountToAccountTransferRequest) GetEffectiveDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveDate, true
}

// SetEffectiveDate sets field value
func (o *AccountToAccountTransferRequest) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = v
}

// GetExternalData returns the ExternalData field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *AccountToAccountTransferRequest) GetExternalData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ExternalData
}

// GetExternalDataOk returns a tuple with the ExternalData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountToAccountTransferRequest) GetExternalDataOk() (map[string]interface{}, bool) {
	if o == nil || o.ExternalData == nil {
		return nil, false
	}
	return o.ExternalData, true
}

// SetExternalData sets field value
func (o *AccountToAccountTransferRequest) SetExternalData(v map[string]interface{}) {
	o.ExternalData = v
}

// GetMemo returns the Memo field value
func (o *AccountToAccountTransferRequest) GetMemo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memo
}

// GetMemoOk returns a tuple with the Memo field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetMemoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memo, true
}

// SetMemo sets field value
func (o *AccountToAccountTransferRequest) SetMemo(v string) {
	o.Memo = v
}

// GetOffsetDescription returns the OffsetDescription field value if set, zero value otherwise.
func (o *AccountToAccountTransferRequest) GetOffsetDescription() string {
	if o == nil || o.OffsetDescription == nil {
		var ret string
		return ret
	}
	return *o.OffsetDescription
}

// GetOffsetDescriptionOk returns a tuple with the OffsetDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetOffsetDescriptionOk() (*string, bool) {
	if o == nil || o.OffsetDescription == nil {
		return nil, false
	}
	return o.OffsetDescription, true
}

// HasOffsetDescription returns a boolean if a field has been set.
func (o *AccountToAccountTransferRequest) HasOffsetDescription() bool {
	if o != nil && o.OffsetDescription != nil {
		return true
	}

	return false
}

// SetOffsetDescription gets a reference to the given string and assigns it to the OffsetDescription field.
func (o *AccountToAccountTransferRequest) SetOffsetDescription(v string) {
	o.OffsetDescription = &v
}

// GetPostedDate returns the PostedDate field value if set, zero value otherwise.
func (o *AccountToAccountTransferRequest) GetPostedDate() time.Time {
	if o == nil || o.PostedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.PostedDate
}

// GetPostedDateOk returns a tuple with the PostedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetPostedDateOk() (*time.Time, bool) {
	if o == nil || o.PostedDate == nil {
		return nil, false
	}
	return o.PostedDate, true
}

// HasPostedDate returns a boolean if a field has been set.
func (o *AccountToAccountTransferRequest) HasPostedDate() bool {
	if o != nil && o.PostedDate != nil {
		return true
	}

	return false
}

// SetPostedDate gets a reference to the given time.Time and assigns it to the PostedDate field.
func (o *AccountToAccountTransferRequest) SetPostedDate(v time.Time) {
	o.PostedDate = &v
}

// GetSourceAccountAlias returns the SourceAccountAlias field value
func (o *AccountToAccountTransferRequest) GetSourceAccountAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceAccountAlias
}

// GetSourceAccountAliasOk returns a tuple with the SourceAccountAlias field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetSourceAccountAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceAccountAlias, true
}

// SetSourceAccountAlias sets field value
func (o *AccountToAccountTransferRequest) SetSourceAccountAlias(v string) {
	o.SourceAccountAlias = v
}

// GetSourceAccountNo returns the SourceAccountNo field value
func (o *AccountToAccountTransferRequest) GetSourceAccountNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceAccountNo
}

// GetSourceAccountNoOk returns a tuple with the SourceAccountNo field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetSourceAccountNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceAccountNo, true
}

// SetSourceAccountNo sets field value
func (o *AccountToAccountTransferRequest) SetSourceAccountNo(v string) {
	o.SourceAccountNo = v
}

// GetSubtype returns the Subtype field value
func (o *AccountToAccountTransferRequest) GetSubtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetSubtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *AccountToAccountTransferRequest) SetSubtype(v string) {
	o.Subtype = v
}

// GetType returns the Type field value
func (o *AccountToAccountTransferRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccountToAccountTransferRequest) SetType(v string) {
	o.Type = v
}

// GetUserData returns the UserData field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *AccountToAccountTransferRequest) GetUserData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountToAccountTransferRequest) GetUserDataOk() (map[string]interface{}, bool) {
	if o == nil || o.UserData == nil {
		return nil, false
	}
	return o.UserData, true
}

// SetUserData sets field value
func (o *AccountToAccountTransferRequest) SetUserData(v map[string]interface{}) {
	o.UserData = v
}

// GetUuid returns the Uuid field value
func (o *AccountToAccountTransferRequest) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *AccountToAccountTransferRequest) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *AccountToAccountTransferRequest) SetUuid(v string) {
	o.Uuid = v
}

func (o AccountToAccountTransferRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["dest_account_alias"] = o.DestAccountAlias
	}
	if true {
		toSerialize["dest_account_no"] = o.DestAccountNo
	}
	if true {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	if o.ExternalData != nil {
		toSerialize["external_data"] = o.ExternalData
	}
	if true {
		toSerialize["memo"] = o.Memo
	}
	if o.OffsetDescription != nil {
		toSerialize["offset_description"] = o.OffsetDescription
	}
	if o.PostedDate != nil {
		toSerialize["posted_date"] = o.PostedDate
	}
	if true {
		toSerialize["source_account_alias"] = o.SourceAccountAlias
	}
	if true {
		toSerialize["source_account_no"] = o.SourceAccountNo
	}
	if true {
		toSerialize["subtype"] = o.Subtype
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.UserData != nil {
		toSerialize["user_data"] = o.UserData
	}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableAccountToAccountTransferRequest struct {
	value *AccountToAccountTransferRequest
	isSet bool
}

func (v NullableAccountToAccountTransferRequest) Get() *AccountToAccountTransferRequest {
	return v.value
}

func (v *NullableAccountToAccountTransferRequest) Set(val *AccountToAccountTransferRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountToAccountTransferRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountToAccountTransferRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountToAccountTransferRequest(val *AccountToAccountTransferRequest) *NullableAccountToAccountTransferRequest {
	return &NullableAccountToAccountTransferRequest{value: val, isSet: true}
}

func (v NullableAccountToAccountTransferRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountToAccountTransferRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
