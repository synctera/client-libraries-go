/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// ApplicationStatus Status of the credit application 
type ApplicationStatus string

// List of application_status
const (
	APPLICATIONSTATUS_APPLICATION_SUBMITTED ApplicationStatus = "APPLICATION_SUBMITTED"
	APPLICATIONSTATUS_CREDIT_APPROVED ApplicationStatus = "CREDIT_APPROVED"
	APPLICATIONSTATUS_CREDIT_DENIED ApplicationStatus = "CREDIT_DENIED"
	APPLICATIONSTATUS_CREDIT_NOT_ACCEPTED_BY_CUSTOMER ApplicationStatus = "CREDIT_NOT_ACCEPTED_BY_CUSTOMER"
	APPLICATIONSTATUS_CREDIT_ACCEPTED_BY_CUSTOMER ApplicationStatus = "CREDIT_ACCEPTED_BY_CUSTOMER"
)

// All allowed values of ApplicationStatus enum
var AllowedApplicationStatusEnumValues = []ApplicationStatus{
	"APPLICATION_SUBMITTED",
	"CREDIT_APPROVED",
	"CREDIT_DENIED",
	"CREDIT_NOT_ACCEPTED_BY_CUSTOMER",
	"CREDIT_ACCEPTED_BY_CUSTOMER",
}

func (v *ApplicationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationStatus(value)
	for _, existing := range AllowedApplicationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationStatus", value)
}

// NewApplicationStatusFromValue returns a pointer to a valid ApplicationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationStatusFromValue(v string) (*ApplicationStatus, error) {
	ev := ApplicationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationStatus: valid values are %v", v, AllowedApplicationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationStatus) IsValid() bool {
	for _, existing := range AllowedApplicationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to application_status value
func (v ApplicationStatus) Ptr() *ApplicationStatus {
	return &v
}

type NullableApplicationStatus struct {
	value *ApplicationStatus
	isSet bool
}

func (v NullableApplicationStatus) Get() *ApplicationStatus {
	return v.value
}

func (v *NullableApplicationStatus) Set(val *ApplicationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationStatus(val *ApplicationStatus) *NullableApplicationStatus {
	return &NullableApplicationStatus{value: val, isSet: true}
}

func (v NullableApplicationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

