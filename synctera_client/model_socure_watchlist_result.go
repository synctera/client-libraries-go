/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// SocureWatchlistResult Encapsulates the relationship between a person and any number of watchlists. That is, this tells you which watchlists a person is believed to be on (there might be false positives for similar names).
type SocureWatchlistResult struct {
	GlobalWatchlist *SocureGlobalWatchlist `json:"globalWatchlist,omitempty"`
	// A 36 character reference ID included with every ID+ response.
	ReferenceId string `json:"referenceId"`
}

// NewSocureWatchlistResult instantiates a new SocureWatchlistResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSocureWatchlistResult(referenceId string) *SocureWatchlistResult {
	this := SocureWatchlistResult{}
	this.ReferenceId = referenceId
	return &this
}

// NewSocureWatchlistResultWithDefaults instantiates a new SocureWatchlistResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSocureWatchlistResultWithDefaults() *SocureWatchlistResult {
	this := SocureWatchlistResult{}
	return &this
}

// GetGlobalWatchlist returns the GlobalWatchlist field value if set, zero value otherwise.
func (o *SocureWatchlistResult) GetGlobalWatchlist() SocureGlobalWatchlist {
	if o == nil || o.GlobalWatchlist == nil {
		var ret SocureGlobalWatchlist
		return ret
	}
	return *o.GlobalWatchlist
}

// GetGlobalWatchlistOk returns a tuple with the GlobalWatchlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SocureWatchlistResult) GetGlobalWatchlistOk() (*SocureGlobalWatchlist, bool) {
	if o == nil || o.GlobalWatchlist == nil {
		return nil, false
	}
	return o.GlobalWatchlist, true
}

// HasGlobalWatchlist returns a boolean if a field has been set.
func (o *SocureWatchlistResult) HasGlobalWatchlist() bool {
	if o != nil && o.GlobalWatchlist != nil {
		return true
	}

	return false
}

// SetGlobalWatchlist gets a reference to the given SocureGlobalWatchlist and assigns it to the GlobalWatchlist field.
func (o *SocureWatchlistResult) SetGlobalWatchlist(v SocureGlobalWatchlist) {
	o.GlobalWatchlist = &v
}

// GetReferenceId returns the ReferenceId field value
func (o *SocureWatchlistResult) GetReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *SocureWatchlistResult) GetReferenceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *SocureWatchlistResult) SetReferenceId(v string) {
	o.ReferenceId = v
}

func (o SocureWatchlistResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GlobalWatchlist != nil {
		toSerialize["globalWatchlist"] = o.GlobalWatchlist
	}
	if true {
		toSerialize["referenceId"] = o.ReferenceId
	}
	return json.Marshal(toSerialize)
}

type NullableSocureWatchlistResult struct {
	value *SocureWatchlistResult
	isSet bool
}

func (v NullableSocureWatchlistResult) Get() *SocureWatchlistResult {
	return v.value
}

func (v *NullableSocureWatchlistResult) Set(val *SocureWatchlistResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSocureWatchlistResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSocureWatchlistResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSocureWatchlistResult(val *SocureWatchlistResult) *NullableSocureWatchlistResult {
	return &NullableSocureWatchlistResult{value: val, isSet: true}
}

func (v NullableSocureWatchlistResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSocureWatchlistResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
