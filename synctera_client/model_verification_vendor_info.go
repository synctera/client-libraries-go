/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// VerificationVendorInfo - The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
type VerificationVendorInfo struct {
	VerificationVendorJson *VerificationVendorJson
	VerificationVendorXml  *VerificationVendorXml
}

// VerificationVendorJsonAsVerificationVendorInfo is a convenience function that returns VerificationVendorJson wrapped in VerificationVendorInfo
func VerificationVendorJsonAsVerificationVendorInfo(v *VerificationVendorJson) VerificationVendorInfo {
	return VerificationVendorInfo{
		VerificationVendorJson: v,
	}
}

// VerificationVendorXmlAsVerificationVendorInfo is a convenience function that returns VerificationVendorXml wrapped in VerificationVendorInfo
func VerificationVendorXmlAsVerificationVendorInfo(v *VerificationVendorXml) VerificationVendorInfo {
	return VerificationVendorInfo{
		VerificationVendorXml: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *VerificationVendorInfo) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'application/json'
	if jsonDict["content_type"] == "application/json" {
		// try to unmarshal JSON data into VerificationVendorJson
		err = json.Unmarshal(data, &dst.VerificationVendorJson)
		if err == nil {
			return nil // data stored in dst.VerificationVendorJson, return on the first match
		} else {
			dst.VerificationVendorJson = nil
			return fmt.Errorf("Failed to unmarshal VerificationVendorInfo as VerificationVendorJson: %s", err.Error())
		}
	}

	// check if the discriminator value is 'text/xml'
	if jsonDict["content_type"] == "text/xml" {
		// try to unmarshal JSON data into VerificationVendorXml
		err = json.Unmarshal(data, &dst.VerificationVendorXml)
		if err == nil {
			return nil // data stored in dst.VerificationVendorXml, return on the first match
		} else {
			dst.VerificationVendorXml = nil
			return fmt.Errorf("Failed to unmarshal VerificationVendorInfo as VerificationVendorXml: %s", err.Error())
		}
	}

	// check if the discriminator value is 'verification_vendor_json'
	if jsonDict["content_type"] == "verification_vendor_json" {
		// try to unmarshal JSON data into VerificationVendorJson
		err = json.Unmarshal(data, &dst.VerificationVendorJson)
		if err == nil {
			return nil // data stored in dst.VerificationVendorJson, return on the first match
		} else {
			dst.VerificationVendorJson = nil
			return fmt.Errorf("Failed to unmarshal VerificationVendorInfo as VerificationVendorJson: %s", err.Error())
		}
	}

	// check if the discriminator value is 'verification_vendor_xml'
	if jsonDict["content_type"] == "verification_vendor_xml" {
		// try to unmarshal JSON data into VerificationVendorXml
		err = json.Unmarshal(data, &dst.VerificationVendorXml)
		if err == nil {
			return nil // data stored in dst.VerificationVendorXml, return on the first match
		} else {
			dst.VerificationVendorXml = nil
			return fmt.Errorf("Failed to unmarshal VerificationVendorInfo as VerificationVendorXml: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VerificationVendorInfo) MarshalJSON() ([]byte, error) {
	if src.VerificationVendorJson != nil {
		return json.Marshal(&src.VerificationVendorJson)
	}

	if src.VerificationVendorXml != nil {
		return json.Marshal(&src.VerificationVendorXml)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VerificationVendorInfo) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.VerificationVendorJson != nil {
		return obj.VerificationVendorJson
	}

	if obj.VerificationVendorXml != nil {
		return obj.VerificationVendorXml
	}

	// all schemas are nil
	return nil
}

type NullableVerificationVendorInfo struct {
	value *VerificationVendorInfo
	isSet bool
}

func (v NullableVerificationVendorInfo) Get() *VerificationVendorInfo {
	return v.value
}

func (v *NullableVerificationVendorInfo) Set(val *VerificationVendorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationVendorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationVendorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationVendorInfo(val *VerificationVendorInfo) *NullableVerificationVendorInfo {
	return &NullableVerificationVendorInfo{value: val, isSet: true}
}

func (v NullableVerificationVendorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationVendorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
