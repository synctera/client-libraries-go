/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// Detail An object containing information about an individual check performed.
type Detail struct {
	// Human-readable description explaining the individual check.
	Description *string `json:"description,omitempty"`
	// Human-readable grouping describing the aspect of the customer's identity examined by this check.
	Label *string `json:"label,omitempty"`
	// The result of the individual check. One of the following: * `PASS` – the check passed contributing to a positive outcome (or accepted verification result). * `WARN` – the results of the check were inconclusive and might require review. * `FAIL` – the check failed and might result in a failing outcome (or rejected verification_result). 
	Result *string `json:"result,omitempty"`
	// Machine-readable description of the individual check. This field contains vendor-specific terms and may not be populated in all cases.
	VendorCode *string `json:"vendor_code,omitempty"`
}

// NewDetail instantiates a new Detail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetail() *Detail {
	this := Detail{}
	return &this
}

// NewDetailWithDefaults instantiates a new Detail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailWithDefaults() *Detail {
	this := Detail{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Detail) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Detail) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Detail) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Detail) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Detail) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Detail) SetLabel(v string) {
	o.Label = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Detail) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Detail) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *Detail) SetResult(v string) {
	o.Result = &v
}

// GetVendorCode returns the VendorCode field value if set, zero value otherwise.
func (o *Detail) GetVendorCode() string {
	if o == nil || o.VendorCode == nil {
		var ret string
		return ret
	}
	return *o.VendorCode
}

// GetVendorCodeOk returns a tuple with the VendorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetVendorCodeOk() (*string, bool) {
	if o == nil || o.VendorCode == nil {
		return nil, false
	}
	return o.VendorCode, true
}

// HasVendorCode returns a boolean if a field has been set.
func (o *Detail) HasVendorCode() bool {
	if o != nil && o.VendorCode != nil {
		return true
	}

	return false
}

// SetVendorCode gets a reference to the given string and assigns it to the VendorCode field.
func (o *Detail) SetVendorCode(v string) {
	o.VendorCode = &v
}

func (o Detail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.VendorCode != nil {
		toSerialize["vendor_code"] = o.VendorCode
	}
	return json.Marshal(toSerialize)
}

type NullableDetail struct {
	value *Detail
	isSet bool
}

func (v NullableDetail) Get() *Detail {
	return v.value
}

func (v *NullableDetail) Set(val *Detail) {
	v.value = val
	v.isSet = true
}

func (v NullableDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetail(val *Detail) *NullableDetail {
	return &NullableDetail{value: val, isSet: true}
}

func (v NullableDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


