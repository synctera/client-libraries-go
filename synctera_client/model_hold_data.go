/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"time"
)

// HoldData struct for HoldData
type HoldData struct {
	Amount int32 `json:"amount"`
	AvailabilityTime time.Time `json:"availability_time"`
}

// NewHoldData instantiates a new HoldData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHoldData(amount int32, availabilityTime time.Time) *HoldData {
	this := HoldData{}
	this.Amount = amount
	this.AvailabilityTime = availabilityTime
	return &this
}

// NewHoldDataWithDefaults instantiates a new HoldData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldDataWithDefaults() *HoldData {
	this := HoldData{}
	return &this
}

// GetAmount returns the Amount field value
func (o *HoldData) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *HoldData) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *HoldData) SetAmount(v int32) {
	o.Amount = v
}

// GetAvailabilityTime returns the AvailabilityTime field value
func (o *HoldData) GetAvailabilityTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AvailabilityTime
}

// GetAvailabilityTimeOk returns a tuple with the AvailabilityTime field value
// and a boolean to check if the value has been set.
func (o *HoldData) GetAvailabilityTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityTime, true
}

// SetAvailabilityTime sets field value
func (o *HoldData) SetAvailabilityTime(v time.Time) {
	o.AvailabilityTime = v
}

func (o HoldData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["availability_time"] = o.AvailabilityTime
	}
	return json.Marshal(toSerialize)
}

type NullableHoldData struct {
	value *HoldData
	isSet bool
}

func (v NullableHoldData) Get() *HoldData {
	return v.value
}

func (v *NullableHoldData) Set(val *HoldData) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldData) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldData(val *HoldData) *NullableHoldData {
	return &NullableHoldData{value: val, isSet: true}
}

func (v NullableHoldData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


