/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.19.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// TemplateFields - struct for TemplateFields
type TemplateFields struct {
	TemplateFieldsDepository *TemplateFieldsDepository
	TemplateFieldsLineOfCredit *TemplateFieldsLineOfCredit
}

// TemplateFieldsDepositoryAsTemplateFields is a convenience function that returns TemplateFieldsDepository wrapped in TemplateFields
func TemplateFieldsDepositoryAsTemplateFields(v *TemplateFieldsDepository) TemplateFields {
	return TemplateFields{
		TemplateFieldsDepository: v,
	}
}

// TemplateFieldsLineOfCreditAsTemplateFields is a convenience function that returns TemplateFieldsLineOfCredit wrapped in TemplateFields
func TemplateFieldsLineOfCreditAsTemplateFields(v *TemplateFieldsLineOfCredit) TemplateFields {
	return TemplateFields{
		TemplateFieldsLineOfCredit: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TemplateFields) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'CHECKING'
	if jsonDict["account_type"] == "CHECKING" {
		// try to unmarshal JSON data into TemplateFieldsDepository
		err = json.Unmarshal(data, &dst.TemplateFieldsDepository)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsDepository, return on the first match
		} else {
			dst.TemplateFieldsDepository = nil
			return fmt.Errorf("Failed to unmarshal TemplateFields as TemplateFieldsDepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'LINE_OF_CREDIT'
	if jsonDict["account_type"] == "LINE_OF_CREDIT" {
		// try to unmarshal JSON data into TemplateFieldsLineOfCredit
		err = json.Unmarshal(data, &dst.TemplateFieldsLineOfCredit)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsLineOfCredit, return on the first match
		} else {
			dst.TemplateFieldsLineOfCredit = nil
			return fmt.Errorf("Failed to unmarshal TemplateFields as TemplateFieldsLineOfCredit: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SAVING'
	if jsonDict["account_type"] == "SAVING" {
		// try to unmarshal JSON data into TemplateFieldsDepository
		err = json.Unmarshal(data, &dst.TemplateFieldsDepository)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsDepository, return on the first match
		} else {
			dst.TemplateFieldsDepository = nil
			return fmt.Errorf("Failed to unmarshal TemplateFields as TemplateFieldsDepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'template_fields_depository'
	if jsonDict["account_type"] == "template_fields_depository" {
		// try to unmarshal JSON data into TemplateFieldsDepository
		err = json.Unmarshal(data, &dst.TemplateFieldsDepository)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsDepository, return on the first match
		} else {
			dst.TemplateFieldsDepository = nil
			return fmt.Errorf("Failed to unmarshal TemplateFields as TemplateFieldsDepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'template_fields_line_of_credit'
	if jsonDict["account_type"] == "template_fields_line_of_credit" {
		// try to unmarshal JSON data into TemplateFieldsLineOfCredit
		err = json.Unmarshal(data, &dst.TemplateFieldsLineOfCredit)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsLineOfCredit, return on the first match
		} else {
			dst.TemplateFieldsLineOfCredit = nil
			return fmt.Errorf("Failed to unmarshal TemplateFields as TemplateFieldsLineOfCredit: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TemplateFields) MarshalJSON() ([]byte, error) {
	if src.TemplateFieldsDepository != nil {
		return json.Marshal(&src.TemplateFieldsDepository)
	}

	if src.TemplateFieldsLineOfCredit != nil {
		return json.Marshal(&src.TemplateFieldsLineOfCredit)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TemplateFields) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TemplateFieldsDepository != nil {
		return obj.TemplateFieldsDepository
	}

	if obj.TemplateFieldsLineOfCredit != nil {
		return obj.TemplateFieldsLineOfCredit
	}

	// all schemas are nil
	return nil
}

type NullableTemplateFields struct {
	value *TemplateFields
	isSet bool
}

func (v NullableTemplateFields) Get() *TemplateFields {
	return v.value
}

func (v *NullableTemplateFields) Set(val *TemplateFields) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateFields) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateFields(val *TemplateFields) *NullableTemplateFields {
	return &NullableTemplateFields{value: val, isSet: true}
}

func (v NullableTemplateFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


