/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// VerificationType The type of check run on the customer.
type VerificationType string

// List of verification_type
const (
	VERIFICATIONTYPE_FRAUD VerificationType = "fraud"
	VERIFICATIONTYPE_SYNTHETIC VerificationType = "synthetic"
	VERIFICATIONTYPE_EMAILRISK VerificationType = "emailrisk"
	VERIFICATIONTYPE_PHONERISK VerificationType = "phonerisk"
	VERIFICATIONTYPE_ADDRESSRISK VerificationType = "addressrisk"
	VERIFICATIONTYPE_KYC VerificationType = "kyc"
	VERIFICATIONTYPE_SOCIAL VerificationType = "social"
	VERIFICATIONTYPE_WATCHLISTSTANDARD VerificationType = "watchliststandard"
	VERIFICATIONTYPE_WATCHLISTPREMIER VerificationType = "watchlistpremier"
	VERIFICATIONTYPE_WATCHLISTPLUS VerificationType = "watchlistplus"
	VERIFICATIONTYPE_DOCUMENTVERIFICATION VerificationType = "documentverification"
	VERIFICATIONTYPE_ALERTLIST VerificationType = "alertlist"
	VERIFICATIONTYPE_DECISION VerificationType = "decision"
)

var allowedVerificationTypeEnumValues = []VerificationType{
	"fraud",
	"synthetic",
	"emailrisk",
	"phonerisk",
	"addressrisk",
	"kyc",
	"social",
	"watchliststandard",
	"watchlistpremier",
	"watchlistplus",
	"documentverification",
	"alertlist",
	"decision",
}

func (v *VerificationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationType(value)
	for _, existing := range allowedVerificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationType", value)
}

// NewVerificationTypeFromValue returns a pointer to a valid VerificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerificationTypeFromValue(v string) (*VerificationType, error) {
	ev := VerificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerificationType: valid values are %v", v, allowedVerificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerificationType) IsValid() bool {
	for _, existing := range allowedVerificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to verification_type value
func (v VerificationType) Ptr() *VerificationType {
	return &v
}

type NullableVerificationType struct {
	value *VerificationType
	isSet bool
}

func (v NullableVerificationType) Get() *VerificationType {
	return v.value
}

func (v *NullableVerificationType) Set(val *VerificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationType(val *VerificationType) *NullableVerificationType {
	return &NullableVerificationType{value: val, isSet: true}
}

func (v NullableVerificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

