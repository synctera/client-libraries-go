/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// CardChangeReasonCode The reason for changing the card status  Code | Description --- | --- NEW | Object activated for the first time REQ | Requested by you INA | Inactivity over time UNK | This address cannot accept mail or the addressee is unknown NEG | Negative account balance REV | Account under review SUS | Suspicious activity was identified OUT | Activity outside the program parameters was identified FRD | Confirmed fraud was identified MAT | Matched with an Office of Foreign Assets Control list LOS | Card was reported lost CLO | Card information was cloned COM | Account or card information was compromised TMP | Temporary status change while on hold/leave MRQ | Initiated by Marqeta ISS | Initiated by issuer EXP | Card expired KYC | Failed KYC INF | Changed to ACTIVE because information was properly validated ACT | Changed to ACTIVE because account activity was properly validated AUX | Initiated by a third party, often a digital wallet provider PIN | PIN retry limit reached STO | Card was reported stolen ADD | Address issue NAM | Name issue SSN | SSN issue DOB | DOB issue EML | Email issue PHO | Phone issue FUL | Account/fulfillment mismatch OTH | Other reason 
type CardChangeReasonCode string

// List of card_change_reason_code
const (
	CARDCHANGEREASONCODE_NEW CardChangeReasonCode = "NEW"
	CARDCHANGEREASONCODE_REQ CardChangeReasonCode = "REQ"
	CARDCHANGEREASONCODE_INA CardChangeReasonCode = "INA"
	CARDCHANGEREASONCODE_UNK CardChangeReasonCode = "UNK"
	CARDCHANGEREASONCODE_NEG CardChangeReasonCode = "NEG"
	CARDCHANGEREASONCODE_REV CardChangeReasonCode = "REV"
	CARDCHANGEREASONCODE_SUS CardChangeReasonCode = "SUS"
	CARDCHANGEREASONCODE_OUT CardChangeReasonCode = "OUT"
	CARDCHANGEREASONCODE_FRD CardChangeReasonCode = "FRD"
	CARDCHANGEREASONCODE_MAT CardChangeReasonCode = "MAT"
	CARDCHANGEREASONCODE_LOS CardChangeReasonCode = "LOS"
	CARDCHANGEREASONCODE_CLO CardChangeReasonCode = "CLO"
	CARDCHANGEREASONCODE_COM CardChangeReasonCode = "COM"
	CARDCHANGEREASONCODE_TMP CardChangeReasonCode = "TMP"
	CARDCHANGEREASONCODE_MRQ CardChangeReasonCode = "MRQ"
	CARDCHANGEREASONCODE_ISS CardChangeReasonCode = "ISS"
	CARDCHANGEREASONCODE_EXP CardChangeReasonCode = "EXP"
	CARDCHANGEREASONCODE_KYC CardChangeReasonCode = "KYC"
	CARDCHANGEREASONCODE_INF CardChangeReasonCode = "INF"
	CARDCHANGEREASONCODE_ACT CardChangeReasonCode = "ACT"
	CARDCHANGEREASONCODE_AUX CardChangeReasonCode = "AUX"
	CARDCHANGEREASONCODE_PIN CardChangeReasonCode = "PIN"
	CARDCHANGEREASONCODE_STO CardChangeReasonCode = "STO"
	CARDCHANGEREASONCODE_ADD CardChangeReasonCode = "ADD"
	CARDCHANGEREASONCODE_NAM CardChangeReasonCode = "NAM"
	CARDCHANGEREASONCODE_SSN CardChangeReasonCode = "SSN"
	CARDCHANGEREASONCODE_DOB CardChangeReasonCode = "DOB"
	CARDCHANGEREASONCODE_EML CardChangeReasonCode = "EML"
	CARDCHANGEREASONCODE_PHO CardChangeReasonCode = "PHO"
	CARDCHANGEREASONCODE_FUL CardChangeReasonCode = "FUL"
	CARDCHANGEREASONCODE_OTH CardChangeReasonCode = "OTH"
)

var allowedCardChangeReasonCodeEnumValues = []CardChangeReasonCode{
	"NEW",
	"REQ",
	"INA",
	"UNK",
	"NEG",
	"REV",
	"SUS",
	"OUT",
	"FRD",
	"MAT",
	"LOS",
	"CLO",
	"COM",
	"TMP",
	"MRQ",
	"ISS",
	"EXP",
	"KYC",
	"INF",
	"ACT",
	"AUX",
	"PIN",
	"STO",
	"ADD",
	"NAM",
	"SSN",
	"DOB",
	"EML",
	"PHO",
	"FUL",
	"OTH",
}

func (v *CardChangeReasonCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardChangeReasonCode(value)
	for _, existing := range allowedCardChangeReasonCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardChangeReasonCode", value)
}

// NewCardChangeReasonCodeFromValue returns a pointer to a valid CardChangeReasonCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardChangeReasonCodeFromValue(v string) (*CardChangeReasonCode, error) {
	ev := CardChangeReasonCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardChangeReasonCode: valid values are %v", v, allowedCardChangeReasonCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardChangeReasonCode) IsValid() bool {
	for _, existing := range allowedCardChangeReasonCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to card_change_reason_code value
func (v CardChangeReasonCode) Ptr() *CardChangeReasonCode {
	return &v
}

type NullableCardChangeReasonCode struct {
	value *CardChangeReasonCode
	isSet bool
}

func (v NullableCardChangeReasonCode) Get() *CardChangeReasonCode {
	return v.value
}

func (v *NullableCardChangeReasonCode) Set(val *CardChangeReasonCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCardChangeReasonCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCardChangeReasonCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardChangeReasonCode(val *CardChangeReasonCode) *NullableCardChangeReasonCode {
	return &NullableCardChangeReasonCode{value: val, isSet: true}
}

func (v NullableCardChangeReasonCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardChangeReasonCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

