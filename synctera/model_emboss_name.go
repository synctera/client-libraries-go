/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// EmbossName The customer details to emboss on the card - Defaults to customer first and last name. Is limited to 21 characters. Valid characters are A-Z, a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-), ampersand (&), single quote (').
type EmbossName struct {
	// line 1
	Line1 string `json:"line_1"`
	// line 2
	Line2 *string `json:"line_2,omitempty"`
}

// NewEmbossName instantiates a new EmbossName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbossName(line1 string) *EmbossName {
	this := EmbossName{}
	this.Line1 = line1
	return &this
}

// NewEmbossNameWithDefaults instantiates a new EmbossName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbossNameWithDefaults() *EmbossName {
	this := EmbossName{}
	return &this
}

// GetLine1 returns the Line1 field value
func (o *EmbossName) GetLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value
// and a boolean to check if the value has been set.
func (o *EmbossName) GetLine1Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Line1, true
}

// SetLine1 sets field value
func (o *EmbossName) SetLine1(v string) {
	o.Line1 = v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *EmbossName) GetLine2() string {
	if o == nil || o.Line2 == nil {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbossName) GetLine2Ok() (*string, bool) {
	if o == nil || o.Line2 == nil {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *EmbossName) HasLine2() bool {
	if o != nil && o.Line2 != nil {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *EmbossName) SetLine2(v string) {
	o.Line2 = &v
}

func (o EmbossName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["line_1"] = o.Line1
	}
	if o.Line2 != nil {
		toSerialize["line_2"] = o.Line2
	}
	return json.Marshal(toSerialize)
}

type NullableEmbossName struct {
	value *EmbossName
	isSet bool
}

func (v NullableEmbossName) Get() *EmbossName {
	return v.value
}

func (v *NullableEmbossName) Set(val *EmbossName) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbossName) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbossName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbossName(val *EmbossName) *NullableEmbossName {
	return &NullableEmbossName{value: val, isSet: true}
}

func (v NullableEmbossName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbossName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


