/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExternalAccountVendorValues The vendor selected for the operation. 
type ExternalAccountVendorValues string

// List of external_account_vendor_values
const (
	EXTERNALACCOUNTVENDORVALUES_PLAID ExternalAccountVendorValues = "PLAID"
)

var allowedExternalAccountVendorValuesEnumValues = []ExternalAccountVendorValues{
	"PLAID",
}

func (v *ExternalAccountVendorValues) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalAccountVendorValues(value)
	for _, existing := range allowedExternalAccountVendorValuesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalAccountVendorValues", value)
}

// NewExternalAccountVendorValuesFromValue returns a pointer to a valid ExternalAccountVendorValues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalAccountVendorValuesFromValue(v string) (*ExternalAccountVendorValues, error) {
	ev := ExternalAccountVendorValues(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalAccountVendorValues: valid values are %v", v, allowedExternalAccountVendorValuesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalAccountVendorValues) IsValid() bool {
	for _, existing := range allowedExternalAccountVendorValuesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to external_account_vendor_values value
func (v ExternalAccountVendorValues) Ptr() *ExternalAccountVendorValues {
	return &v
}

type NullableExternalAccountVendorValues struct {
	value *ExternalAccountVendorValues
	isSet bool
}

func (v NullableExternalAccountVendorValues) Get() *ExternalAccountVendorValues {
	return v.value
}

func (v *NullableExternalAccountVendorValues) Set(val *ExternalAccountVendorValues) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalAccountVendorValues) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalAccountVendorValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalAccountVendorValues(val *ExternalAccountVendorValues) *NullableExternalAccountVendorValues {
	return &NullableExternalAccountVendorValues{value: val, isSet: true}
}

func (v NullableExternalAccountVendorValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalAccountVendorValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

