/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// EventType The type of the webhook event. Items ends with .* means all events that match the prefix (major type. e.g. ACCOUNT, KYC etc). One webhook allows one major type only.
type EventType string

// List of event_type
const (
	EVENTTYPE_ACCOUNT EventType = "ACCOUNT.*"
	EVENTTYPE_ACCOUNT_STATUS_CHANGED EventType = "ACCOUNT.STATUS_CHANGED"
	EVENTTYPE_TRANSACTION EventType = "TRANSACTION.*"
	EVENTTYPE_TRANSACTION_POSTED EventType = "TRANSACTION.POSTED"
	EVENTTYPE_TRANSACTION_FAILED EventType = "TRANSACTION.FAILED"
	EVENTTYPE_KYC EventType = "KYC.*"
	EVENTTYPE_KYC_CUSTOMER_MANUAL_REVIEW EventType = "KYC.CUSTOMER_MANUAL_REVIEW"
	EVENTTYPE_KYC_PASS EventType = "KYC.PASS"
	EVENTTYPE_KYC_FAILED_MANUAL_REVIEW EventType = "KYC.FAILED_MANUAL_REVIEW"
	EVENTTYPE_KYC_FOUND_ON_WATCHLIST EventType = "KYC.FOUND_ON_WATCHLIST"
	EVENTTYPE_KYC_ADDITIONAL_DOC_REQUIRED EventType = "KYC.ADDITIONAL_DOC_REQUIRED"
	EVENTTYPE_LEDGER EventType = "LEDGER.*"
	EVENTTYPE_LEDGER_BALANCE_CHANGED_ACH_REVERSALS EventType = "LEDGER.BALANCE_CHANGED.ACH_REVERSALS"
	EVENTTYPE_LEDGER_BALANCE_CHANGED_INTEREST EventType = "LEDGER.BALANCE_CHANGED.INTEREST"
	EVENTTYPE_LEDGER_BALANCE_CHANGED_WIRES EventType = "LEDGER.BALANCE_CHANGED.WIRES"
	EVENTTYPE_LEDGER_BALANCE_CHANGED_CHECK_DEPOSIT EventType = "LEDGER.BALANCE_CHANGED.CHECK_DEPOSIT"
	EVENTTYPE_CARD EventType = "CARD.*"
	EVENTTYPE_CARD_FULFILLMENT_UPDATE EventType = "CARD.FULFILLMENT_UPDATE"
	EVENTTYPE_CARD_TERMINATION EventType = "CARD.TERMINATION"
	EVENTTYPE_CARD_STATUS_CHANGE EventType = "CARD.STATUS_CHANGE"
	EVENTTYPE_RECONCILIATION EventType = "RECONCILIATION.*"
	EVENTTYPE_RECONCILIATION_PROCESSED EventType = "RECONCILIATION.PROCESSED"
)

var allowedEventTypeEnumValues = []EventType{
	"ACCOUNT.*",
	"ACCOUNT.STATUS_CHANGED",
	"TRANSACTION.*",
	"TRANSACTION.POSTED",
	"TRANSACTION.FAILED",
	"KYC.*",
	"KYC.CUSTOMER_MANUAL_REVIEW",
	"KYC.PASS",
	"KYC.FAILED_MANUAL_REVIEW",
	"KYC.FOUND_ON_WATCHLIST",
	"KYC.ADDITIONAL_DOC_REQUIRED",
	"LEDGER.*",
	"LEDGER.BALANCE_CHANGED.ACH_REVERSALS",
	"LEDGER.BALANCE_CHANGED.INTEREST",
	"LEDGER.BALANCE_CHANGED.WIRES",
	"LEDGER.BALANCE_CHANGED.CHECK_DEPOSIT",
	"CARD.*",
	"CARD.FULFILLMENT_UPDATE",
	"CARD.TERMINATION",
	"CARD.STATUS_CHANGE",
	"RECONCILIATION.*",
	"RECONCILIATION.PROCESSED",
}

func (v *EventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventType(value)
	for _, existing := range allowedEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventType", value)
}

// NewEventTypeFromValue returns a pointer to a valid EventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypeFromValue(v string) (*EventType, error) {
	ev := EventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventType: valid values are %v", v, allowedEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventType) IsValid() bool {
	for _, existing := range allowedEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to event_type value
func (v EventType) Ptr() *EventType {
	return &v
}

type NullableEventType struct {
	value *EventType
	isSet bool
}

func (v NullableEventType) Get() *EventType {
	return v.value
}

func (v *NullableEventType) Set(val *EventType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventType(val *EventType) *NullableEventType {
	return &NullableEventType{value: val, isSet: true}
}

func (v NullableEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

