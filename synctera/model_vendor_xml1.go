/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// VendorXml1 struct for VendorXml1
type VendorXml1 struct {
	// Describes the content-type encoding received from the vendor
	ContentType string `json:"content_type"`
	Vendor string `json:"vendor"`
	// Data representaion in XML
	Xml string `json:"xml"`
}

// NewVendorXml1 instantiates a new VendorXml1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorXml1(contentType string, vendor string, xml string) *VendorXml1 {
	this := VendorXml1{}
	this.ContentType = contentType
	this.Vendor = vendor
	this.Xml = xml
	return &this
}

// NewVendorXml1WithDefaults instantiates a new VendorXml1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorXml1WithDefaults() *VendorXml1 {
	this := VendorXml1{}
	return &this
}

// GetContentType returns the ContentType field value
func (o *VendorXml1) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *VendorXml1) GetContentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *VendorXml1) SetContentType(v string) {
	o.ContentType = v
}

// GetVendor returns the Vendor field value
func (o *VendorXml1) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *VendorXml1) GetVendorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *VendorXml1) SetVendor(v string) {
	o.Vendor = v
}

// GetXml returns the Xml field value
func (o *VendorXml1) GetXml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Xml
}

// GetXmlOk returns a tuple with the Xml field value
// and a boolean to check if the value has been set.
func (o *VendorXml1) GetXmlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Xml, true
}

// SetXml sets field value
func (o *VendorXml1) SetXml(v string) {
	o.Xml = v
}

func (o VendorXml1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content_type"] = o.ContentType
	}
	if true {
		toSerialize["vendor"] = o.Vendor
	}
	if true {
		toSerialize["xml"] = o.Xml
	}
	return json.Marshal(toSerialize)
}

type NullableVendorXml1 struct {
	value *VendorXml1
	isSet bool
}

func (v NullableVendorXml1) Get() *VendorXml1 {
	return v.value
}

func (v *NullableVendorXml1) Set(val *VendorXml1) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorXml1) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorXml1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorXml1(val *VendorXml1) *NullableVendorXml1 {
	return &NullableVendorXml1{value: val, isSet: true}
}

func (v NullableVendorXml1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorXml1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


