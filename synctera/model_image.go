/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// Image Image uploaded for a remote deposit capture
type Image struct {
	// Base64url encoded image
	ByteData string `json:"byte_data"`
	// Date the image was uploaded, in RFC 3339 format
	DateUploaded string `json:"date_uploaded"`
	// RDC image id
	Id string `json:"id"`
	MediaType RdcMediaType `json:"media_type"`
}

// NewImage instantiates a new Image object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImage(byteData string, dateUploaded string, id string, mediaType RdcMediaType) *Image {
	this := Image{}
	this.ByteData = byteData
	this.DateUploaded = dateUploaded
	this.Id = id
	this.MediaType = mediaType
	return &this
}

// NewImageWithDefaults instantiates a new Image object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageWithDefaults() *Image {
	this := Image{}
	return &this
}

// GetByteData returns the ByteData field value
func (o *Image) GetByteData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ByteData
}

// GetByteDataOk returns a tuple with the ByteData field value
// and a boolean to check if the value has been set.
func (o *Image) GetByteDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ByteData, true
}

// SetByteData sets field value
func (o *Image) SetByteData(v string) {
	o.ByteData = v
}

// GetDateUploaded returns the DateUploaded field value
func (o *Image) GetDateUploaded() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateUploaded
}

// GetDateUploadedOk returns a tuple with the DateUploaded field value
// and a boolean to check if the value has been set.
func (o *Image) GetDateUploadedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateUploaded, true
}

// SetDateUploaded sets field value
func (o *Image) SetDateUploaded(v string) {
	o.DateUploaded = v
}

// GetId returns the Id field value
func (o *Image) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Image) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Image) SetId(v string) {
	o.Id = v
}

// GetMediaType returns the MediaType field value
func (o *Image) GetMediaType() RdcMediaType {
	if o == nil {
		var ret RdcMediaType
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *Image) GetMediaTypeOk() (*RdcMediaType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *Image) SetMediaType(v RdcMediaType) {
	o.MediaType = v
}

func (o Image) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["byte_data"] = o.ByteData
	}
	if true {
		toSerialize["date_uploaded"] = o.DateUploaded
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["media_type"] = o.MediaType
	}
	return json.Marshal(toSerialize)
}

type NullableImage struct {
	value *Image
	isSet bool
}

func (v NullableImage) Get() *Image {
	return v.value
}

func (v *NullableImage) Set(val *Image) {
	v.value = val
	v.isSet = true
}

func (v NullableImage) IsSet() bool {
	return v.isSet
}

func (v *NullableImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImage(val *Image) *NullableImage {
	return &NullableImage{value: val, isSet: true}
}

func (v NullableImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


