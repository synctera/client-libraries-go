/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RdcMediaType Type of image: PNG, JPG. Note that PDF and GIF are valid values, but not currently supported.
type RdcMediaType string

// List of rdc_media_type
const (
	RDCMEDIATYPE_PDF RdcMediaType = "PDF"
	RDCMEDIATYPE_PNG RdcMediaType = "PNG"
	RDCMEDIATYPE_JPG RdcMediaType = "JPG"
	RDCMEDIATYPE_GIF RdcMediaType = "GIF"
)

var allowedRdcMediaTypeEnumValues = []RdcMediaType{
	"PDF",
	"PNG",
	"JPG",
	"GIF",
}

func (v *RdcMediaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RdcMediaType(value)
	for _, existing := range allowedRdcMediaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RdcMediaType", value)
}

// NewRdcMediaTypeFromValue returns a pointer to a valid RdcMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRdcMediaTypeFromValue(v string) (*RdcMediaType, error) {
	ev := RdcMediaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RdcMediaType: valid values are %v", v, allowedRdcMediaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RdcMediaType) IsValid() bool {
	for _, existing := range allowedRdcMediaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rdc_media_type value
func (v RdcMediaType) Ptr() *RdcMediaType {
	return &v
}

type NullableRdcMediaType struct {
	value *RdcMediaType
	isSet bool
}

func (v NullableRdcMediaType) Get() *RdcMediaType {
	return v.value
}

func (v *NullableRdcMediaType) Set(val *RdcMediaType) {
	v.value = val
	v.isSet = true
}

func (v NullableRdcMediaType) IsSet() bool {
	return v.isSet
}

func (v *NullableRdcMediaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRdcMediaType(val *RdcMediaType) *NullableRdcMediaType {
	return &NullableRdcMediaType{value: val, isSet: true}
}

func (v NullableRdcMediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRdcMediaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

