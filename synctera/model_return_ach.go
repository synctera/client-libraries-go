/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// ReturnAch Regular return
type ReturnAch struct {
	Type string `json:"type"`
}

// NewReturnAch instantiates a new ReturnAch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnAch(type_ string) *ReturnAch {
	this := ReturnAch{}
	this.Type = type_
	return &this
}

// NewReturnAchWithDefaults instantiates a new ReturnAch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnAchWithDefaults() *ReturnAch {
	this := ReturnAch{}
	return &this
}

// GetType returns the Type field value
func (o *ReturnAch) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ReturnAch) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ReturnAch) SetType(v string) {
	o.Type = v
}

func (o ReturnAch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableReturnAch struct {
	value *ReturnAch
	isSet bool
}

func (v NullableReturnAch) Get() *ReturnAch {
	return v.value
}

func (v *NullableReturnAch) Set(val *ReturnAch) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnAch) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnAch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnAch(val *ReturnAch) *NullableReturnAch {
	return &NullableReturnAch{value: val, isSet: true}
}

func (v NullableReturnAch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnAch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


