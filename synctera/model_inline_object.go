/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"time"
)

// InlineObject struct for InlineObject
type InlineObject struct {
	// Posting date of the balance. Default is today's date
	PostingDate *time.Time `json:"posting_date,omitempty"`
	BalanceType *BalanceType `json:"balance_type,omitempty"`
}

// NewInlineObject instantiates a new InlineObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject() *InlineObject {
	this := InlineObject{}
	return &this
}

// NewInlineObjectWithDefaults instantiates a new InlineObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObjectWithDefaults() *InlineObject {
	this := InlineObject{}
	return &this
}

// GetPostingDate returns the PostingDate field value if set, zero value otherwise.
func (o *InlineObject) GetPostingDate() time.Time {
	if o == nil || o.PostingDate == nil {
		var ret time.Time
		return ret
	}
	return *o.PostingDate
}

// GetPostingDateOk returns a tuple with the PostingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetPostingDateOk() (*time.Time, bool) {
	if o == nil || o.PostingDate == nil {
		return nil, false
	}
	return o.PostingDate, true
}

// HasPostingDate returns a boolean if a field has been set.
func (o *InlineObject) HasPostingDate() bool {
	if o != nil && o.PostingDate != nil {
		return true
	}

	return false
}

// SetPostingDate gets a reference to the given time.Time and assigns it to the PostingDate field.
func (o *InlineObject) SetPostingDate(v time.Time) {
	o.PostingDate = &v
}

// GetBalanceType returns the BalanceType field value if set, zero value otherwise.
func (o *InlineObject) GetBalanceType() BalanceType {
	if o == nil || o.BalanceType == nil {
		var ret BalanceType
		return ret
	}
	return *o.BalanceType
}

// GetBalanceTypeOk returns a tuple with the BalanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetBalanceTypeOk() (*BalanceType, bool) {
	if o == nil || o.BalanceType == nil {
		return nil, false
	}
	return o.BalanceType, true
}

// HasBalanceType returns a boolean if a field has been set.
func (o *InlineObject) HasBalanceType() bool {
	if o != nil && o.BalanceType != nil {
		return true
	}

	return false
}

// SetBalanceType gets a reference to the given BalanceType and assigns it to the BalanceType field.
func (o *InlineObject) SetBalanceType(v BalanceType) {
	o.BalanceType = &v
}

func (o InlineObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PostingDate != nil {
		toSerialize["posting_date"] = o.PostingDate
	}
	if o.BalanceType != nil {
		toSerialize["balance_type"] = o.BalanceType
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject struct {
	value *InlineObject
	isSet bool
}

func (v NullableInlineObject) Get() *InlineObject {
	return v.value
}

func (v *NullableInlineObject) Set(val *InlineObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject(val *InlineObject) *NullableInlineObject {
	return &NullableInlineObject{value: val, isSet: true}
}

func (v NullableInlineObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


