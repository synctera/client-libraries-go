/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// VendorJson1 struct for VendorJson1
type VendorJson1 struct {
	// Describes the content-type encoding received from the vendor
	ContentType string `json:"content_type"`
	// Data representation in JSON
	Json map[string]interface{} `json:"json"`
	Vendor string `json:"vendor"`
}

// NewVendorJson1 instantiates a new VendorJson1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorJson1(contentType string, json map[string]interface{}, vendor string) *VendorJson1 {
	this := VendorJson1{}
	this.ContentType = contentType
	this.Json = json
	this.Vendor = vendor
	return &this
}

// NewVendorJson1WithDefaults instantiates a new VendorJson1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorJson1WithDefaults() *VendorJson1 {
	this := VendorJson1{}
	return &this
}

// GetContentType returns the ContentType field value
func (o *VendorJson1) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *VendorJson1) GetContentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *VendorJson1) SetContentType(v string) {
	o.ContentType = v
}

// GetJson returns the Json field value
func (o *VendorJson1) GetJson() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Json
}

// GetJsonOk returns a tuple with the Json field value
// and a boolean to check if the value has been set.
func (o *VendorJson1) GetJsonOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Json, true
}

// SetJson sets field value
func (o *VendorJson1) SetJson(v map[string]interface{}) {
	o.Json = v
}

// GetVendor returns the Vendor field value
func (o *VendorJson1) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *VendorJson1) GetVendorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *VendorJson1) SetVendor(v string) {
	o.Vendor = v
}

func (o VendorJson1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content_type"] = o.ContentType
	}
	if true {
		toSerialize["json"] = o.Json
	}
	if true {
		toSerialize["vendor"] = o.Vendor
	}
	return json.Marshal(toSerialize)
}

type NullableVendorJson1 struct {
	value *VendorJson1
	isSet bool
}

func (v NullableVendorJson1) Get() *VendorJson1 {
	return v.value
}

func (v *NullableVendorJson1) Set(val *VendorJson1) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorJson1) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorJson1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorJson1(val *VendorJson1) *NullableVendorJson1 {
	return &NullableVendorJson1{value: val, isSet: true}
}

func (v NullableVendorJson1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorJson1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


