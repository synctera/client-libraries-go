{
  "components": {
    "parameters": {
      "account_id_path": {
        "description": "Unique identifier for the account.",
        "in": "path",
        "name": "account_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/account_id"
        }
      },
      "account_id_query": {
        "description": "Unique identifier for the account(s). Multiple account IDs can be provided as a comma-separated list.\n",
        "in": "query",
        "name": "id",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/account_id"
        }
      },
      "account_id_query1": {
        "description": "The unique identifier for an account",
        "in": "query",
        "name": "account_id",
        "required": false,
        "schema": {
          "example": "330dbe2f-775a-409f-97b1-b2d6d51e116f",
          "format": "uuid",
          "type": "string"
        }
      },
      "account_number": {
        "description": "Account number. Any * characters in the string are wildcards, and match any characters.\n",
        "in": "query",
        "name": "account_number",
        "required": false,
        "schema": {
          "example": "2345678108180014864",
          "type": "string"
        }
      },
      "alert_id": {
        "description": "Unique identifier for this watchlist alert.",
        "in": "path",
        "name": "alert_id",
        "required": true,
        "schema": {
          "example": "cb52c67e-2a97-4c1c-a36d-0b84cf130f23",
          "format": "uuid",
          "type": "string"
        }
      },
      "card_brand_query": {
        "description": "The brand of a card product",
        "in": "query",
        "name": "card_brand",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "card_id": {
        "description": "The unique identifier of a card",
        "in": "path",
        "name": "card_id",
        "required": true,
        "schema": {
          "example": "138f9df1-e5e2-45b5-8ef4-7d197da0cce3",
          "format": "uuid",
          "type": "string"
        }
      },
      "card_product_id": {
        "description": "The unique identifier of a cards product",
        "in": "path",
        "name": "card_product_id",
        "required": true,
        "schema": {
          "example": "50c0a089-ca81-4601-b735-aa1baa7120df",
          "format": "uuid",
          "type": "string"
        }
      },
      "card_product_id_query": {
        "description": "The unique identifier of a cards product",
        "in": "query",
        "name": "card_product_id",
        "required": false,
        "schema": {
          "example": "a96e06b0-38c1-4c8c-8ef9-bd87cd4496a0",
          "format": "uuid",
          "type": "string"
        }
      },
      "card_status_query": {
        "description": "The status of a card",
        "in": "query",
        "name": "card_status",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/card_status"
        }
      },
      "card_type_query": {
        "description": "Indicates the type of card",
        "in": "query",
        "name": "card_type",
        "required": false,
        "schema": {
          "enum": [
            "DEBIT"
          ],
          "type": "string"
        }
      },
      "connect_id": {
        "description": "Connect ID of the account associate with the account entity",
        "in": "path",
        "name": "connect_id",
        "required": true,
        "schema": {
          "example": "97b7b651-6f91-4848-a381-d29eca6c3732",
          "format": "uuid",
          "type": "string"
        }
      },
      "customer_id_path": {
        "description": "The customer's unique identifier",
        "in": "path",
        "name": "customer_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/customer_id"
        }
      },
      "customer_id_query": {
        "description": "The unique identifier for a customer",
        "in": "query",
        "name": "customer_id",
        "required": false,
        "schema": {
          "example": "f52c54ba-159e-4628-b200-a180a642e506",
          "format": "uuid",
          "type": "string"
        }
      },
      "customer_id_query_array": {
        "description": "A list of customer unique identifiers",
        "explode": false,
        "in": "query",
        "name": "customer_id",
        "required": false,
        "schema": {
          "items": {
            "$ref": "#/components/schemas/customer_id"
          },
          "type": "array"
        },
        "style": "form"
      },
      "customer_id_query_one": {
        "description": "The customer's unique identifier",
        "in": "query",
        "name": "customer_id",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/customer_id"
        }
      },
      "deposit_id": {
        "description": "ID of a deposit for a remote deposit capture",
        "in": "path",
        "name": "deposit_id",
        "required": true,
        "schema": {
          "example": "c5cb14f3-f577-4402-845a-b094621863f8",
          "format": "uuid",
          "type": "string"
        }
      },
      "document_id": {
        "description": "Document ID",
        "in": "path",
        "name": "document_id",
        "required": true,
        "schema": {
          "example": "6e2cd755-b1ea-4386-9273-6f8dec6a638f",
          "format": "uuid",
          "type": "string"
        }
      },
      "email": {
        "in": "query",
        "name": "email",
        "required": false,
        "schema": {
          "description": "Only return resources where the email field matches the specified string. Any * characters in the string are wildcards, and match any characters.",
          "example": "john.doe@example.com",
          "type": "string"
        }
      },
      "emboss_name_query": {
        "description": "emboss name",
        "in": "query",
        "name": "emboss_name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "employment_id": {
        "description": "Employment ID",
        "in": "path",
        "name": "employment_id",
        "required": true,
        "schema": {
          "example": "31934161-bb7c-4736-b74a-2938759585d5",
          "format": "uuid",
          "type": "string"
        }
      },
      "execution_date": {
        "description": "Execution Date",
        "in": "query",
        "name": "ACH execution date",
        "required": true,
        "schema": {
          "example": "Tue Jun 29 2021 03:30:17 GMT+0000 (Coordinated Universal Time)",
          "format": "date",
          "type": "string"
        }
      },
      "expiration_date_query": {
        "description": "The date representing when the card would expire at",
        "in": "query",
        "name": "expiration_date",
        "required": false,
        "schema": {
          "example": "2006-01-02",
          "format": "date",
          "type": "string"
        }
      },
      "external_account_id": {
        "description": "External Account ID",
        "in": "path",
        "name": "external_account_id",
        "required": true,
        "schema": {
          "example": "6999c81a-38a0-4cdd-ab34-3f15b7f67121",
          "format": "uuid",
          "type": "string"
        }
      },
      "first_name": {
        "in": "query",
        "name": "first_name",
        "required": false,
        "schema": {
          "description": "Only return resources where the first_name field matches the specified string. Any * characters in the string are wildcards, and match any characters.",
          "example": "Alice",
          "type": "string"
        }
      },
      "form_query": {
        "description": "The format of the card",
        "in": "query",
        "name": "form",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/form"
        }
      },
      "image_id": {
        "description": "ID of an image uploaded for a remote deposit capture",
        "in": "path",
        "name": "image_id",
        "required": true,
        "schema": {
          "example": "433a9970-3db1-4abc-a8c2-c61125dda9f8",
          "format": "uuid",
          "type": "string"
        }
      },
      "include_history": {
        "description": "If true, include old (inactive) records as well",
        "in": "query",
        "name": "include_history",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "include_history1": {
        "description": "If true, include old (inactive) records as well",
        "in": "query",
        "name": "include_history",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "last_four_query": {
        "description": "The last 4 digits of the card PAN",
        "in": "query",
        "name": "last_four",
        "required": false,
        "schema": {
          "example": "1234",
          "pattern": "^\\d{4}$",
          "type": "string"
        }
      },
      "last_name": {
        "in": "query",
        "name": "last_name",
        "required": false,
        "schema": {
          "description": "Only return resources where the last_name field matches the specified string. Any * characters in the string are wildcards, and match any characters.",
          "example": "Smith",
          "type": "string"
        }
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "default": 100,
          "description": "Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.\n",
          "example": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "mfa_token": {
        "description": "Multi-Factor Authentication Token",
        "in": "header",
        "name": "mfa_token",
        "schema": {
          "example": 11982,
          "pattern": "^\\d{4,8}$",
          "type": "string",
          "writeOnly": true
        }
      },
      "page_token": {
        "in": "query",
        "name": "page_token",
        "required": false,
        "schema": {
          "description": "Optional pagination token to be provided to retrieve subsequent pages, returned from previous get",
          "example": "53ddivr7tx",
          "type": "string"
        }
      },
      "payment_id": {
        "description": "Payment ID",
        "in": "path",
        "name": "payment_id",
        "required": true,
        "schema": {
          "example": "15bb63ab-376a-4d85-ba08-37c832f7d8c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "phone_number": {
        "in": "query",
        "name": "phone_number",
        "required": false,
        "schema": {
          "description": "Only return resources where the phone_number field matches the specified string. Phone numbers use the E.164 format e.g. +19178675309. Any * characters in the string are wildcards, and match any characters.",
          "example": "+12065550100",
          "type": "string"
        }
      },
      "postal_code_query": {
        "description": "The postal code of a card user",
        "in": "query",
        "name": "postal_code",
        "required": false,
        "schema": {
          "example": 57149,
          "type": "string"
        }
      },
      "reconciliation_id": {
        "description": "Reconciliation id",
        "in": "path",
        "name": "reconciliation_id",
        "required": true,
        "schema": {
          "example": "a520da72-f701-4afa-9f1c-e91534eb7b28",
          "format": "uuid",
          "type": "string"
        }
      },
      "relationship_id": {
        "description": "Relationship ID of the account associate with the account entity",
        "in": "path",
        "name": "relationship_id",
        "required": true,
        "schema": {
          "example": "4dfb2868-3776-4f04-9707-18dd7157b904",
          "format": "uuid",
          "type": "string"
        }
      },
      "risk_rating_id": {
        "description": "Risk Rating ID",
        "in": "path",
        "name": "risk_rating_id",
        "required": true,
        "schema": {
          "example": "141621cd-75a7-4dc1-aa3e-38df988f8a99",
          "format": "uuid",
          "type": "string"
        }
      },
      "scan_id": {
        "description": "ID of an OCR scan of a check image uploaded for a remote deposit capture",
        "in": "path",
        "name": "scan_id",
        "required": true,
        "schema": {
          "example": "a6be3548-8783-4d57-b5fc-e4cb6b1e37bf",
          "format": "uuid",
          "type": "string"
        }
      },
      "ssn_last_4": {
        "in": "query",
        "name": "ssn_last_4",
        "required": false,
        "schema": {
          "description": "Only return resources where the last 4 characters of the SSN match the specified value.",
          "example": "6789",
          "maxLength": 4,
          "minLength": 4,
          "type": "string"
        }
      },
      "status": {
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/status"
        }
      },
      "status1": {
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "description": "Only return resources where with the specified status.",
          "enum": [
            "PROSPECT",
            "ACTIVE",
            "FROZEN",
            "ESCHEAT",
            "DECEASED",
            "SANCTION",
            "DORMANT",
            "DENIED"
          ],
          "example": "ACTIVE",
          "type": "string"
        }
      },
      "subscription_id": {
        "description": "Watchlist monitoring subscription ID",
        "in": "path",
        "name": "subscription_id",
        "required": true,
        "schema": {
          "example": "e7889a75-4b15-489c-86ee-2d5f149bf31b",
          "format": "uuid",
          "type": "string"
        }
      },
      "tenant": {
        "in": "query",
        "name": "tenant",
        "required": false,
        "schema": {
          "description": "Only return resources owned by the specified tenant",
          "example": "2_3",
          "pattern": "^(\\d{1,}|\\*)_(\\d{1,}|\\*)$",
          "type": "string"
        }
      },
      "vendor_id": {
        "description": "Vendor ID",
        "in": "path",
        "name": "vendor_id",
        "required": true,
        "schema": {
          "format": "string",
          "type": "string"
        }
      },
      "verification_id": {
        "description": "Verification ID",
        "in": "path",
        "name": "verification_id",
        "required": true,
        "schema": {
          "example": "dbd2f3e3-4f12-4ed0-9355-57e759b8ae92",
          "format": "uuid",
          "type": "string"
        }
      },
      "webhook_id": {
        "description": "The unique identifier of a webhook",
        "in": "path",
        "name": "webhook_id",
        "required": true,
        "schema": {
          "example": "5c44a81e-e415-48b7-a850-752e83af03c7",
          "format": "uuid",
          "type": "string"
        }
      },
      "webhook_id1": {
        "description": "Webhook ID",
        "in": "path",
        "name": "webhook_id",
        "required": true,
        "schema": {
          "example": "f3d44ead-7d09-429d-9e4e-de21fa09fcdf",
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "responses": {
      "account_closed": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Account has been closed"
      },
      "account_locked": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Account has been locked"
      },
      "already_exists": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Resource already exists error"
      },
      "bad_request": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "BadRequest"
      },
      "cannot_reverse": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Transaction cannot be reversed"
      },
      "counterparty_account_closed": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Counterparty account has been closed"
      },
      "counterparty_account_locked": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Counterparty account has been locked"
      },
      "currency_not_supported": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Currency not supported"
      },
      "customer_locked": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Customer has been locked"
      },
      "delete_response": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/delete_response"
            }
          }
        },
        "description": "Resource has been deleted"
      },
      "execution_date_in_the_future": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Execution date in the future"
      },
      "execution_date_in_the_past": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Execution date in the past"
      },
      "forbidden": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Forbidden error"
      },
      "insufficient_funds": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Insufficient funds"
      },
      "internal_server_error": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Internal server error"
      },
      "not_found": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Resource not found"
      },
      "recurrence_not_supported": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Recurrence not supported"
      },
      "unauthorized": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Unauthorized"
      },
      "unprocessible_entity": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Unprocessible entity request response"
      }
    },
    "schemas": {
      "a2a_transfer": {
        "properties": {
          "amount": {
            "description": "amount in ISO 4217 minor currency units",
            "example": 251,
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "description": "Account currency or account settlement currency. ISO 4217 alphabetic currency code.",
            "example": "XPF",
            "type": "string"
          },
          "dc_sign": {
            "$ref": "#/components/schemas/dc_sign_type"
          },
          "execution_date": {
            "description": "Execution date of the transfer. Default is the current date",
            "format": "date",
            "type": "string"
          },
          "is_overwrite_checks": {
            "description": "Flag to indicate the overwrite checks",
            "readOnly": true,
            "type": "boolean"
          },
          "payment_id": {
            "description": "Payment ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "recurring_data": {
            "$ref": "#/components/schemas/recurrence_data"
          },
          "reference_info": {
            "description": "User specified information of this transfer",
            "maxLength": 80,
            "type": "string"
          },
          "source_account": {
            "description": "Account ID that is instructing the transfer",
            "format": "uuid",
            "type": "string"
          },
          "target_account": {
            "description": "Account ID that is receiving the transfer",
            "format": "uuid",
            "type": "string"
          },
          "transfer_reversal": {
            "description": "If transfer reversal happens, both original and reversal transfers will be set for the cross reference",
            "properties": {
              "id": {
                "description": "Payment ID of the corresponding reversal/original transfer",
                "format": "uuid",
                "type": "string"
              },
              "is_reversal": {
                "description": "True if transfer reversal, false otherwise the original transfer",
                "type": "boolean"
              }
            },
            "readOnly": true,
            "type": "object"
          }
        },
        "required": [
          "source_account",
          "target_account",
          "amount",
          "currency",
          "dc_sign"
        ],
        "type": "object"
      },
      "a2a_transfer_list": {
        "allOf": [
          {
            "properties": {
              "a2a_transfers": {
                "description": "Array of account to account transfers",
                "items": {
                  "$ref": "#/components/schemas/a2a_transfer"
                },
                "type": "array"
              }
            },
            "required": [
              "a2a_transfers"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "account": {
        "description": "Account",
        "properties": {
          "access_status": {
            "description": "Access status for account. Default ACTIVE",
            "enum": [
              "ACTIVE",
              "FROZEN"
            ],
            "type": "string"
          },
          "account_number": {
            "description": "Account number",
            "example": "2345678108180014864",
            "type": "string"
          },
          "account_template_id": {
            "description": "Account template ID",
            "format": "uuid",
            "type": "string"
          },
          "account_type": {
            "$ref": "#/components/schemas/account_type"
          },
          "balances": {
            "description": "A list of balances for account based on different type",
            "items": {
              "$ref": "#/components/schemas/balance"
            },
            "readOnly": true,
            "type": "array"
          },
          "currency": {
            "description": "Account currency or account settlement currency. ISO 4217 alphabetic currency code. Default USD",
            "example": "KMF",
            "type": "string"
          },
          "exchange_rate_type": {
            "description": "Exchange rate type",
            "example": "M, INTERBANK, CUST",
            "type": "string"
          },
          "iban": {
            "description": "International bank account number",
            "type": "string"
          },
          "id": {
            "description": "Account ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_account_pool": {
            "description": "Account is investment (variable balance) account or a multi-balance account pool. Default false",
            "type": "boolean"
          },
          "recent_transactions": {
            "description": "The most recent 10 transactions of the account",
            "items": {
              "$ref": "#/components/schemas/transaction"
            },
            "readOnly": true,
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "swift_code": {
            "description": "SWIFT code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "account_address": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "readOnly": true
          },
          "address_id": {
            "description": "Address unique ID",
            "type": "integer"
          },
          "connect_id": {
            "description": "Connection ID of the account",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "Customer ID",
            "format": "uuid",
            "type": "string"
          },
          "document_type_id": {
            "description": "Document",
            "type": "integer"
          },
          "duplicate": {
            "description": "Indicator of duplicate of the address",
            "type": "boolean"
          }
        },
        "title": "Account Address",
        "type": "object"
      },
      "account_creation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/account"
          },
          {
            "properties": {
              "aliases": {
                "description": "A list of the aliases for account. Account alias is the account number of different balance types to link to the same account ID",
                "items": {
                  "$ref": "#/components/schemas/alias"
                },
                "type": "array"
              },
              "relationships": {
                "description": "List of the relationship for this account to the parties",
                "items": {
                  "$ref": "#/components/schemas/relationship"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "account_id": {
        "example": "814a4df8-05ec-4ae6-8105-d1dd951291ef",
        "format": "uuid",
        "type": "string"
      },
      "account_identifiers": {
        "properties": {
          "iban": {
            "description": "The IBAN of the account",
            "example": "TN7700521720210600127090",
            "type": "string"
          },
          "number": {
            "description": "The account number",
            "example": 60678014,
            "type": "string"
          }
        },
        "required": [
          "number",
          "iban"
        ],
        "title": "Identifiers for the account",
        "type": "object"
      },
      "account_list": {
        "allOf": [
          {
            "properties": {
              "accounts": {
                "description": "Array of Accounts",
                "items": {
                  "$ref": "#/components/schemas/account"
                },
                "type": "array"
              }
            },
            "required": [
              "accounts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "account_routing": {
        "properties": {
          "ach_routing_number": {
            "description": "The routing number used for US ACH payments. Only appears if `bank_countries` contains `US`.\n",
            "example": "756392185",
            "type": "string"
          },
          "bank_countries": {
            "description": "The countries that this bank operates the account in",
            "items": {
              "enum": [
                "US",
                "CA"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "bank_name": {
            "description": "The name of the bank managing the account",
            "example": "Chase",
            "type": "string"
          },
          "eft_branch_number": {
            "description": "The branch number used for EFT payments, identifying a branch at a Canadian bank. Only appears if `bank_countries` contains `CA`.\n",
            "example": "01140",
            "type": "string"
          },
          "eft_institution_number": {
            "description": "The institution number used for EFT payments, identifying a Canadian bank. Only appears if `bank_countries` contains `CA`.\n",
            "example": "021",
            "type": "string"
          },
          "swift_code": {
            "description": "The SWIFT code for the bank",
            "example": "CHASUS3AXXX",
            "type": "string"
          },
          "wire_routing_number": {
            "description": "The routing number used for domestic wire payments. Only appears if `bank_countries` contains `US`.\n",
            "example": "756392185",
            "type": "string"
          }
        },
        "required": [
          "bank_name",
          "bank_countries",
          "swift_code"
        ],
        "title": "Routing information for the account",
        "type": "object"
      },
      "account_type": {
        "enum": [
          "SAVING",
          "CHECKING",
          "LINE_OF_CREDIT"
        ],
        "title": "Account Type",
        "type": "string"
      },
      "account_verification": {
        "discriminator": {
          "mapping": {
            "PLAID": "#/components/schemas/plaid_account_verification"
          },
          "propertyName": "vendor"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/plaid_account_verification"
          }
        ],
        "title": "Information about the account verification process",
        "type": "object"
      },
      "ach_outgoing": {
        "description": "Represents an outgoing ACH",
        "properties": {
          "account_id": {
            "description": "ID of the source account",
            "example": "40033956-38c2-4cbb-8ef9-41b13036255c",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount to transfer in ISO 4217 minor currency units",
            "example": 920,
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "description": "ISO 4217 alphabetic currency code of the transfer amount",
            "example": "LKR",
            "type": "string"
          },
          "execution_date": {
            "description": "The date the transfer executes (default today)",
            "example": "Fri Oct 15 2021 20:01:50 GMT+0000 (Coordinated Universal Time)",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "Outgoing ACH",
            "example": "bf595cdf-8107-4777-a04e-07ae20e3233f",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "no_fraud_check": {
            "description": "Do not perform a fraud check",
            "example": false,
            "type": "boolean"
          },
          "overwrite_checks": {
            "description": "Overwrite non mandatory posting checks. Mandatory checks will still be processed",
            "example": false,
            "type": "boolean"
          },
          "recipient_name": {
            "description": "The name of the recipient",
            "example": "Austin Connelly",
            "type": "string"
          },
          "recurring_data": {
            "$ref": "#/components/schemas/recurrence_data"
          },
          "reference_info": {
            "description": "Reference information for the payment",
            "example": "Itaque quas nam aut optio corrupti ullam molestias.",
            "maxLength": 80,
            "type": "string"
          },
          "target_account_no": {
            "description": "The account number of the destination account",
            "example": 1967999353743836,
            "maxLength": 17,
            "pattern": "^\\d{1,17}$",
            "type": "string"
          },
          "target_account_routing": {
            "description": "The routing number of the destination account",
            "example": 457149361,
            "maxLength": 9,
            "minLength": 9,
            "pattern": "^\\d{9}$",
            "type": "string"
          },
          "target_bank_country": {
            "default": "US",
            "description": "The ISO-3166-1 Alpha-2 country code in which the target account is registered (default US)",
            "example": "IE",
            "type": "string"
          },
          "transaction_direction": {
            "description": "The type of transaction (DEBIT/CREDIT) for originating account",
            "enum": [
              "DEBIT",
              "CREDIT"
            ],
            "example": "DEBIT",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "currency",
          "target_account_no",
          "target_account_routing",
          "target_bank_country",
          "recipient_name"
        ],
        "title": "Outgoing ACH",
        "type": "object"
      },
      "ach_outgoing_list": {
        "allOf": [
          {
            "properties": {
              "ach_outgoings": {
                "description": "Array of ACH",
                "items": {
                  "$ref": "#/components/schemas/ach_outgoing"
                },
                "type": "array"
              }
            },
            "required": [
              "ach_outgoings"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "add_vendor_account_failure": {
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/add_vendor_accounts_error_reason"
          },
          "reason_description": {
            "description": "A human-readable message describing the reason for the failure.",
            "type": "string"
          },
          "vendor_account_id": {
            "description": "The vendor account ID for the account that failed. For Plaid, this is an `account_id`.\n",
            "example": "blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo",
            "type": "string"
          },
          "vendor_error_message": {
            "description": "The display_message returned by the vendor. Only returned if reason is set to `PROVIDER_ERROR`. For Plaid, this is the `display_message`.\n",
            "type": "string"
          },
          "vendor_request_id": {
            "description": "A unique identifier for the request from the vendor, which can be used for troubleshooting. Only returned if reason is set to `PROVIDER_ERROR`.\n",
            "type": "string"
          }
        },
        "required": [
          "vendor_account_id",
          "reason",
          "reason_description"
        ],
        "type": "object"
      },
      "add_vendor_accounts_error_reason": {
        "description": "A machine-readable code describing the reason for the failure.",
        "enum": [
          "FAILED_VERIFICATION",
          "UNSUPPORTED_ACCOUNT_TYPE",
          "DUPLICATE_ACCOUNT",
          "PROVIDER_ERROR"
        ],
        "type": "string"
      },
      "add_vendor_accounts_request": {
        "properties": {
          "customer_id": {
            "description": "The identifier for the customer associated with these accounts.",
            "example": "670149b1-b72e-4b7b-9aa2-8de41cbcaafd",
            "format": "uuid",
            "type": "string"
          },
          "customer_type": {
            "description": "The type of customer.",
            "enum": [
              "PERSONAL",
              "BUSINESS"
            ],
            "type": "string"
          },
          "vendor": {
            "$ref": "#/components/schemas/external_account_vendor_values"
          },
          "vendor_access_token": {
            "description": "The token provided to link external accounts. For Plaid, this is their `access_token`.\n",
            "example": "access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6",
            "minLength": 1,
            "type": "string"
          },
          "vendor_account_ids": {
            "description": "The list of vendor account IDs that the customer chose to link. For Plaid, these are `account_id`s.\n",
            "items": {
              "description": "The Plaid account_id.",
              "example": "blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo",
              "minLength": 1,
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "customer_id",
          "customer_type",
          "vendor",
          "vendor_account_ids",
          "vendor_access_token"
        ],
        "type": "object"
      },
      "add_vendor_accounts_response": {
        "properties": {
          "added_accounts": {
            "items": {
              "$ref": "#/components/schemas/external_account",
              "description": "Information about a successfully added external account."
            },
            "type": "array"
          },
          "failed_accounts": {
            "items": {
              "$ref": "#/components/schemas/add_vendor_account_failure",
              "description": "Information about an external account that could not be added."
            },
            "type": "array"
          }
        },
        "required": [
          "added_accounts",
          "failed_accounts"
        ],
        "type": "object"
      },
      "address": {
        "properties": {
          "address_line_1": {
            "description": "Street address line 1",
            "example": "71215 Cesar Club",
            "type": "string"
          },
          "address_line_2": {
            "description": "String address line 2",
            "example": "Apt. 115",
            "type": "string"
          },
          "city": {
            "description": "City",
            "example": "Port Jared",
            "type": "string"
          },
          "country_code": {
            "description": "ISO-3166-1 Alpha-2 country code",
            "example": "AL",
            "type": "string"
          },
          "default_address_flg": {
            "description": "Denotes whether this address is the person's default address",
            "type": "boolean"
          },
          "id": {
            "description": "Address unique identifier",
            "example": "33990e21-123a-4809-b930-b0de181d71f6",
            "format": "uuid",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code",
            "example": "28620",
            "type": "string"
          },
          "state": {
            "description": "State, region, province, or prefecture",
            "example": "OH",
            "type": "string"
          },
          "type": {
            "description": "type of address",
            "enum": [
              "home",
              "work",
              "temporary",
              "vacation"
            ],
            "example": "work",
            "type": "string"
          }
        },
        "required": [
          "default_address_flg",
          "address_line_1",
          "city",
          "state",
          "country_code",
          "postal_code"
        ],
        "type": "object"
      },
      "address_list": {
        "allOf": [
          {
            "properties": {
              "addresses": {
                "description": "Array of addresses",
                "items": {
                  "$ref": "#/components/schemas/address"
                },
                "type": "array"
              }
            },
            "required": [
              "addresses"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "address1": {
        "properties": {
          "address_line_1": {
            "description": "Street address line 1",
            "example": "12071 Eliezer Neck",
            "type": "string"
          },
          "address_line_2": {
            "description": "String address line 2",
            "example": "Apt. 302",
            "type": "string"
          },
          "city": {
            "description": "City",
            "example": "Lake Lexus",
            "type": "string"
          },
          "country_code": {
            "description": "ISO-3166-1 Alpha-2 country code",
            "example": "CU",
            "type": "string"
          },
          "id": {
            "description": "Address unique identifier",
            "example": "23f76f4a-22fb-4ecf-8ede-5f20c9174ec0",
            "format": "uuid",
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code",
            "example": 56162,
            "type": "string"
          },
          "state": {
            "description": "State, region, province, or prefecture",
            "example": "AL",
            "type": "string"
          },
          "type": {
            "description": "type of address",
            "enum": [
              "home",
              "work",
              "temporary",
              "vacation"
            ],
            "example": "work",
            "type": "string"
          }
        },
        "required": [
          "address_line_1",
          "city",
          "state",
          "country_code",
          "postal_code"
        ],
        "type": "object"
      },
      "alias": {
        "properties": {
          "alias_info": {
            "description": "Additional information for the alias",
            "format": "byte",
            "type": "string"
          },
          "alias_name": {
            "description": "Alias name",
            "type": "string"
          },
          "alias_source": {
            "description": "Alias source",
            "type": "string"
          },
          "alias_type": {
            "description": "Alias type",
            "type": "string"
          },
          "id": {
            "description": "Alias ID",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Account Alias",
        "type": "object"
      },
      "auth_request_model": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_options": {
            "$ref": "#/components/schemas/card_options"
          },
          "card_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          },
          "cash_back_amount": {
            "type": "number"
          },
          "is_pre_auth": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "pin": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "card_token",
          "mid"
        ],
        "type": "object"
      },
      "authorization_advice_model": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "original_transaction_token"
        ],
        "type": "object"
      },
      "balance": {
        "properties": {
          "balance": {
            "description": "balance in ISO 4217 minor currency units",
            "example": 868,
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/balance_type"
          }
        },
        "required": [
          "type",
          "balance"
        ],
        "type": "object"
      },
      "balance_inquiry_request_model": {
        "properties": {
          "account_type": {
            "enum": [
              "checking",
              "savings",
              "credit"
            ],
            "type": "string"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_type",
          "card_acceptor",
          "card_token",
          "mid"
        ],
        "type": "object"
      },
      "balance_type": {
        "description": "The type of the balance. GET operation default is for all types",
        "enum": [
          "ACCOUNT_BALANCE",
          "AVAILABLE_BALANCE"
        ],
        "type": "string"
      },
      "base_account_verification": {
        "properties": {
          "creation_time": {
            "example": "Mon Aug 09 2021 22:49:59 GMT+0000 (Coordinated Universal Time)",
            "format": "date-time",
            "type": "string"
          },
          "last_updated_time": {
            "example": "Thu Feb 04 2021 08:51:51 GMT+0000 (Coordinated Universal Time)",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The status of verification",
            "enum": [
              "VERIFIED"
            ],
            "type": "string"
          },
          "vendor": {
            "description": "The vendor used for verifying the account",
            "enum": [
              "PLAID"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "vendor",
          "creation_time",
          "last_updated_time"
        ],
        "title": "Information about account verification",
        "type": "object"
      },
      "base_card": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_format"
          },
          {
            "properties": {
              "account_id": {
                "description": "The ID of the account to which the card will be linked",
                "example": "dc57d42c-5dfd-422a-a3ef-516a23d23273",
                "format": "uuid",
                "type": "string"
              },
              "card_product_id": {
                "description": "The card product to which the card is attached",
                "example": "2ec3ecfd-4324-4851-aa97-11cf8238b240",
                "format": "uuid",
                "type": "string"
              },
              "creation_time": {
                "description": "The timestamp representing when the card issuance request was made",
                "example": "Fri Mar 26 2021 16:31:03 GMT+0000 (Coordinated Universal Time)",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "customer_id": {
                "description": "The ID of the customer to whom the card will be issued",
                "example": "4552707d-5aba-4115-8004-5baa0217900b",
                "format": "uuid",
                "type": "string"
              },
              "emboss_name": {
                "$ref": "#/components/schemas/emboss_name"
              },
              "expiration_month": {
                "example": "06",
                "pattern": "^\\d{2}$",
                "readOnly": true,
                "type": "string"
              },
              "expiration_time": {
                "description": "The timestamp representing when the card would expire at",
                "example": "Thu Oct 22 2020 20:53:40 GMT+0000 (Coordinated Universal Time)",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "expiration_year": {
                "example": "25",
                "pattern": "^\\d{2}$",
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "Card ID",
                "example": "4347f030-067e-44b5-9236-d63d3c9f234e",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "last_four": {
                "description": "The last 4 digits of the card PAN",
                "example": "1234",
                "pattern": "^\\d{4}$",
                "readOnly": true,
                "type": "string"
              },
              "last_modified_time": {
                "description": "The timestamp representing when the card was last modified at",
                "example": "Mon Jul 12 2021 19:56:18 GMT+0000 (Coordinated Universal Time)",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/card_metadata"
              },
              "network": {
                "description": "The network on which the card transacts",
                "enum": [
                  "MASTERCARD"
                ],
                "readOnly": true,
                "type": "string"
              },
              "reissue_reason": {
                "description": "The reason the card needs to be reissued",
                "enum": [
                  "EXPIRATION",
                  "LOST",
                  "STOLEN",
                  "DAMAGED",
                  "NAME_CHANGE",
                  "VIRTUAL_TO_PHYSICAL"
                ],
                "type": "string"
              },
              "reissued_from_id": {
                "description": "If this card was issued as a reissuance of another card, this ID refers to the card was replaced",
                "example": "7ca3b932-d1d7-47eb-a8c2-5ead91ca7898",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "reissued_to_id": {
                "description": "If this card was reissued, this ID refers to the card that replaced it",
                "example": "1d8b4909-fc8d-4a0f-87d0-63a38e2fdfa0",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "type": {
                "description": "Indicates the type of card to be issued",
                "enum": [
                  "DEBIT"
                ],
                "type": "string"
              }
            },
            "required": [
              "form"
            ],
            "type": "object"
          }
        ]
      },
      "base_person": {
        "properties": {
          "accounts": {
            "description": "List of accounts that belong to the customer",
            "items": {
              "$ref": "#/components/schemas/account"
            },
            "readOnly": true,
            "type": "array"
          },
          "creation_time": {
            "example": "Tue Oct 12 2021 10:34:18 GMT+0000 (Coordinated Universal Time)",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "devices": {
            "description": "List of the Customer's associated devices",
            "items": {
              "$ref": "#/components/schemas/device"
            },
            "type": "array"
          },
          "email": {
            "description": "Customer's email",
            "example": "Gabe_Crooks84@yahoo.com",
            "type": "string"
          },
          "id": {
            "description": "Customer unique identifier",
            "example": "d8980d95-47e1-4c6e-9a7e-9055144909fd",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "kyc_status": {
            "$ref": "#/components/schemas/customer_kyc_status",
            "readOnly": true
          },
          "last_updated_time": {
            "example": "Thu Jul 15 2021 08:59:12 GMT+0000 (Coordinated Universal Time)",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "legal_address": {
            "$ref": "#/components/schemas/address",
            "description": "Customer's legal address"
          },
          "middle_name": {
            "description": "Customer's middle name",
            "example": "b",
            "type": "string"
          },
          "phone_number": {
            "description": "Customer's mobile phone number with country code in E.164 format",
            "example": 84823156550,
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          },
          "related_customers": {
            "description": "Customer's relationships with other accounts eg. guardian",
            "items": {
              "$ref": "#/components/schemas/relationship1"
            },
            "type": "array"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/address",
            "description": "Customer's shipping address"
          },
          "ssn": {
            "description": "Customer's full tax ID eg SSN formatted with hyphens. This optional parameter is required when running KYC on a customer. Input must match the pattern ^\\d{3}-\\d{2}-\\d{4}$. The response contains the last 4 digits only (e.g. 6789).",
            "example": "415-26-7707",
            "type": "string"
          }
        },
        "type": "object"
      },
      "billing_address": {
        "properties": {
          "address": {
            "type": "string"
          },
          "compressed_zip": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_acceptor_model": {
        "example": {
          "address": "address",
          "city": "city",
          "country": "country",
          "ecommerce_security_level_indicator": "ecommerce_security_level_indicator",
          "mcc": "mcc",
          "name": "name",
          "partial_approval_capable": false,
          "state": "state",
          "zip": "zip"
        },
        "properties": {
          "address": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "city": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "ecommerce_security_level_indicator": {
            "type": "string"
          },
          "mcc": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partial_approval_capable": {
            "default": false,
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_activation": {
        "properties": {
          "activation_code": {
            "description": "An activation code provided with the card required to prove possession of the card",
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_change": {
        "description": "Card change details",
        "properties": {
          "change_type": {
            "$ref": "#/components/schemas/change_type"
          },
          "channel": {
            "$ref": "#/components/schemas/change_channel"
          },
          "id": {
            "description": "Unique token",
            "example": "00dd8cab-979b-4224-ba02-e69603d96275",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          },
          "state_new": {
            "$ref": "#/components/schemas/card_change_state",
            "description": "New card state"
          },
          "state_old": {
            "$ref": "#/components/schemas/card_change_state",
            "description": "Previous card state"
          },
          "updated_at": {
            "description": "Date of change",
            "example": "Sun Sep 12 2021 12:37:29 GMT+0000 (Coordinated Universal Time)",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "updated_by": {
            "description": "ID of user who initiated the change, if done via Synctera Admin System",
            "type": "string"
          }
        },
        "required": [
          "id",
          "change_type",
          "state_old",
          "state_new",
          "channel",
          "updated_at",
          "updated_by"
        ],
        "type": "object"
      },
      "card_change_state": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/card_fulfillment_status"
          },
          {
            "$ref": "#/components/schemas/card_status"
          }
        ]
      },
      "card_changes_list": {
        "allOf": [
          {
            "properties": {
              "changes": {
                "description": "List of changes in descending chronological order",
                "items": {
                  "$ref": "#/components/schemas/card_change"
                },
                "type": "array"
              }
            },
            "required": [
              "changes"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_edit_request": {
        "properties": {
          "card_status": {
            "$ref": "#/components/schemas/card_status"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "metadata": {
            "$ref": "#/components/schemas/card_metadata"
          },
          "reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          },
          "shipping": {
            "$ref": "#/components/schemas/shipping"
          }
        },
        "required": [
          "card_status",
          "reason"
        ],
        "type": "object"
      },
      "card_format": {
        "properties": {
          "form": {
            "description": "PHYSICAL or VIRTUAL.",
            "enum": [
              "PHYSICAL",
              "VIRTUAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "form"
        ],
        "type": "object"
      },
      "card_fulfillment_status": {
        "description": "The status indicating the state of the card issuance",
        "enum": [
          "ISSUED",
          "ORDERED",
          "REJECTED",
          "REORDERED",
          "SHIPPED",
          "DIGITALLY_PRESENTED"
        ],
        "readOnly": true,
        "type": "string"
      },
      "card_issuance_request": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_card_issuance_request",
            "VIRTUAL": "#/components/schemas/virtual_card_issuance_request"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/physical_card_issuance_request"
          },
          {
            "$ref": "#/components/schemas/virtual_card_issuance_request"
          }
        ],
        "type": "object"
      },
      "card_list_response": {
        "allOf": [
          {
            "properties": {
              "cards": {
                "description": "Array of Cards",
                "items": {
                  "$ref": "#/components/schemas/card_response"
                },
                "type": "array"
              }
            },
            "required": [
              "cards"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional data to include in the request structured as key-value pairs",
        "type": "object"
      },
      "card_options": {
        "properties": {
          "billing_address": {
            "$ref": "#/components/schemas/billing_address"
          },
          "card_present": {
            "default": false,
            "type": "boolean"
          },
          "cvv": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "expiration": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_pin": {
        "properties": {
          "pin": {
            "description": "The new PIN",
            "type": "string"
          }
        },
        "type": "object"
      },
      "card_product": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_format"
          },
          {
            "properties": {
              "active": {
                "type": "boolean"
              },
              "id": {
                "example": "a9366c37-be91-4241-9df1-dcffbd6ffebe",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "Cards Product"
      },
      "card_product_list": {
        "allOf": [
          {
            "properties": {
              "card_products": {
                "description": "Array of Card Products",
                "items": {
                  "$ref": "#/components/schemas/card_product"
                },
                "type": "array"
              }
            },
            "required": [
              "card_products"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "card_response": {
        "discriminator": {
          "mapping": {
            "PHYSICAL": "#/components/schemas/physical_card_response",
            "VIRTUAL": "#/components/schemas/virtual_card_response"
          },
          "propertyName": "form"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/physical_card_response"
          },
          {
            "$ref": "#/components/schemas/virtual_card_response"
          }
        ]
      },
      "card_status": {
        "description": "The status indicating the card lifecycle state",
        "enum": [
          "ACTIVE",
          "UNACTIVATED",
          "SUSPENDED",
          "TERMINATED"
        ],
        "type": "string"
      },
      "card_status_object": {
        "description": "The status of the card",
        "properties": {
          "card_fulfillment_status": {
            "$ref": "#/components/schemas/card_fulfillment_status"
          },
          "card_status": {
            "$ref": "#/components/schemas/card_status"
          },
          "carrier": {
            "description": "The carrier with whom the card is shipped",
            "example": "FedEx",
            "readOnly": true,
            "type": "string"
          },
          "memo": {
            "$ref": "#/components/schemas/card_status_reason_memo"
          },
          "shipping_status": {
            "description": "The status of indicating the shipping status of the card",
            "enum": [
              "SHIPPED",
              "DELIVERED",
              "PREPARING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status_reason": {
            "$ref": "#/components/schemas/card_status_reason_code"
          },
          "tracking_number": {
            "description": "The tracking number",
            "example": "41991234567890123456",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "card_status"
        ],
        "title": "Status",
        "type": "object"
      },
      "card_status_reason_code": {
        "description": "The reason for the card status\n\nCode | Description\n--- | ---\nNEW | Card activated\nREQ | Requested by you\nINA | Dormant\nUNK | Address cannot accept mail or addressee unknown\nNEG | Negative account balance\nREV | Account under review\nSUS | Suspicious activity\nOUT | Activity outside program parameters identified\nFRD | Confirmed fraud\nMAT | Matched with an OFAC list\nLOS | Card reported lost\nCLO | Card was cloned\nCOM | Account or card was compromised\nTMP | Awaiting customer confirmation\nPRC | Initiated by Processor\nISS | Initiated by Issuer\nEXP | Card expired\nKYC | Failed KYC\nINF | Information was validated\nACT | Account activity was validated\nAUX | Initiated by a third party\nPIN | PIN try limit reached\nSTO | Card reported stolen\nADD | Address issue\nNAM | Name issue\nSSN | SSN issue\nDOB | DOB issue\nEML | Email issue\nPHO | Phone issue\nFUL | Account/fulfillment mismatch\nOTH | Other\n",
        "enum": [
          "NEW",
          "REQ",
          "INA",
          "UNK",
          "NEG",
          "REV",
          "SUS",
          "OUT",
          "FRD",
          "MAT",
          "LOS",
          "CLO",
          "COM",
          "TMP",
          "PRC",
          "ISS",
          "EXP",
          "KYC",
          "INF",
          "ACT",
          "AUX",
          "PIN",
          "STO",
          "ADD",
          "NAM",
          "SSN",
          "DOB",
          "EML",
          "PHO",
          "FUL",
          "OTH"
        ],
        "type": "string"
      },
      "card_status_reason_memo": {
        "description": "Additional details about the reason for the status change",
        "maxLength": 255,
        "type": "string"
      },
      "card_widget_url_response": {
        "description": "A URL for activate card and set pin widgets",
        "properties": {
          "url": {
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object"
      },
      "change_channel": {
        "description": "How the change was submitted",
        "enum": [
          "API",
          "ADMIN",
          "SYSTEM",
          "FRAUD"
        ],
        "type": "string"
      },
      "change_type": {
        "description": "The category of card change",
        "enum": [
          "STATUS",
          "FULFILLMENT"
        ],
        "type": "string"
      },
      "clearing_model": {
        "example": {
          "amount": 0.8008281904610115,
          "card_acceptor": {
            "address": "address",
            "city": "city",
            "country": "country",
            "ecommerce_security_level_indicator": "ecommerce_security_level_indicator",
            "mcc": "mcc",
            "name": "name",
            "partial_approval_capable": false,
            "state": "state",
            "zip": "zip"
          },
          "force_post": false,
          "is_refund": false,
          "mid": "mid",
          "network_fees": [
            {
              "amount": 1.2315135367772556,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            },
            {
              "amount": 1.2315135367772556,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            }
          ],
          "original_transaction_token": "original_transaction_token"
        },
        "properties": {
          "amount": {
            "type": "number"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "force_post": {
            "default": false,
            "type": "boolean"
          },
          "is_refund": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "original_transaction_token"
        ],
        "type": "object"
      },
      "client_token": {
        "description": "A short-lived, one-time token used for accessing client PINs/PANs",
        "properties": {
          "client_token": {
            "example": "300159f6-ad91-4a8f-be4f-822df9a312fd",
            "type": "string"
          }
        },
        "title": "Client Token",
        "type": "object"
      },
      "create_webhook_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_request"
          },
          {
            "required": [
              "name",
              "events",
              "config"
            ],
            "type": "object"
          }
        ]
      },
      "custom_headers": {
        "properties": {
          "my_header_name_1": {
            "type": "string"
          },
          "my_header_name_2": {
            "type": "string"
          },
          "my_header_name_3": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "customer": {
        "allOf": [
          {
            "properties": {
              "dob": {
                "description": "Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)",
                "example": "2000-01-01T00:00:00.000Z",
                "format": "date",
                "type": "string"
              },
              "first_name": {
                "description": "Customer's first name",
                "example": "Alfonso",
                "type": "string"
              },
              "last_name": {
                "description": "Customer's last name",
                "example": "Sporer",
                "type": "string"
              },
              "status": {
                "description": "Customer's status",
                "enum": [
                  "PROSPECT",
                  "ACTIVE",
                  "FROZEN",
                  "ESCHEAT",
                  "DECEASED",
                  "SANCTION",
                  "DORMANT",
                  "DENIED"
                ],
                "type": "string"
              }
            },
            "required": [
              "first_name",
              "last_name",
              "dob",
              "status"
            ]
          },
          {
            "$ref": "#/components/schemas/base_person"
          }
        ],
        "description": "Details of a customer",
        "title": "Customer",
        "type": "object"
      },
      "customer_id": {
        "example": "870d4fb8-6c22-4516-8675-5632217bd682",
        "format": "uuid",
        "type": "string"
      },
      "customer_in_path": {
        "discriminator": {
          "mapping": {
            "ACTIVE": "#/components/schemas/customer",
            "DECEASED": "#/components/schemas/customer",
            "DENIED": "#/components/schemas/customer",
            "DORMANT": "#/components/schemas/customer",
            "ESCHEAT": "#/components/schemas/customer",
            "FROZEN": "#/components/schemas/customer",
            "PROSPECT": "#/components/schemas/prospect",
            "SANCTION": "#/components/schemas/customer"
          },
          "propertyName": "status"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/customer"
          },
          {
            "$ref": "#/components/schemas/prospect"
          }
        ],
        "type": "object"
      },
      "customer_kyc_status": {
        "description": "Customer's KYC status",
        "enum": [
          "UNVERIFIED",
          "REVIEW",
          "PROVIDER_FAILURE",
          "ACCEPTED",
          "REJECTED"
        ],
        "type": "string"
      },
      "customer_list": {
        "allOf": [
          {
            "properties": {
              "customers": {
                "description": "Array of Customers",
                "items": {
                  "$ref": "#/components/schemas/customer_in_path"
                },
                "type": "array"
              }
            },
            "required": [
              "customers"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "customer_verification": {
        "properties": {
          "customer_consent": {
            "description": "Whether this customer has consented to a KYC check\n",
            "type": "boolean"
          },
          "customer_ip_address": {
            "description": "IP address",
            "example": "33.191.230.63",
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "verification_type": {
            "items": {
              "$ref": "#/components/schemas/verification_type"
            },
            "type": "array"
          }
        },
        "required": [
          "verification_type",
          "customer_consent"
        ],
        "title": "PersonVerification",
        "type": "object"
      },
      "customer_verification_result": {
        "description": "Verification result",
        "properties": {
          "id": {
            "description": "Unique ID for this verification result",
            "example": "26aac5e3-ef08-491b-a2a6-31870331f702",
            "format": "uuid",
            "type": "string"
          },
          "issues": {
            "description": "List of potential problems found. These are subject to change.\n",
            "items": {
              "example": "R186: Global Watchlist sources selected are correlated with the input identifiers",
              "type": "string"
            },
            "type": "array"
          },
          "raw_response": {
            "$ref": "#/components/schemas/raw_response"
          },
          "result": {
            "description": "The determination of this KYC run",
            "enum": [
              "ACCEPTED",
              "REJECTED",
              "REVIEW",
              "PROVIDER_FAILURE"
            ],
            "example": "ACCEPTED",
            "type": "string"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/vendor_info"
          },
          "verification_time": {
            "description": "The date on which the KYC run was completed",
            "format": "date-time",
            "type": "string"
          },
          "verification_type": {
            "$ref": "#/components/schemas/verification_type"
          }
        },
        "required": [
          "verification_type",
          "result",
          "verification_time"
        ],
        "title": "CustomerVerificationResult",
        "type": "object"
      },
      "customer_verification_result_list": {
        "allOf": [
          {
            "properties": {
              "verifications": {
                "description": "Array of Verification results",
                "items": {
                  "$ref": "#/components/schemas/customer_verification_result"
                },
                "type": "array"
              }
            },
            "required": [
              "verifications"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "customer_verify_response": {
        "allOf": [
          {
            "properties": {
              "kyc_status": {
                "$ref": "#/components/schemas/customer_kyc_status"
              },
              "verifications": {
                "description": "Array of Verification results",
                "items": {
                  "$ref": "#/components/schemas/customer_verification_result"
                },
                "type": "array"
              }
            },
            "required": [
              "kyc_status",
              "verifications"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "dc_sign_type": {
        "description": "Indication of debit or credit",
        "enum": [
          "DEBIT",
          "CREDIT"
        ],
        "type": "string"
      },
      "delete_response": {
        "description": "Deleted object information",
        "properties": {
          "id": {
            "description": "Object ID",
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "description": "The resource name",
            "type": "string"
          }
        },
        "title": "Deleted Object",
        "type": "object"
      },
      "deposit": {
        "description": "Deposit using remote deposit capture",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "d2jb2d6svybmux",
            "readOnly": true,
            "type": "string"
          },
          "back_image_id": {
            "description": "ID of the image of the back of the check",
            "example": "c2568ee4-1885-4dc7-8515-776a04f754d0",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "check_amount": {
            "description": "Amount on check in ISO 4217 minor currency units",
            "example": 625,
            "readOnly": true,
            "type": "integer"
          },
          "check_currency": {
            "description": "ISO 4217 currency code for the check amount",
            "example": "USD",
            "readOnly": true,
            "type": "string"
          },
          "date_processed": {
            "description": "Date the deposit was processed, in RFC 3339 format",
            "example": "2019-01-02T03:04:05.678Z",
            "readOnly": true,
            "type": "string"
          },
          "date_submitted": {
            "description": "Date the deposit was submitted, in RFC 3339 format",
            "example": "2019-01-02T03:04:05.678Z",
            "readOnly": true,
            "type": "string"
          },
          "deposit_amount": {
            "description": "Amount deposited in ISO 4217 minor currency units",
            "example": 7703,
            "readOnly": true,
            "type": "integer"
          },
          "deposit_currency": {
            "description": "ISO 4217 currency code for the deposit amount",
            "example": "USD",
            "readOnly": true,
            "type": "string"
          },
          "front_image_id": {
            "description": "ID of the image of the front of the check",
            "example": "13593b47-0a9a-48c6-8efe-f2da3c36130c",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "RDC Deposit ID",
            "example": "69d11ca7-bec4-43d8-9749-1cc93fce4485",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "routing_number": {
            "description": "Bank routing number",
            "example": "123456789",
            "readOnly": true,
            "type": "string"
          },
          "scan_id": {
            "description": "ID of the OCR scan of the check image",
            "example": "696cc102-ce03-4c80-9792-2b14bcd41804",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "account_number",
          "routing_number",
          "check_amount",
          "check_currency",
          "date_processed",
          "date_submitted",
          "deposit_amount",
          "deposit_currency",
          "front_image_id",
          "back_image_id",
          "scan_id"
        ],
        "title": "RDC Deposit",
        "type": "object"
      },
      "deposit_list": {
        "allOf": [
          {
            "properties": {
              "deposits": {
                "description": "Array of RDC deposits",
                "items": {
                  "$ref": "#/components/schemas/deposit"
                },
                "type": "array"
              }
            },
            "required": [
              "deposits"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "device": {
        "properties": {
          "id": {
            "description": "Resource ID for device",
            "example": "9725ec95-d226-4cfc-9adb-64ba4bb8676b",
            "format": "uuid",
            "type": "string"
          },
          "ip": {
            "description": "IP address",
            "example": "77.54.149.200",
            "type": "string"
          },
          "os": {
            "description": "Operation system",
            "example": "Android",
            "type": "string"
          },
          "os_version": {
            "description": "Operation system version",
            "example": "88.71.11",
            "type": "string"
          },
          "screen_height": {
            "description": "Device screen height",
            "example": 87,
            "type": "integer"
          },
          "screen_width": {
            "description": "Device screen width",
            "example": 990,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "disclosure": {
        "description": "Represents a disclosure",
        "properties": {
          "creation_time": {
            "example": "2021-05-01T23:59:59Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "event_type": {
            "enum": [
              "DISPLAYED",
              "VIEWED",
              "ACKNOWLEDGED"
            ],
            "example": "VIEWED",
            "type": "string"
          },
          "id": {
            "description": "Disclosure ID",
            "example": "918a41c5-a8ec-403d-892d-1058a0ec9b04",
            "format": "uuid",
            "type": "string"
          },
          "last_updated_time": {
            "example": "2021-05-01T23:59:59Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "Date of disclosure",
            "example": "2021-05-01T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Disclosure Type",
            "enum": [
              "REG_DD",
              "KYC_DATA_COLLECTION",
              "REG_E"
            ],
            "example": "REG_DD",
            "type": "string"
          },
          "version": {
            "description": "Disclosure Version",
            "example": "1.1",
            "type": "string"
          }
        },
        "required": [
          "type",
          "version",
          "timestamp",
          "event_type"
        ],
        "title": "Disclosure",
        "type": "object"
      },
      "disclosure_response": {
        "description": "Represents all customer disclosures",
        "properties": {
          "disclosures": {
            "description": "List of the customer's disclosures",
            "items": {
              "$ref": "#/components/schemas/disclosure"
            },
            "type": "array"
          }
        },
        "title": "List of Customer Disclosures",
        "type": "object"
      },
      "document": {
        "properties": {
          "byte_data": {
            "description": "Base64url encoded image",
            "example": "ttvnh3sfw9sa3zdwgjpjpdc71ck84elrg96tgxrzsqx382n2fco7615w9mu0qocspjt0fwjpm4goutpvw53dvz4i0efbciy3zy0amcf9al3lzjwplqu915xqmkapiym8vszai4q1jh6rdyg1pgwr1jwlfnb1pwus16xpj0nl8g5jjvrdzwq9wtwphr2bt1ptb8ntzq33",
            "format": "byte",
            "type": "string"
          },
          "document_type": {
            "$ref": "#/components/schemas/document_type"
          },
          "id": {
            "description": "Document ID",
            "example": "5eaa815a-ca15-44c9-ad73-cdf1af0d9808",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "media_type": {
            "$ref": "#/components/schemas/kyc_media_type"
          }
        },
        "required": [
          "media_type",
          "document_type"
        ],
        "title": "Document",
        "type": "object"
      },
      "document_list": {
        "allOf": [
          {
            "properties": {
              "documents": {
                "description": "Array of documents",
                "items": {
                  "$ref": "#/components/schemas/document"
                },
                "type": "array"
              }
            },
            "required": [
              "documents"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "document_type": {
        "description": "Type of document: `LICENSE_FRONT` - Government issued license front, `LICENSE_BACK` - Government issued license back, `ID_CARD_FRONT` - Government issued ID front, `ID_CARD_BACK` - Government issued ID back, `PASSPORT` - Passport, `SELF_PORTRAIT` - Selfie, `PROOF_OF_ADDRESS` - Document to prove address such as a utility bill",
        "enum": [
          "LICENSE_FRONT",
          "LICENSE_BACK",
          "ID_CARD_FRONT",
          "ID_CARD_BACK",
          "PASSPORT",
          "SELF_PORTRAIT",
          "PROOF_OF_ADDRESS"
        ],
        "example": "LICENSE_FRONT",
        "title": "DocumentType",
        "type": "string"
      },
      "emboss_name": {
        "description": "The customer details to emboss on the card - Defaults to customer first and last name. Is limited to 21 characters. Valid characters are A-Z, a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-), ampersand (&), single quote (').",
        "properties": {
          "line_1": {
            "description": "line 1",
            "example": "Alexander Erdman",
            "type": "string"
          },
          "line_2": {
            "description": "line 2",
            "example": "Rempel, Dare and Hills",
            "type": "string"
          }
        },
        "required": [
          "line_1"
        ],
        "type": "object"
      },
      "employment": {
        "description": "A period of time in which a customer is (was) employed by a particular employer.\n",
        "properties": {
          "employer_name": {
            "description": "Name of customer's employer",
            "example": "ABC, Inc.",
            "type": "string"
          },
          "employment_from": {
            "description": "First day of employment",
            "example": "2016-05-11T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "employment_hours": {
            "description": "Number of hours spent per week working for specified employment",
            "example": 37.5,
            "format": "float",
            "maximum": 80,
            "minimum": 0,
            "type": "number"
          },
          "employment_income": {
            "description": "Annual income in cents",
            "example": 5000000,
            "type": "integer"
          },
          "employment_income_currency": {
            "description": "The 3-letter alphabetic ISO 4217 code for the currency in which the employee was paid\n",
            "example": "USD",
            "type": "string"
          },
          "employment_info": {
            "description": "A collection of arbitrary key-value pairs providing additional information about this employment relationship\n",
            "type": "object"
          },
          "employment_occupation": {
            "description": "Customer's work title, profession, or field",
            "example": "clerk",
            "type": "string"
          },
          "employment_to": {
            "description": "Last day of employment",
            "example": "2018-11-19T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique ID for this employment relationship",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "employer_name"
        ],
        "title": "Customer employment record",
        "type": "object"
      },
      "employment_list": {
        "allOf": [
          {
            "properties": {
              "employment": {
                "description": "Array of customer employment records",
                "items": {
                  "$ref": "#/components/schemas/employment"
                },
                "type": "array"
              }
            },
            "required": [
              "employment"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "error": {
        "properties": {
          "detail": {
            "description": "a human-readable string explaining this particular error",
            "example": "missing required fields: first_name, dob",
            "type": "string"
          },
          "status": {
            "description": "the HTTP status code for this response",
            "example": 400,
            "type": "integer"
          },
          "title": {
            "description": "a human-readable string for this general category of error",
            "example": "Bad Request Body",
            "type": "string"
          },
          "type": {
            "description": "a URI that identifies this general category of error",
            "example": "https://dev.synctera.com/errors/bad-request-body",
            "type": "string"
          }
        },
        "title": "Standard error response (RFC 7807 problem report)",
        "type": "object"
      },
      "event": {
        "description": "Webhook event object",
        "properties": {
          "event_resource": {
            "description": "Json string of object associated with the event. For example, if your event is ACCOUNT.STATUS_CHANGE, You can refer to Acccount to parse the account event to obtain the ID, status etc. \n",
            "type": "object"
          },
          "event_time": {
            "description": "Timestamp of the current event raised",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique event ID of the webhook request. Use event endpoints to get more event summary data",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "Metadata that stored in the webhook subscription",
            "maxLength": 1024,
            "type": "string"
          },
          "response_history": {
            "description": "Response history of the webhook request",
            "items": {
              "properties": {
                "code": {
                  "description": "Response code from the request",
                  "type": "integer"
                },
                "response_body": {
                  "description": "Response body from the request",
                  "type": "string"
                },
                "response_time": {
                  "description": "Timestamp that the response is received",
                  "format": "date-time",
                  "type": "string"
                },
                "sent_time": {
                  "description": "Timestamp that the request is sent",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "status": {
            "description": "Current event status. Failing event will keep retry until it is purged.",
            "enum": [
              "RUNNING",
              "SUCCESS",
              "RETRYING"
            ],
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          "webhook_id": {
            "description": "Webhook the current event belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "Webhook event",
        "type": "object"
      },
      "event_list": {
        "allOf": [
          {
            "properties": {
              "event_list": {
                "description": "Array of events",
                "items": {
                  "$ref": "#/components/schemas/event"
                },
                "type": "array"
              }
            },
            "required": [
              "event_list"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "event_resend": {
        "properties": {
          "event_id": {
            "description": "id of the event notification you want to resend",
            "example": "8c2f7abe-03f3-4284-80ee-3e64a4b87733",
            "format": "uuid",
            "type": "string"
          },
          "event_type": {
            "$ref": "#/components/schemas/event_type"
          }
        },
        "required": [
          "event_type",
          "event_id"
        ],
        "type": "object"
      },
      "event_type": {
        "description": "The reason for issuing/re-issuing a card",
        "enum": [
          "usertransition",
          "businesstransition",
          "cardtransition",
          "transaction",
          "digitalwallettokentransition",
          "chargebacktransition",
          "commandomodetransition",
          "casetransition",
          "directdeposittransition",
          "banktransfertransition"
        ],
        "type": "string"
      },
      "event_type_explicit": {
        "description": "All the webhook event types",
        "enum": [
          "ACCOUNT.CREATED",
          "CARD.STATUS_CHANGE"
        ],
        "type": "string"
      },
      "event_type_wildcard": {
        "enum": [
          "ACCOUNT.*",
          "CARD.*"
        ],
        "type": "string"
      },
      "event_type1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/event_type_explicit"
          },
          {
            "$ref": "#/components/schemas/event_type_wildcard"
          }
        ]
      },
      "external_account": {
        "properties": {
          "account_identifiers": {
            "$ref": "#/components/schemas/account_identifiers"
          },
          "creation_time": {
            "example": "Sat Oct 09 2021 12:32:29 GMT+0000 (Coordinated Universal Time)",
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "description": "The identifier for the customer associated with this account",
            "example": "23168d3e-4eab-48fe-8180-1f29f8d0bef9",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "External account unique identifier",
            "example": "09e6171b-86d3-40b2-b9ad-ba03d3f24636",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_updated_time": {
            "example": "Fri May 07 2021 10:32:17 GMT+0000 (Coordinated Universal Time)",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "description": "User-supplied metadata",
            "type": "object"
          },
          "nickname": {
            "description": "A user-meaningful name for the account",
            "example": "Home Loan Account",
            "type": "string"
          },
          "routing_identifiers": {
            "$ref": "#/components/schemas/account_routing"
          },
          "status": {
            "description": "The current state of the account",
            "enum": [
              "ACTIVE",
              "CLOSED"
            ],
            "type": "string"
          },
          "type": {
            "description": "The type of the account",
            "enum": [
              "CHECKING",
              "SAVINGS",
              "MONEY_MARKET",
              "OTHER"
            ],
            "type": "string"
          },
          "verification": {
            "$ref": "#/components/schemas/account_verification"
          }
        },
        "required": [
          "id",
          "customer_id",
          "status",
          "type",
          "routing_identifiers",
          "account_identifiers",
          "verification",
          "metadata",
          "creation_time",
          "last_updated_time"
        ],
        "title": "External account",
        "type": "object"
      },
      "external_account_access_token": {
        "properties": {
          "request_id": {
            "description": "A unique identifier for the request, which can be used for troubleshooting",
            "readOnly": true,
            "type": "string"
          },
          "vendor_access_token": {
            "description": "The access token associated with the Item data is being requested for.",
            "readOnly": true,
            "type": "string"
          },
          "vendor_customer_id": {
            "description": "The account_id value of the account associated with the returned vendor_access_token",
            "readOnly": true,
            "type": "string"
          },
          "vendor_public_token": {
            "description": "The user's public token obtained from successful link login.\n",
            "type": "string"
          }
        },
        "required": [
          "vendor_public_token",
          "vendor_customer_id"
        ],
        "type": "object"
      },
      "external_account_link_token": {
        "properties": {
          "client_name": {
            "description": "The name of your application, as it should be displayed in Link. Maximum length of 30 characters.",
            "type": "string"
          },
          "country_codes": {
            "description": "Country codes in the ISO-3166-1 alpha-2 country code standard.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expiration": {
            "description": "The expiration date for the link_token. Expires in 4 hours.",
            "format": "date-time",
            "type": "string"
          },
          "external_account_user": {
            "$ref": "#/components/schemas/external_account_user"
          },
          "language": {
            "description": "The language that Link should be displayed in.",
            "enum": [
              "EN",
              "FR",
              "ES",
              "NL"
            ],
            "type": "string"
          },
          "link_customization_name": {
            "description": "The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the default customization will be used. When using a Link customization, the language in the customization must match the language selected via the language parameter, and the countries in the customization should match the country codes selected via country_codes.\n",
            "type": "string"
          },
          "link_token": {
            "description": "A link_token, which can be supplied to Link in order to initialize it and receive a public_token, which can be exchanged for an access_token.\n",
            "readOnly": true,
            "type": "string"
          },
          "products": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "redirect_uri": {
            "description": "A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview.\n",
            "type": "string"
          },
          "request_id": {
            "description": "A unique identifier for the request, which can be used for troubleshooting.",
            "readOnly": true,
            "type": "string"
          },
          "vendor_access_token": {
            "description": "The access_token associated with the Item to update, used when updating or modifying an existing access_token. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link as part of the Payment Initiation (UK and Europe) flow.\n",
            "type": "string"
          },
          "webhook": {
            "description": "The destination URL to which any webhooks should be sent.",
            "type": "string"
          }
        },
        "required": [
          "client_name",
          "language",
          "country_codes",
          "external_account_user"
        ],
        "type": "object"
      },
      "external_account_user": {
        "properties": {
          "email_address": {
            "description": "The user's email address",
            "type": "string"
          },
          "email_address_verified_time": {
            "description": "The date and time the email address was verified",
            "format": "date-time",
            "type": "string"
          },
          "phone_number": {
            "description": "The user's phone number",
            "type": "string"
          },
          "phone_number_verified_time": {
            "description": "The date and time the phone number was verified",
            "format": "date-time",
            "type": "string"
          },
          "ssn": {
            "description": "To be provided in the format \"ddd-dd-dddd\".\n",
            "type": "string"
          },
          "status": {
            "description": "The status of this alert",
            "enum": [
              "ACTIVE",
              "SUPPRESSED"
            ],
            "type": "string"
          },
          "vendor_customer_id": {
            "description": "Unique identifier for this user",
            "example": "7134d50f-e68f-4c57-8e30-7b89d8288a00",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "vendor_customer_id"
        ],
        "type": "object"
      },
      "external_account_vendor_values": {
        "description": "The vendor selected for the operation.\n",
        "enum": [
          "PLAID"
        ],
        "type": "string"
      },
      "external_accounts_list": {
        "allOf": [
          {
            "properties": {
              "external_accounts": {
                "description": "Array of external accounts",
                "items": {
                  "$ref": "#/components/schemas/external_account"
                },
                "type": "array"
              }
            },
            "required": [
              "external_accounts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "financial_request_model": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          },
          "cash_back_amount": {
            "type": "number"
          },
          "is_pre_auth": {
            "default": false,
            "type": "boolean"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "transaction_options": {
            "$ref": "#/components/schemas/transaction_options"
          }
        },
        "required": [
          "amount",
          "card_acceptor",
          "card_token",
          "mid"
        ],
        "type": "object"
      },
      "form": {
        "description": "PHYSICAL or VIRTUAL.",
        "enum": [
          "PHYSICAL",
          "VIRTUAL"
        ],
        "type": "string"
      },
      "image": {
        "description": "Image uploaded for a remote deposit capture",
        "properties": {
          "byte_data": {
            "description": "Base64url encoded image",
            "example": "lguvruh37avp4q3b71zt0ul7u07k674bx02jbnhivglh30859swx9ks0b2qvtqdgbzgav033kxjc4a3rob94qehr6oa8s1l5wkn0dqvxbru3jqay856lekwm50k3gk3g0tjb901590ykazszbyevnjrsrslt5jl1wvqs38xwn5yb5vihkhfro6a4wy0pq5plcs2qt08f",
            "format": "byte",
            "type": "string"
          },
          "date_uploaded": {
            "description": "Date the image was uploaded, in RFC 3339 format",
            "example": "2019-01-02T03:04:05.678Z",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "RDC image id",
            "example": "f7e99d6a-4ddc-4183-b211-0688a8c25bb6",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "media_type": {
            "$ref": "#/components/schemas/rdc_media_type"
          }
        },
        "required": [
          "id",
          "media_type",
          "byte_data",
          "date_uploaded"
        ],
        "title": "RDC Image",
        "type": "object"
      },
      "image_list": {
        "allOf": [
          {
            "properties": {
              "images": {
                "description": "Array of RDC images",
                "items": {
                  "$ref": "#/components/schemas/image"
                },
                "type": "array"
              }
            },
            "required": [
              "images"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "ingestion_status": {
        "description": "Reconciliation ingestion status values",
        "enum": [
          "IN_PROCESS",
          "COMPLETED",
          "FAILED"
        ],
        "title": "Reconciliation Ingestion Status Values",
        "type": "string"
      },
      "kyc_media_type": {
        "description": "Type of image: PNG, JPG. Note that PDF and GIF are valid values, but not currently supported.",
        "enum": [
          "PDF",
          "PNG",
          "JPG",
          "GIF"
        ],
        "example": "PNG",
        "title": "MediaType",
        "type": "string"
      },
      "network_fee_model": {
        "example": {
          "amount": 1.2315135367772556,
          "credit_debit": "C",
          "type": "ISSUER_FEE"
        },
        "properties": {
          "amount": {
            "type": "number"
          },
          "credit_debit": {
            "description": "C = credit; D = debit",
            "enum": [
              "C",
              "D"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "ISSUER_FEE",
              "SWITCH_FEE",
              "PINDEBIT_ASSOC_FEE",
              "ACQUIRER_FEE",
              "INTERCHANGE_FEE",
              "CUR_CONV_CARDHOLDER_FEE",
              "CUR_CONV_ISSUER_FEE",
              "CROSS_BORDER_ISSUER_FEE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "original_credit_request_model": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "screening_score": {
            "type": "string"
          },
          "sender_data": {
            "$ref": "#/components/schemas/original_credit_sender_data"
          },
          "transactionPurpose": {
            "type": "string"
          },
          "type": {
            "enum": [
              "account_to_account",
              "person_to_person",
              "prepaid",
              "wallet_transfer",
              "money_transfer_by_bank",
              "business_to_business",
              "disbursement",
              "government_disbursement",
              "gambling_payout",
              "loyalty",
              "merchant_disbursement",
              "online_gambling_payout",
              "pension_disbursement",
              "prepaid_loads",
              "card_bill_payment",
              "bill_payment",
              "cash_claim",
              "cash_in",
              "cash_out",
              "mobile_air_time_payment",
              "money_transfer_by_merchant",
              "face_to_face_merchant_payment",
              "government_payment",
              "payments_goods_services"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "card_token",
          "mid",
          "type"
        ],
        "type": "object"
      },
      "original_credit_sender_data": {
        "properties": {
          "funding_source": {
            "enum": [
              "credit",
              "debit",
              "prepaid",
              "deposit_account",
              "cash",
              "mobile_money_payment",
              "non_visa_credit"
            ],
            "type": "string"
          },
          "sender_account_number": {
            "type": "string"
          },
          "sender_account_type": {
            "enum": [
              "other",
              "rtn_bank_account",
              "iban",
              "card_account",
              "email",
              "phone_number",
              "bank_account_number_and_identification_code",
              "wallet_id",
              "social_network_id"
            ],
            "type": "string"
          },
          "sender_address": {
            "type": "string"
          },
          "sender_city": {
            "type": "string"
          },
          "sender_country": {
            "type": "string"
          },
          "sender_name": {
            "type": "string"
          },
          "sender_reference_number": {
            "type": "string"
          },
          "sender_state": {
            "type": "string"
          },
          "transaction_purpose": {
            "enum": [
              "family_support",
              "labor_transfers",
              "travel",
              "education",
              "medical_treatment",
              "emergency_need",
              "savings",
              "gifts",
              "other",
              "salary",
              "lending",
              "crypto_currency"
            ],
            "type": "string"
          },
          "unique_transaction_reference_number": {
            "maxLength": 17,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "funding_source"
        ],
        "type": "object"
      },
      "paginated_response": {
        "properties": {
          "next_page_token": {
            "description": "If returned, use the next_page_token to query for the next page of results. Not returned if there are no more rows.",
            "example": "5rczwk8mhc",
            "type": "string"
          }
        },
        "title": "Paginated List response",
        "type": "object"
      },
      "patch_customer": {
        "description": "Customer object for patch purpose. All fields are optional",
        "properties": {
          "dob": {
            "description": "Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)",
            "example": "2000-01-01T00:00:00.000Z",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Customer's email",
            "example": "Violette21@gmail.com",
            "type": "string"
          },
          "first_name": {
            "description": "Customer's first name",
            "example": "Davon",
            "type": "string"
          },
          "last_name": {
            "description": "Customer's last name",
            "example": "Nolan",
            "type": "string"
          },
          "legal_address": {
            "$ref": "#/components/schemas/address",
            "description": "Customer's legal address"
          },
          "middle_name": {
            "description": "Customer's middle name",
            "example": "b",
            "type": "string"
          },
          "phone_number": {
            "description": "Customer's mobile phone number with country code in E.164 format",
            "example": 76864850070,
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/address",
            "description": "Customer's shipping address"
          },
          "ssn": {
            "description": "Customer's full tax ID eg SSN formatted with hyphens. This optional parameter is required when running KYC on a customer. Must be compiled with ^\\d{3}-\\d{2}-\\d{4}$. Response contains the last 4 digits only (e.g. 6789).",
            "example": "092-08-5389",
            "type": "string"
          },
          "status": {
            "description": "Customer's status",
            "enum": [
              "PROSPECT",
              "ACTIVE",
              "FROZEN",
              "ESCHEAT",
              "DECEASED",
              "SANCTION",
              "DORMANT",
              "DENIED"
            ],
            "type": "string"
          }
        },
        "title": "Customer",
        "type": "object"
      },
      "physical_card": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_card"
          },
          {
            "properties": {
              "barcode": {
                "description": "barcode to scan for card activation",
                "readOnly": true,
                "type": "string"
              },
              "is_pin_set": {
                "default": false,
                "description": "indicates whether a pin has been set on the card",
                "example": true,
                "readOnly": true,
                "type": "boolean"
              },
              "shipping": {
                "$ref": "#/components/schemas/shipping"
              }
            },
            "type": "object"
          }
        ],
        "description": "Details pertaining to issuing a new physical card",
        "title": "Physical Card"
      },
      "physical_card_issuance_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card"
          },
          {
            "required": [
              "form",
              "customer_id",
              "account_id",
              "type",
              "card_product_id"
            ],
            "type": "object"
          }
        ]
      },
      "physical_card_plus_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card"
          },
          {
            "$ref": "#/components/schemas/physical_card_response_status"
          }
        ]
      },
      "physical_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/physical_card_plus_status"
          },
          {
            "required": [
              "form",
              "id",
              "customer_id",
              "account_id",
              "type",
              "emboss_name",
              "last_four",
              "card_product_id",
              "network",
              "expiration_year",
              "expiration_month",
              "creation_time",
              "shipping"
            ],
            "type": "object"
          }
        ]
      },
      "physical_card_response_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/card_status_object"
          },
          {
            "required": [
              "card_status",
              "status_reason",
              "card_fulfillment_status"
            ],
            "type": "object"
          }
        ]
      },
      "ping_response": {
        "properties": {
          "webhook_status": {
            "description": "status of webhook endpoint",
            "example": "alive",
            "type": "string"
          }
        },
        "required": [
          "webhook_status"
        ],
        "type": "object"
      },
      "plaid_account_verification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_account_verification"
          },
          {
            "properties": {
              "access_token": {
                "description": "The token provided from Plaid to access the accounts.",
                "example": "access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6",
                "type": "string"
              }
            },
            "required": [
              "access_token"
            ],
            "type": "object"
          }
        ],
        "title": "Information specific to Plaid verification"
      },
      "prospect": {
        "allOf": [
          {
            "properties": {
              "dob": {
                "description": "Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)",
                "example": "2000-01-01T00:00:00.000Z",
                "format": "date",
                "type": "string"
              },
              "first_name": {
                "description": "Customer's first name",
                "example": "Eleazar",
                "type": "string"
              },
              "last_name": {
                "description": "Customer's last name",
                "example": "Hand",
                "type": "string"
              },
              "status": {
                "description": "Customer's status",
                "enum": [
                  "PROSPECT",
                  "ACTIVE",
                  "FROZEN",
                  "ESCHEAT",
                  "DECEASED",
                  "SANCTION",
                  "DORMANT",
                  "DENIED"
                ],
                "type": "string"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "$ref": "#/components/schemas/base_person"
          }
        ],
        "description": "A prospect has a unique identifier. It can be upgrade to a customer with required information",
        "title": "Customer",
        "type": "object"
      },
      "provider_type": {
        "description": "Name of the organization that provided this data",
        "enum": [
          "IDOLOGY",
          "SOCURE"
        ],
        "type": "string"
      },
      "raw_response": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/provider_type"
          },
          "raw_data": {
            "description": "the raw data from an external provider, as a JSON string",
            "example": "{}",
            "type": "string"
          }
        },
        "title": "Raw Response From Providers",
        "type": "object"
      },
      "rdc_media_type": {
        "description": "Type of image: PNG, JPG. Note that PDF and GIF are valid values, but not currently supported.",
        "enum": [
          "PDF",
          "PNG",
          "JPG",
          "GIF"
        ],
        "example": "PNG",
        "title": "RDC MediaType",
        "type": "string"
      },
      "recipient_name": {
        "description": "The name of the recipient to whom the card will be shipped",
        "properties": {
          "first_name": {
            "example": "Agustina",
            "type": "string"
          },
          "last_name": {
            "example": "Mitchell",
            "type": "string"
          },
          "middle_name": {
            "example": "c",
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object"
      },
      "reconciliation": {
        "description": "Reconciliation",
        "properties": {
          "file_name": {
            "description": "Filename of the data to be reconciled",
            "example": "pp072ojtlvbr0q",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Reconciliation ID",
            "example": "37f76318-b137-4a29-ae9f-39918d2b0084",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "ingestion_status": {
            "$ref": "#/components/schemas/ingestion_status"
          }
        },
        "required": [
          "id",
          "file_name",
          "ingestion_status"
        ],
        "title": "Reconciliation",
        "type": "object"
      },
      "reconciliation_input": {
        "description": "Input data for a reconciliation",
        "properties": {
          "byte_data": {
            "description": "Base64url encoded image",
            "example": "xayvq4szt5ug0z19ic6ak1ne9q0socgkqt2hgrb0mklh43pet04wgn6h44d22x12sce1u4mny0u351hm3za3s38mgtpxg9q4h0lbum6vw82ycpcdo9wm116zn5w6g98yvtjty7ks14vmx49srihpr5n75fppi43dfmu9gyzp5hy64m1uyrfiqk9fqbbdrtl6cnx2klm7",
            "format": "byte",
            "type": "string"
          },
          "file_name": {
            "description": "Filename of the data to be reconciled",
            "example": "6ggi0rkeznwuk6",
            "type": "string"
          }
        },
        "required": [
          "file_name",
          "byte_data"
        ],
        "title": "Reconciliation Input",
        "type": "object"
      },
      "reconciliation_list": {
        "allOf": [
          {
            "properties": {
              "reconciliations": {
                "description": "Array of reconciliations",
                "items": {
                  "$ref": "#/components/schemas/reconciliation"
                },
                "type": "array"
              }
            },
            "required": [
              "reconciliations"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "recurrence_data": {
        "description": "Represents recurrence data",
        "properties": {
          "id": {
            "description": "Recurrence ID",
            "example": "3dc4dc33-731d-4be5-9509-4ae8fd67a4df",
            "format": "uuid",
            "type": "string"
          },
          "recurrence_frequency": {
            "description": "the frequency at which to recur",
            "example": 9,
            "type": "integer"
          }
        },
        "title": "Recurrence Data",
        "type": "object"
      },
      "relationship": {
        "properties": {
          "customer_id": {
            "description": "Customer that the current account is associated with",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "ID of account relationship",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "relationship_type": {
            "description": "Relationship type",
            "enum": [
              "ACCOUNT_HOLDER",
              "EMPLOYEE",
              "BRANCH",
              "ATM",
              "OFFICER",
              "PRIMARY_ACCOUNT_HOLDER",
              "JOINT_ACCOUNT_HOLDER",
              "AUTHORIZED-SIGNER"
            ],
            "type": "string"
          }
        },
        "required": [
          "customer_id",
          "relationship_type"
        ],
        "title": "Account Relationship",
        "type": "object"
      },
      "relationship_list": {
        "allOf": [
          {
            "properties": {
              "relationships": {
                "description": "Array of relationships",
                "items": {
                  "$ref": "#/components/schemas/relationship"
                },
                "type": "array"
              }
            },
            "required": [
              "relationships"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "relationship_role": {
        "description": "CUSTODIAN - Related party is the custodian e.g. the parent, BENEFICIARY - Related party is the beneficiary e.g. the dependent, PARTNER - Related party is the partner",
        "enum": [
          "CUSTODIAN",
          "BENEFICIARY",
          "PARTNER"
        ],
        "example": "CUSTODIAN",
        "title": "Relationship Role",
        "type": "string"
      },
      "relationship1": {
        "properties": {
          "id": {
            "description": "ID of related entity",
            "example": "f6ea1fcd-80ca-4edf-9207-347f131df646",
            "format": "uuid",
            "type": "string"
          },
          "relationship_role": {
            "$ref": "#/components/schemas/relationship_role"
          }
        },
        "required": [
          "id",
          "relationship_role"
        ],
        "title": "Relationship",
        "type": "object"
      },
      "resend_response": {
        "properties": {
          "body": {
            "description": "response of the event notification",
            "example": "usertransition response",
            "type": "string"
          }
        },
        "type": "object"
      },
      "reversal_model": {
        "example": {
          "amount": 0.8008281904610115,
          "find_original_window_days": 6,
          "is_advice": false,
          "network_fees": [
            {
              "amount": 1.2315135367772556,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            },
            {
              "amount": 1.2315135367772556,
              "credit_debit": "C",
              "type": "ISSUER_FEE"
            }
          ],
          "original_transaction_token": "original_transaction_token"
        },
        "properties": {
          "amount": {
            "type": "number"
          },
          "find_original_window_days": {
            "format": "int32",
            "type": "integer"
          },
          "is_advice": {
            "default": false,
            "type": "boolean"
          },
          "network_fees": {
            "items": {
              "$ref": "#/components/schemas/network_fee_model"
            },
            "type": "array"
          },
          "original_transaction_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "original_transaction_token"
        ],
        "type": "object"
      },
      "risk_rating": {
        "description": "Represents a customer's risk profile",
        "properties": {
          "configuration_id": {
            "description": "The risk configuration id used in risk score calculation",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Risk rating ID",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "next_review": {
            "description": "The next review date where customer risk will be calculated",
            "format": "date-time",
            "type": "string"
          },
          "risk_level": {
            "description": "A textual representation of the customer risk score",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "type": "string"
          },
          "risk_review": {
            "description": "The date the customer risk rating was calculated",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "risk_score": {
            "description": "The cumulative score of all risk rating fields",
            "format": "float",
            "type": "number"
          }
        },
        "title": "Customer Risk Rating",
        "type": "object"
      },
      "risk_rating_list": {
        "allOf": [
          {
            "properties": {
              "risk_ratings": {
                "description": "Array of customer risk ratings",
                "items": {
                  "$ref": "#/components/schemas/risk_rating"
                },
                "type": "array"
              }
            },
            "required": [
              "risk_ratings"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "scan": {
        "description": "Scanning image to be used for remote deposit capture",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "f5mqah6xo0zxas",
            "readOnly": true,
            "type": "string"
          },
          "back_image_id": {
            "description": "ID of the image of the back of the check",
            "example": "d98bed99-bbdd-44e1-835c-9c21da5a3782",
            "format": "uuid",
            "type": "string"
          },
          "check_amount": {
            "description": "Amount on check in ISO 4217 minor currency units",
            "example": 7308,
            "readOnly": true,
            "type": "integer"
          },
          "check_currency": {
            "description": "ISO 4217 currency code for the check amount",
            "example": "USD",
            "readOnly": true,
            "type": "string"
          },
          "date_scanned": {
            "description": "Date the check image was scanned, in RFC 3339 format",
            "example": "2019-01-02T03:04:05.678Z",
            "readOnly": true,
            "type": "string"
          },
          "front_image_id": {
            "description": "ID of the image of the front of the check",
            "example": "4aaf9fd0-c0b0-4e21-a216-ee1a5505b0c7",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "RDC Scan ID",
            "example": "e632e563-6a06-4601-8f91-e96c4a230fbc",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "routing_number": {
            "description": "Bank routing number",
            "example": "123456789",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "account_number",
          "routing_number",
          "check_amount",
          "check_currency",
          "date_scanned",
          "front_image_id",
          "back_image_id"
        ],
        "title": "RDC Scan",
        "type": "object"
      },
      "scan_list": {
        "allOf": [
          {
            "properties": {
              "scans": {
                "description": "Array of RDC scans",
                "items": {
                  "$ref": "#/components/schemas/scan"
                },
                "type": "array"
              }
            },
            "required": [
              "scans"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "shipping": {
        "description": "Details about the shipping method. If supplied this will override the default shipping address of the customer or account.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address1",
            "description": "The address to which the card will be shipped - Defaults to account shipping address if none supplied"
          },
          "care_of_line": {
            "description": "The name of the person to send in care of",
            "type": "string"
          },
          "is_expedited_fulfillment": {
            "default": false,
            "description": "Is the shipment expedited",
            "example": false,
            "type": "boolean"
          },
          "method": {
            "default": "LOCAL_MAIL",
            "description": "The shipping method",
            "enum": [
              "GROUND",
              "LOCAL_MAIL",
              "TWO_DAY",
              "OVERNIGHT",
              "INTERNATIONAL"
            ],
            "example": "LOCAL_MAIL",
            "type": "string"
          },
          "recipient_name": {
            "$ref": "#/components/schemas/recipient_name",
            "description": "The name of the recipient to whom the card will be shipped"
          }
        },
        "required": [
          "recipient_name"
        ],
        "type": "object"
      },
      "simulation_response_model": {
        "type": "object"
      },
      "single_use_token_request": {
        "properties": {
          "account_id": {
            "description": "The ID of the account to which the token will be linked",
            "example": "f20eed7d-63a0-4bbb-add4-61154809f732",
            "format": "uuid",
            "type": "string"
          },
          "customer_id": {
            "description": "The ID of the customer to whom the token will be issued",
            "example": "85b66d3a-4a82-44be-a3e9-e967d223f95b",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "customer_id",
          "account_id"
        ],
        "type": "object"
      },
      "single_use_token_response": {
        "example": {
          "customer_account_mapping_id": "user_token",
          "expires": "2000-01-23T04:56:07.000+00:00",
          "token": "token"
        },
        "properties": {
          "customer_account_mapping_id": {
            "type": "string"
          },
          "expires": {
            "description": "yyyy-MM-ddTHH:mm:ssZ",
            "format": "date-time",
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "expires"
        ],
        "type": "object"
      },
      "socure_event": {
        "properties": {
          "globalWatchlist": {
            "$ref": "#/components/schemas/socure_global_watchlist"
          },
          "referenceId": {
            "description": "A 36 character reference ID included with every ID+ response.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "referenceId"
        ],
        "type": "object"
      },
      "socure_event_body": {
        "properties": {
          "environmentName": {
            "description": "Environment the event belongs to",
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/socure_event"
          },
          "id": {
            "description": "Unique identifier for the monitoring event",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "environmentName",
          "event"
        ],
        "type": "object"
      },
      "socure_global_watchlist": {
        "properties": {
          "matches": {
            "$ref": "#/components/schemas/socure_matches"
          },
          "reasonCodes": {
            "description": "Array of reason codes",
            "items": {
              "$ref": "#/components/schemas/socure_reason_code"
            },
            "type": "array"
          }
        },
        "required": [
          "matches"
        ],
        "type": "object"
      },
      "socure_match": {
        "properties": {
          "comments": {
            "properties": {
              "relatedURL": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "entityId": {
            "type": "string"
          },
          "matchFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sourceUrls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "entityId",
          "status"
        ],
        "type": "object"
      },
      "socure_match_list": {
        "description": "Array of socure matches",
        "items": {
          "$ref": "#/components/schemas/socure_match"
        },
        "type": "array"
      },
      "socure_matches": {
        "additionalProperties": {
          "$ref": "#/components/schemas/socure_match_list"
        },
        "description": "Contains key-value pair of the Source list name and an array of details about that match.",
        "type": "object"
      },
      "socure_reason_code": {
        "description": "Applicable reason code for the transaction.",
        "type": "string"
      },
      "status": {
        "description": "The status of the account\n",
        "enum": [
          "APPLICATION_SUBMITTED",
          "FAILED_KYC",
          "ACCOUNT_NOT_DESIRED",
          "ACTIVE_OR_DISBURSED",
          "CLOSED",
          "SUSPENDED",
          "CHARGED_OFF",
          "ACCOUNT_NEVER_ACTIVE",
          "ACTIVATED_NOT_DISBURSED",
          "AWAITING_FIXING",
          "IN_CLOSING",
          "RESTRICTED"
        ],
        "title": "Account Status",
        "type": "string"
      },
      "transaction": {
        "properties": {
          "account_id": {
            "description": "Account ID",
            "format": "uuid",
            "type": "string"
          },
          "amount": {
            "description": "Transaction amount in ISO 4217 minor currency units",
            "example": 497,
            "minimum": 0,
            "type": "integer"
          },
          "authorization_ref": {
            "description": "Reference for the authorization",
            "type": "string"
          },
          "currency": {
            "description": "Currency of the transaction. ISO 4217 alphabetic currency code",
            "example": "TOP",
            "type": "string"
          },
          "dc_sign": {
            "$ref": "#/components/schemas/dc_sign_type"
          },
          "effective_date": {
            "description": "The effective date of the transaction (value_date)",
            "format": "date-time",
            "type": "string"
          },
          "ext_reference": {
            "description": "External reference from Synctera for the transaction",
            "type": "string"
          },
          "id": {
            "description": "Transaction ID",
            "format": "uuid",
            "type": "string"
          },
          "profit_center": {
            "description": "Profit center of the transaction",
            "type": "string"
          },
          "status": {
            "description": "The status of the transaction",
            "type": "string"
          },
          "transaction_type": {
            "description": "Transaction type",
            "enum": [
              "ACCOUNT_CLOSING_ACH",
              "ATM_DEPOSIT_CARD",
              "ATM_FEE_CARD",
              "ATM_WITHDRAWAL_CARD",
              "BALANCE_INQUIRY_CARD",
              "CARD_LOAD_CARD",
              "CASH_ADVANCE_CARD",
              "CHARGEBACK_CARD",
              "CREDIT_CHECKING_ACH",
              "CREDIT_SAVING_ACH",
              "CREDIT_TRANSFER_ACH",
              "CREDIT_TRANSFER_CARD",
              "CUR_CONVERSION_FEE_CARD",
              "DEBIT_CHECKING_ACH",
              "DEBIT_SAVING_ACH",
              "DEBIT_TRANSFER_ACH",
              "DISPUTE_CHARGEBACK_CARD",
              "DISPUTE_PROVISIONAL_CREDIT_CARD",
              "INTERCHANGE_CARD",
              "MERCHANT_CREDIT_CARD",
              "MICRO_DEPOSIT_ACH",
              "MONEY_TRANSFER_CARD",
              "OTHER_CARD",
              "PAYPAL_CREDIT_ACH",
              "PIN_INTERCHANGE_CARD",
              "PIN_PURCHASE_CARD",
              "PIN_RETURN_CARD",
              "POS_VERIFICATION_CARD",
              "PRE_AUTH_COMPLETION_CARD",
              "PRE_AUTH_CREDIT _CHECKING_ACH",
              "PRE_AUTH_CREDIT _SAVING_ACH",
              "PRE_AUTH_DEBIT _CHECKING_ACH",
              "PRE_AUTH_DEBIT _SAVING_ACH",
              "PRE_AUTH_FORCE_CARD",
              "PURCHASE_CARD",
              "RDC_CHECK_ACH",
              "REFUND_CARD",
              "RETURN_CARD",
              "RETURN_CREDIT_CHECKING_ACH",
              "RETURN_CREDIT_SAVING_ACH",
              "RETURN_DEBIT_CHECKING_ACH",
              "RETURN_DEBIT_SAVING_ACH",
              "REVERSAL_ACH",
              "REVERSAL_CARD"
            ],
            "type": "string"
          }
        },
        "title": "Transaction",
        "type": "object"
      },
      "transaction_list": {
        "allOf": [
          {
            "properties": {
              "transactions": {
                "description": "Array of transactions",
                "items": {
                  "$ref": "#/components/schemas/transaction"
                },
                "type": "array"
              }
            },
            "required": [
              "transactions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "transaction_options": {
        "properties": {
          "additional_data": {
            "type": "string"
          },
          "card_expiration_date_yymm": {
            "type": "string"
          },
          "database_transaction_timeout": {
            "format": "int32",
            "type": "integer"
          },
          "encryption_key_id": {
            "type": "string"
          },
          "is_async": {
            "default": false,
            "type": "boolean"
          },
          "pre_auth_time_limit": {
            "type": "string"
          },
          "send_expiration_date": {
            "default": false,
            "type": "boolean"
          },
          "send_track_data": {
            "default": false,
            "type": "boolean"
          },
          "transaction_timeout_threshold_seconds": {
            "format": "int64",
            "type": "integer"
          },
          "transaction_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "vendor_info": {
        "description": "The information provided to Synctera from the vendor. Interpretation of this object is up to the client.\n",
        "discriminator": {
          "mapping": {
            "application/json": "#/components/schemas/vendor_json",
            "text/xml": "#/components/schemas/vendor_xml"
          },
          "propertyName": "content_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/vendor_json"
          },
          {
            "$ref": "#/components/schemas/vendor_xml"
          }
        ],
        "title": "Vendor Info",
        "type": "object"
      },
      "vendor_json": {
        "properties": {
          "content_type": {
            "description": "Describes the content-type encoding received from the vendor",
            "enum": [
              "application/json"
            ],
            "type": "string"
          },
          "json": {
            "description": "Data representation in JSON",
            "type": "object"
          },
          "vendor": {
            "example": "SOCURE",
            "type": "string"
          }
        },
        "required": [
          "vendor",
          "content_type",
          "json"
        ]
      },
      "vendor_xml": {
        "properties": {
          "content_type": {
            "description": "Describes the content-type encoding received from the vendor",
            "enum": [
              "text/xml"
            ],
            "type": "string"
          },
          "vendor": {
            "example": "IDOLOGY",
            "type": "string"
          },
          "xml": {
            "description": "Data representaion in XML",
            "type": "string"
          }
        },
        "required": [
          "vendor",
          "content_type",
          "xml"
        ]
      },
      "verification_type": {
        "enum": [
          "fraud",
          "synthetic",
          "emailrisk",
          "phonerisk",
          "addressrisk",
          "kyc",
          "social",
          "watchliststandard",
          "watchlistpremier",
          "watchlistplus",
          "documentverification",
          "alertlist",
          "decision"
        ],
        "example": "kyc",
        "title": "VerificationType",
        "type": "string"
      },
      "virtual_card": {
        "allOf": [
          {
            "$ref": "#/components/schemas/base_card"
          }
        ],
        "description": "A virtual card",
        "title": "Virtual Card"
      },
      "virtual_card_issuance_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card"
          },
          {
            "required": [
              "form",
              "customer_id",
              "account_id",
              "type",
              "card_product_id"
            ],
            "type": "object"
          }
        ]
      },
      "virtual_card_plus_status": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card"
          },
          {
            "$ref": "#/components/schemas/virtual_card_response_status"
          }
        ]
      },
      "virtual_card_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/virtual_card_plus_status"
          },
          {
            "required": [
              "account_id",
              "card_product_id",
              "creation_time",
              "customer_id",
              "emboss_name",
              "expiration_month",
              "expiration_year",
              "form",
              "id",
              "last_four",
              "network",
              "type",
              "status"
            ],
            "type": "object"
          }
        ]
      },
      "virtual_card_response_status": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/card_status_object",
            "type": "object"
          }
        },
        "type": "object"
      },
      "watchlist_alert": {
        "properties": {
          "created": {
            "description": "When this alert was created",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this alert",
            "format": "uuid",
            "type": "string"
          },
          "provider_info": {
            "description": "The information provided to Synctera that triggered this alert, as an arbitrary JSON object. Interpretation of this object is up to the client.\n",
            "type": "object"
          },
          "provider_subject_id": {
            "description": "The id of the provider subject for this alert",
            "type": "string"
          },
          "provider_subscription_id": {
            "description": "The id of the provider subscription for this alert",
            "type": "string"
          },
          "provider_watchlist_name": {
            "description": "The name of the provider for this alert",
            "type": "string"
          },
          "status": {
            "description": "The status of this alert",
            "enum": [
              "ACTIVE",
              "SUPPRESSED"
            ],
            "type": "string"
          },
          "urls": {
            "description": "Where to get more information about this alert (according to our third-party data provider).\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vendor_info": {
            "$ref": "#/components/schemas/vendor_info"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "watchlist_alert_list": {
        "allOf": [
          {
            "properties": {
              "alerts": {
                "items": {
                  "$ref": "#/components/schemas/watchlist_alert"
                },
                "type": "array"
              }
            },
            "required": [
              "alerts"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "watchlist_subscription": {
        "properties": {
          "auto_renew": {
            "description": "Whether this subscription should automatically renew when the subscription period is over (default: vendor-dependent).\n",
            "type": "boolean"
          },
          "created": {
            "description": "When this subscription was created",
            "format": "date-time",
            "type": "string"
          },
          "customer_consent": {
            "description": "Whether this customer has consented to being enrolled for watchlist monitoring\n",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for this subscription",
            "format": "uuid",
            "type": "string"
          },
          "period_end": {
            "description": "The date when monitoring of this individual should end.",
            "format": "date",
            "type": "string"
          },
          "period_start": {
            "description": "The date when monitoring of this individual should begin (default: today).",
            "format": "date",
            "type": "string"
          },
          "provider_subscription_id": {
            "description": "External provider subscription id",
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          }
        },
        "required": [
          "customer_consent"
        ],
        "type": "object"
      },
      "watchlist_subscription_list": {
        "allOf": [
          {
            "properties": {
              "subscriptions": {
                "items": {
                  "$ref": "#/components/schemas/watchlist_subscription"
                },
                "type": "array"
              }
            },
            "required": [
              "subscriptions"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "watchlist_suppress": {
        "properties": {
          "provider_subject_id": {
            "description": "The id of the subject (person) for whom future alerts should be suppressed.\n",
            "type": "string"
          },
          "provider_subscription_id": {
            "description": "The provider's id for the subscription that caused the alert(s) that are being suppressed.\n",
            "type": "string"
          },
          "status": {
            "description": "The status of this suppression",
            "enum": [
              "SUPPRESS",
              "UNSUPPRESS"
            ],
            "type": "string"
          }
        },
        "required": [
          "provider_subscription_id",
          "provider_subject_id",
          "status"
        ],
        "type": "object"
      },
      "webhook": {
        "description": "Webhook object",
        "properties": {
          "description": {
            "description": "A description of what the webhook is used for",
            "type": "string"
          },
          "enabled_events": {
            "description": "A list of the events that will trigger the webhook",
            "items": {
              "$ref": "#/components/schemas/event_type1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique ID of the webhook",
            "format": "uuid",
            "type": "string"
          },
          "is_enabled": {
            "description": "Set the webhook to be enabled or disabled",
            "type": "boolean"
          },
          "last_updated": {
            "description": "Timestamp that this webhook was created or the last time any field was changed",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "description": "Additional information stored to the webhook",
            "maxLength": 1024,
            "type": "string"
          },
          "url": {
            "description": "URL that the webhook will send request to",
            "format": "uri",
            "maxLength": 1000,
            "type": "string"
          }
        },
        "required": [
          "url",
          "enabled_events",
          "is_enabled"
        ],
        "title": "Webhook",
        "type": "object"
      },
      "webhook_config": {
        "properties": {
          "custom_header": {
            "$ref": "#/components/schemas/custom_headers"
          },
          "password": {
            "description": "password for access webhook endpoint",
            "type": "string"
          },
          "url": {
            "description": "url of webhook endpoint",
            "type": "string"
          },
          "username": {
            "description": "username for access webhook endpoint",
            "type": "string"
          }
        },
        "type": "object"
      },
      "webhook_event": {
        "description": "name of the event",
        "type": "string"
      },
      "webhook_list": {
        "allOf": [
          {
            "properties": {
              "webhooks": {
                "description": "Array of webhooks",
                "items": {
                  "$ref": "#/components/schemas/webhook"
                },
                "type": "array"
              }
            },
            "required": [
              "webhooks"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/paginated_response"
          }
        ]
      },
      "webhook_request": {
        "properties": {
          "active": {
            "description": "indicates whether webhook is active",
            "type": "boolean"
          },
          "config": {
            "$ref": "#/components/schemas/webhook_config"
          },
          "events": {
            "description": "list of webhook events, use * to receive all notifications",
            "items": {
              "$ref": "#/components/schemas/webhook_event"
            },
            "type": "array"
          },
          "id": {
            "description": "id of the webhook",
            "example": "8cb3e9ba-6138-4257-817b-47d078bfb6bb",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "name of the webhook",
            "type": "string"
          }
        },
        "type": "object"
      },
      "webhook_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/webhook_request"
          },
          {
            "properties": {
              "creation_time": {
                "description": "The timestamp representing when the webhook request was made",
                "example": "Sat Mar 06 2021 21:36:27 GMT+0000 (Coordinated Universal Time)",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "last_modified_time": {
                "description": "The timestamp representing when the webhook was last modified",
                "example": "Sun Feb 14 2021 08:54:18 GMT+0000 (Coordinated Universal Time)",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "withdrawal_request_model": {
        "properties": {
          "account_type": {
            "enum": [
              "checking",
              "savings",
              "credit"
            ],
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "card_acceptor": {
            "$ref": "#/components/schemas/card_acceptor_model"
          },
          "card_token": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string"
          },
          "mid": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "card_token",
          "mid"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "api_key",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>\n",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Synctera API",
    "version": "0.6.7"
  },
  "openapi": "3.0.3",
  "paths": {
    "/accounts": {
      "get": {
        "description": "Get paginated list of Accounts associated",
        "operationId": "listAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_query"
          },
          {
            "$ref": "#/components/parameters/account_number"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/customer_id_query_one"
          },
          {
            "$ref": "#/components/parameters/first_name"
          },
          {
            "$ref": "#/components/parameters/last_name"
          },
          {
            "$ref": "#/components/parameters/tenant"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "description": "If true, the returned accounts will include relationships, aliases, balances and recent transactions.",
            "in": "query",
            "name": "has_details",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_list"
                }
              }
            },
            "description": "List of accounts"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List accounts",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a shadow mode or lead mode account. You need to determine the mode according to integrator configuration, and specify the required fields accordingly.\n\nShadow mode required fields:\n  - account_number\n  - status\n\nLead mode required fields:\n  - account_template_id\n  - relationships\n",
        "operationId": "createAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_creation"
              }
            }
          },
          "description": "Account to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Created account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          }
        },
        "summary": "Create an account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Accounts"
    },
    "/accounts/{account_id}": {
      "delete": {
        "description": "Delete account",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Delete account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get an account",
        "operationId": "getAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Get account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Patch account.\n\nImmutable fields:\n  - account_number\n  - account_type\n  - account_template_id\n\nPlease note:\n  - Other fields cannot be modified when access_status is FROZEN.\n  - access_status has to be patched individually without other fields.\n",
        "operationId": "patchAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account"
              }
            }
          },
          "description": "Account fields to be patched",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Updated account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Patch account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update account\n\nShadow mode required fields:\n  - account_number\n  - status\n\nLead mode required fields:\n  - All fields are required.\n\nPlease note:\n  - access_status needs to be in ACTIVE.\n  - PUT request cannot change access_status.\n",
        "operationId": "updateAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account"
              }
            }
          },
          "description": "Account to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Updated account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Update account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "account"
    },
    "/accounts/{account_id}/addresses": {
      "post": {
        "description": "Create account address",
        "operationId": "createAccountAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_address"
              }
            }
          },
          "description": "Account address to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_address"
                }
              }
            },
            "description": "Created account address"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Create address for an account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account Address"
    },
    "/accounts/{account_id}/addresses/{connect_id}": {
      "delete": {
        "description": "Delete account address",
        "operationId": "DeleteAccountAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/connect_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Delete address for an account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get account address by ID",
        "operationId": "getAccountAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/connect_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "has_details": {
                    "description": "Include the address information (e.g. street number) if set to True. Address reference only if set to false. Default is false",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_address"
                }
              }
            },
            "description": "Account address"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Get address for an account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update account address",
        "operationId": "updateAccountAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/connect_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_address"
              }
            }
          },
          "description": "Account address to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_address"
                }
              }
            },
            "description": "Updated account address"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Update address for an account",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account Address"
    },
    "/accounts/{account_id}/balance": {
      "get": {
        "description": "Get account balance",
        "operationId": "getAccountBalance",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "balance_type": {
                    "$ref": "#/components/schemas/balance_type"
                  },
                  "posting_date": {
                    "description": "Posting date of the balance. Default is today's date",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Account balance search conditions",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balance"
                }
              }
            },
            "description": "Account balance"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Get account balance",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Get account balance"
    },
    "/accounts/{account_id}/rdc/deposit": {
      "description": "The RDC deposits collection represents all the deposits made using remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves a paginated list of the deposits made using remote deposit capture associated with an account",
        "operationId": "listRdcDeposits",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deposit_list"
                }
              }
            },
            "description": "List of deposits made with remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          }
        },
        "summary": "List RDC Deposits",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a new deposit using remote deposit capture to an account\n",
        "operationId": "createRdcDeposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deposit"
              }
            }
          },
          "description": "Attributes of the RDC deposit to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deposit"
                }
              }
            },
            "description": "Successful creation of a deposit using remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Create an RDC Deposit",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "summary": "RDC Deposits"
    },
    "/accounts/{account_id}/rdc/deposit/{deposit_id}": {
      "description": "The RDC deposit represents one deposit made using remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves one deposit made using remote deposit capture associated with an account",
        "operationId": "getRdcDeposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/deposit_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deposit"
                }
              }
            },
            "description": "Successful retrieval of an RDC deposit"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Get RDC Deposit",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "summary": "RDC Deposit by Id"
    },
    "/accounts/{account_id}/rdc/images": {
      "description": "The RDC image collection represents all the images uploaded for remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves a paginated list of the ids of the images for remote deposit capture associated with an account",
        "operationId": "listRdcImageIds",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image_list"
                }
              }
            },
            "description": "List of check images made for remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          }
        },
        "summary": "List RDC Image Ids",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a new image for a remote deposit capture to an account\n",
        "operationId": "createRdcImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/image"
              }
            }
          },
          "description": "RDC image to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            },
            "description": "Successful creation of an image for remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          }
        },
        "summary": "Create an RDC Image",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "summary": "RDC Image"
    },
    "/accounts/{account_id}/rdc/images/{image_id}": {
      "description": "The RDC image represents one image uploaded for remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves one image for remote deposit capture associated with an account",
        "operationId": "getRdcImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/image_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            },
            "description": "Successful retrieval of an RDC image"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Get RDC Image",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "summary": "RDC Image by Id"
    },
    "/accounts/{account_id}/rdc/scans": {
      "description": "The RDC scan collection represents all the scans of uploaded images made for remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves a paginated list of the the scans of uploaded images made for remote deposit capture associated with an account",
        "operationId": "listRdcScans",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scan_list"
                }
              }
            },
            "description": "List of OCR scans of check images made for remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          }
        },
        "summary": "List RDC Scans",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a new scan of a check image made for a remote deposit capture to an account\n",
        "operationId": "createRdcScan",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/scan"
              }
            }
          },
          "description": "RDC scan to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scan"
                }
              }
            },
            "description": "Successful creation of a scan of a check image made for remote deposit capture"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Create an RDC Scan",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "summary": "RDC Scan"
    },
    "/accounts/{account_id}/rdc/scans/{scan_id}": {
      "description": "The RDC scan represents the OCR scan of the check images uploaded for remote deposit capture associated with an account\n",
      "get": {
        "description": "Retrieves one OCR scan of a check image for remote deposit capture associated with an account",
        "operationId": "getRdcScan",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/scan_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scan"
                }
              }
            },
            "description": "Successful retrieval of an RDC scan"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Get RDC Scan",
        "tags": [
          "RDC Deposits"
        ],
        "x-external": true
      },
      "summary": "RDC Scan by Id"
    },
    "/accounts/{account_id}/relationships": {
      "get": {
        "description": "List all customers of an account",
        "operationId": "listAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship_list"
                }
              }
            },
            "description": "List of account relationships"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "List account relationships",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "post": {
        "description": "Add a customer to an account",
        "operationId": "createAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/relationship"
              }
            }
          },
          "description": "Account relationship object",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship"
                }
              }
            },
            "description": "Account relationship object"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Create account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account Relationship"
    },
    "/accounts/{account_id}/relationships/{relationship_id}": {
      "delete": {
        "description": "Delete account relationship",
        "operationId": "DeleteAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/relationship_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Delete account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get account relationship by ID",
        "operationId": "getAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/relationship_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship"
                }
              }
            },
            "description": "Account relationship"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Get account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update account relationship. Only relationship_type can be updated. customer_id should not be modified.",
        "operationId": "updateAccountRelationship",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/relationship_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/relationship"
              }
            }
          },
          "description": "Account relationship to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship"
                }
              }
            },
            "description": "Updated account relationship"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Update account relationship",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Account Relationship"
    },
    "/accounts/{account_id}/transactions": {
      "get": {
        "description": "Get account transactions",
        "operationId": "getAccountTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_date": {
                    "description": "End date of the search range. Default is the current date",
                    "format": "date",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "Start date of the search range. Default is the date two weeks ago",
                    "format": "date",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Account transactions search condition",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction_list"
                }
              }
            },
            "description": "Account transactions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          }
        },
        "summary": "Get account transactions",
        "tags": [
          "Accounts"
        ],
        "x-external": true
      },
      "summary": "Get account transactions"
    },
    "/cards": {
      "description": "The Card object represents your customer's spending card.\n",
      "get": {
        "description": "List of cards matching query parameters\n",
        "operationId": "listCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query"
          },
          {
            "$ref": "#/components/parameters/account_id_query1"
          },
          {
            "$ref": "#/components/parameters/emboss_name_query"
          },
          {
            "$ref": "#/components/parameters/last_four_query"
          },
          {
            "$ref": "#/components/parameters/expiration_date_query"
          },
          {
            "$ref": "#/components/parameters/card_type_query"
          },
          {
            "$ref": "#/components/parameters/card_brand_query"
          },
          {
            "$ref": "#/components/parameters/form_query"
          },
          {
            "$ref": "#/components/parameters/card_product_id_query"
          },
          {
            "$ref": "#/components/parameters/card_status_query"
          },
          {
            "$ref": "#/components/parameters/postal_code_query"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_list_response"
                }
              }
            },
            "description": "Cards"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Cards",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "post": {
        "description": "Issue or reissue a new card for a customer\n",
        "operationId": "issueCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_issuance_request"
              }
            }
          },
          "description": "Card to issue",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Issue a Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/{card_id}": {
      "description": "The Card object represents your customer's spending card.\n",
      "get": {
        "description": "Get the details about a card that has been issued\n",
        "operationId": "getCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card fulfillment details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "patch": {
        "description": "Integrators can update the card resource to change status, update shipping (if the card hasn't been shipped) or edit metadata.\n",
        "operationId": "updateCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_edit_request"
              }
            }
          },
          "description": "Card edits",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card issued"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards"
    },
    "/cards/{card_id}/activate": {
      "description": "Activate a card\n",
      "post": {
        "description": "Activate a card\n",
        "operationId": "activateCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/card_activation"
              }
            }
          },
          "description": "Card activation code",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_response"
                }
              }
            },
            "description": "Card activated successfully"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Activate a card",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Card Activation"
    },
    "/cards/{card_id}/changes": {
      "get": {
        "description": "List card change history\n",
        "operationId": "listChanges",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_changes_list"
                }
              }
            },
            "description": "List of card changes"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Card Changes",
        "tags": [
          "Cards"
        ],
        "x-external": true
      }
    },
    "/cards/{card_id}/client_token": {
      "description": "Client access token for accessing privileged details about a card\n",
      "post": {
        "description": "Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner.\n",
        "operationId": "getClientAccessToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/client_token"
                }
              }
            },
            "description": "Client token"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a client token",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Client Access Token"
    },
    "/cards/products": {
      "get": {
        "operationId": "GetCardProducts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_product_list"
                }
              }
            },
            "description": "List of available card products"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Cards Products",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards Products"
    },
    "/cards/products/{card_product_id}": {
      "get": {
        "operationId": "GetCardProduct",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_product_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_product"
                }
              }
            },
            "description": "Card product details"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get details about a card product",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Cards Product"
    },
    "/cards/single_use_token": {
      "post": {
        "description": "This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user\n",
        "operationId": "getClientSingleUseToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/single_use_token_request"
              }
            }
          },
          "description": "User token details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/single_use_token_response"
                }
              }
            },
            "description": "Token Created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessible_entity"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get single-use token",
        "tags": [
          "Cards"
        ],
        "x-external": true
      },
      "summary": "Get Single-Use Token"
    },
    "/cards/transaction_simulations/authorization": {
      "post": {
        "description": "Simulate an `authorization` type transaction by including the `card_token` and other authorization details in your request.\n",
        "operationId": "simulateAuthorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_request_model"
              }
            }
          },
          "description": "Authorization details",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate authorization",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Authorization"
    },
    "/cards/transaction_simulations/authorization/advice": {
      "post": {
        "description": "An authorization advice allows an amount to be decreased after the authorization. This endpoint allows you to simulate post-swipe adjustments.\n\nSimulate an `authorization.advice` type transaction by including the `original_transaction_token` and other authorization details in your request.\n",
        "operationId": "simulateAuthorizationAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization_advice_model"
              }
            }
          },
          "description": "Authorization advice details",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate authorization advice",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Authorization Advice"
    },
    "/cards/transaction_simulations/clearing": {
      "post": {
        "description": "Simulate an `authorization.clearing` type transaction by including the `original_transaction_token` and `amount` in your request. To simulate a refund type transaction, set the `is_refund` field to true.\n",
        "operationId": "simulateClearing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clearing_model"
              }
            }
          },
          "description": "Transaction clearing or refund details",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate clearing or refund",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Clearing or Refund"
    },
    "/cards/transaction_simulations/financial": {
      "post": {
        "description": "A \"financial\" is a transaction message class that includes ATM transactions, PIN-debit transactions, and balance inquiries.\n\nSimulate a `pindebit` type transaction by including the `card_token` and `amount` in your request.\n",
        "operationId": "simulateFinancial",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/financial_request_model"
              }
            }
          },
          "description": "Financial details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate financial",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Financial"
    },
    "/cards/transaction_simulations/financial/advice": {
      "post": {
        "description": "Simulate a financial advice by including the `original_transaction_token` and other authorization details in JSON format in the body of the request.\n",
        "operationId": "simulateFinancialAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization_advice_model"
              }
            }
          },
          "description": "Financial advice details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate financial advice",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Financial Advice"
    },
    "/cards/transaction_simulations/financial/balance_inquiry": {
      "post": {
        "description": "Simulate a `pindebit.balanceinquiry` type transaction by sending a POST request to the `/simulate/financial/balanceinquiry` endpoint.\n",
        "operationId": "simulateBalanceInquiry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/balance_inquiry_request_model"
              }
            }
          },
          "description": "Balance inquiry details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate balance inquiry",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Balance Inquiry"
    },
    "/cards/transaction_simulations/financial/original_credit": {
      "post": {
        "description": "This Original Credit Transaction (OCT) enables the cardholder to receive funds on the specified card from an external source via the card network. Use this endpoint to simulate a transaction that is similar to a wire transfer and not linked to any purchase.\n\nSimulate an OCT by including the `card_token`, `amount`, `mid`, and `type` in your request.\n",
        "operationId": "simulateOriginalCredit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/original_credit_request_model"
              }
            }
          },
          "description": "OCT details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate OCT",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate OCT"
    },
    "/cards/transaction_simulations/financial/withdrawal": {
      "post": {
        "description": "Simulate a `pindebit.atm.withdrawal` type transaction by including the `card_token` and `amount` in your request.\n",
        "operationId": "simulateWithdrawal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/withdrawal_request_model"
              }
            }
          },
          "description": "ATM withdrawal details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate ATM withdrawal",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate ATM Withdrawal"
    },
    "/cards/transaction_simulations/reversal": {
      "post": {
        "description": "A reversal releases the hold that was placed on account funds by an authorization, thus returning the funds to the account.\n\nSimulate an `authorization.reversal` type transaction by including the `original_transaction_token` and `amount` in your request.\n",
        "operationId": "simulateReversal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reversal_model"
              }
            }
          },
          "description": "Reversal details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simulation_response_model"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Simulate reversal",
        "tags": [
          "Card Transaction Simulations"
        ],
        "x-external": true
      },
      "summary": "Simulate Reversal"
    },
    "/customers": {
      "description": "The Customer object represents your customer's identity.  You can then verify the identity of this customer and associate them with other people and accounts\n",
      "get": {
        "description": "Retrieves paginated list of Customers associated with the authorized requester",
        "operationId": "listCustomers",
        "parameters": [
          {
            "$ref": "#/components/parameters/first_name"
          },
          {
            "$ref": "#/components/parameters/last_name"
          },
          {
            "$ref": "#/components/parameters/phone_number"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/ssn_last_4"
          },
          {
            "$ref": "#/components/parameters/status1"
          },
          {
            "$ref": "#/components/parameters/tenant"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_list"
                }
              }
            },
            "description": "List of customers"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Customers",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "post": {
        "description": "The customer object represents your customer's identity. You can then verify the identity of this customer and associate them with other people and accounts.\n",
        "operationId": "createCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_in_path"
              }
            }
          },
          "description": "Customer to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_path"
                }
              }
            },
            "description": "Created customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer"
    },
    "/customers/{customer_id}": {
      "description": "This resource represents a customer.  Each customer is identified by a customer `ID`\n",
      "get": {
        "description": "Get Customer based on ID",
        "operationId": "getCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_path"
                }
              }
            },
            "description": "Customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "patch": {
        "operationId": "patchCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_customer"
              }
            }
          },
          "description": "Customer to be patched",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_path"
                }
              }
            },
            "description": "Patched customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Patch Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update customer based on ID\nRequired fields:\n  - status\n",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_in_path"
              }
            }
          },
          "description": "Customer to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_in_path"
                }
              }
            },
            "description": "Updated customer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update Customer",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer"
    },
    "/customers/{customer_id}/accounts": {
      "get": {
        "description": "Get paginated list of Accounts associated with user",
        "operationId": "listCustomerAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_list"
                }
              }
            },
            "description": "List of accounts"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List accounts",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer Accounts"
    },
    "/customers/{customer_id}/accounts/{account_id}": {
      "get": {
        "description": "Get a specific customer account",
        "operationId": "getCustomerAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/account_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Account"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get customer account",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer Accounts"
    },
    "/customers/{customer_id}/addresses": {
      "get": {
        "description": "Retrieves paginated list of addresses associated with a customer",
        "operationId": "listCustomerAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_list"
                }
              }
            },
            "description": "List of addresses"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List customer addresses",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer Addresses"
    },
    "/customers/{customer_id}/disclosures": {
      "description": "Disclosures to be made to customers\n",
      "get": {
        "description": "Retrieves paginated list of disclosures associated with the authorized requester",
        "operationId": "listDisclosures",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disclosure_response"
                }
              }
            },
            "description": "List of disclosures"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Disclosures",
        "tags": [
          "Disclosures"
        ],
        "x-external": true
      },
      "post": {
        "description": "Disclosures to be made to customers\n",
        "operationId": "createDisclosure",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disclosure"
              }
            }
          },
          "description": "Disclosure to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disclosure"
                }
              }
            },
            "description": "Created disclosure"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a Disclosure",
        "tags": [
          "Disclosures"
        ],
        "x-external": true
      },
      "summary": "Disclosures"
    },
    "/customers/{customer_id}/employment": {
      "get": {
        "description": "Get records of customer employment",
        "operationId": "getAllCustomerEmployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/include_history"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employment_list"
                }
              }
            },
            "description": "List of customer employment records"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List customer employment records",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a record of customer employment",
        "operationId": "createCustomerEmployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/employment"
              }
            }
          },
          "description": "Customer employment record to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employment"
                }
              }
            },
            "description": "Customer employment record created"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create employment record",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer employment group operations"
    },
    "/customers/{customer_id}/employment/{employment_id}": {
      "get": {
        "description": "Get a single record of customer employment",
        "operationId": "getPartyEmployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/employment_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employment"
                }
              }
            },
            "description": "Customer employment record"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get customer employment record",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update a single record of customer employment",
        "operationId": "updatePartyEmployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/employment_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/employment"
              }
            }
          },
          "description": "Party Employment to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employment"
                }
              }
            },
            "description": "Updated customer employment record"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update customer employment record",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Customer employment operations"
    },
    "/customers/{customer_id}/risk_ratings": {
      "get": {
        "description": "Get list of customer risk ratings",
        "operationId": "getAllCustomerRiskRatings",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/include_history"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/risk_rating_list"
                }
              }
            },
            "description": "List of customer risk ratings"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List customer risk ratings",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create customer risk rating",
        "operationId": "createCustomerRiskRating",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/risk_rating"
              }
            }
          },
          "description": "Create a customer risk rating. With a risk rating in request body, Synctera\nvalidates the data and saves it. With no request body, Synctera runs an\nautomated risk analysis and saves the result.\n",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/risk_rating"
                }
              }
            },
            "description": "Created risk rating"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create customer risk rating",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Risk Rating group operations"
    },
    "/customers/{customer_id}/risk_ratings/{risk_rating_id}": {
      "get": {
        "description": "Get a customer risk rating",
        "operationId": "getCustomerRiskRating",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/risk_rating_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/risk_rating"
                }
              }
            },
            "description": "Customer risk rating of id"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get customer risk rating",
        "tags": [
          "Customers"
        ],
        "x-external": true
      },
      "summary": "Risk Rating"
    },
    "/customers/{customer_id}/verifications": {
      "description": "List verification results\n",
      "get": {
        "description": "List verification results",
        "operationId": "listVerifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/include_history1"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verification_result_list"
                }
              }
            },
            "description": "List of customer verification results"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List Verification Results",
        "tags": [
          "KYC Verification"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a verification result for a customer\n",
        "operationId": "createCustomerVerificationResult",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_verification_result"
              }
            }
          },
          "description": "Customer verification result to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verification_result"
                }
              }
            },
            "description": "Created customer verification result"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a Customer Verification Result",
        "tags": [
          "KYC Verification"
        ],
        "x-external": true
      },
      "summary": "List Verification Results"
    },
    "/customers/{customer_id}/verifications/{verification_id}": {
      "description": "Get Verification by ID\n",
      "get": {
        "description": "Get verification result",
        "operationId": "getVerification",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/verification_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verification_result"
                }
              }
            },
            "description": "Verification result"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Verification Result",
        "tags": [
          "KYC Verification"
        ],
        "x-external": true
      },
      "summary": "Verification"
    },
    "/customers/{customer_id}/verify": {
      "description": "Verify the customer's identity\n",
      "post": {
        "description": "Initiate identity verification and run the specified identity checks\n",
        "operationId": "verifyCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_verification"
              }
            }
          },
          "description": "Customer verification request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_verify_response"
                }
              }
            },
            "description": "Customer verification result"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Verify a customer's identity",
        "tags": [
          "KYC Verification"
        ],
        "x-external": true
      },
      "summary": "Verify"
    },
    "/customers/{customer_id}/watchlists/alerts": {
      "description": "List, retrieve, or update watchlist alerts.\n",
      "get": {
        "operationId": "listWatchlistAlerts",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_alert_list"
                }
              }
            },
            "description": "List of watchlist alerts"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List watchlist monitoring alerts for a customer",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "summary": "Subscriptions to watchlist alerts"
    },
    "/customers/{customer_id}/watchlists/alerts/{alert_id}": {
      "description": "Retrieve or update a single watchlist alert.\n",
      "get": {
        "operationId": "getWatchlistAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/alert_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_alert"
                }
              }
            },
            "description": "A single watchlist alert"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve watchlist monitoring alert",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "put": {
        "operationId": "updateWatchlistAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/alert_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/watchlist_alert"
              }
            }
          },
          "description": "A watchlist body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Watchlist alert was updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update watchlist alert",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "summary": "Retrieve or update a single watchlist alert."
    },
    "/customers/{customer_id}/watchlists/subscriptions": {
      "description": "Create, list, or retrieve watchlist subscriptions\n",
      "get": {
        "operationId": "listWatchlistSubscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_subscription_list"
                }
              }
            },
            "description": "List of watchlist subscriptions"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List watchlist monitoring subscriptions for a customer",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "post": {
        "operationId": "watchlistSubscribe",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/watchlist_subscription"
              }
            }
          },
          "description": "A watchlist subscription",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_subscription"
                }
              }
            },
            "description": "New watchlist subscription"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Subscribe a customer to watchlist monitoring",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "summary": "Subscriptions to watchlist monitoring"
    },
    "/customers/{customer_id}/watchlists/subscriptions/{subscription_id}": {
      "description": "Retrieve or update a single watchlist subscription\n",
      "get": {
        "operationId": "getWatchlistSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/subscription_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_subscription"
                }
              }
            },
            "description": "A single watchlist subscription"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Retrieve watchlist monitoring subscription",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "put": {
        "operationId": "updateWatchlistSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/subscription_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/watchlist_subscription"
              }
            }
          },
          "description": "Watchlist monitoring subscription to be updated. The only field that matters is `status`; all other fields are ignored.\n",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/watchlist_subscription"
                }
              }
            },
            "description": "Updated watchlist subscription"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update watchlist monitoring subscription",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "summary": "Watchlist monitoring subscription"
    },
    "/customers/{customer_id}/watchlists/suppressions": {
      "description": "Suppress or unsuppress current and future alerts for the given subject (person).\n",
      "post": {
        "operationId": "suppressWatchlistEntityAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/watchlist_suppress"
              }
            }
          },
          "description": "A watchlist suppression object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Watchlist alerts belonging to entity was updated"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Suppress entity alert",
        "tags": [
          "Watchlist"
        ],
        "x-external": true
      },
      "summary": "Update suppression of watchlist alerts for one subject"
    },
    "/external_accounts": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "get": {
        "description": "Returns a list of all external accounts assigned to customers.\n",
        "operationId": "listExternalAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_query_array"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_accounts_list"
                }
              }
            },
            "description": "List of external accounts"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List external accounts",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/{external_account_id}": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "get": {
        "description": "Returns an external account, given an external account ID.\n",
        "operationId": "getExternalAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/external_account_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "The external account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get an external account",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/external_accounts/add_vendor_accounts": {
      "description": "The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.\n",
      "post": {
        "description": "Add external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added, so it's important that the caller checks the response body.\n",
        "operationId": "addVendorExternalAccounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_vendor_accounts_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add_vendor_accounts_response"
                }
              }
            },
            "description": "Result of adding accounts through the vendor.\n"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Add external accounts through a vendor, such as Plaid.",
        "tags": [
          "External Accounts"
        ],
        "x-external": true
      },
      "summary": "External Accounts"
    },
    "/reconciliations": {
      "description": "The Reconcilations collections represents the jobs reconciling transactions.\n",
      "get": {
        "description": "Retrieves paginated list of reconciliations",
        "operationId": "listReconciliations",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reconciliation_list"
                }
              }
            },
            "description": "List of reconciliations"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List reconciliations",
        "tags": [
          "Reconciliations"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a new reconciliation job\n",
        "operationId": "createReconciliation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reconciliation_input"
              }
            }
          },
          "description": "Reconciliation to perform"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reconciliation"
                }
              }
            },
            "description": "Successful creation of a reconciliation"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a reconciliation",
        "tags": [
          "Reconciliations"
        ],
        "x-external": true
      },
      "summary": "Reconciliations"
    },
    "/reconciliations/{reconciliation_id}": {
      "description": "The Reconcilations collections represents the jobs reconciling transactions.\n",
      "get": {
        "description": "Retrieves one reconciliation by id",
        "operationId": "getReconciliation",
        "parameters": [
          {
            "$ref": "#/components/parameters/reconciliation_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reconciliation"
                }
              }
            },
            "description": "Successful retrieval of a reconciliation"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "summary": "Get reconciliation",
        "tags": [
          "Reconciliations"
        ],
        "x-external": true
      },
      "summary": "Reconciliation by ID"
    },
    "/transactions/a2a_transfer": {
      "description": "Transfer amount from account to account under the same customer",
      "post": {
        "description": "Transfer amount under the same customer",
        "operationId": "a2aTransfer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/a2a_transfer"
              }
            }
          },
          "description": "Account to account transfer to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/a2a_transfer"
                }
              }
            },
            "description": "Created account to account transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "461": {
            "$ref": "#/components/responses/account_closed"
          },
          "462": {
            "$ref": "#/components/responses/insufficient_funds"
          },
          "463": {
            "$ref": "#/components/responses/account_locked"
          },
          "464": {
            "$ref": "#/components/responses/customer_locked"
          },
          "465": {
            "$ref": "#/components/responses/counterparty_account_locked"
          },
          "466": {
            "$ref": "#/components/responses/counterparty_account_closed"
          },
          "467": {
            "$ref": "#/components/responses/currency_not_supported"
          },
          "468": {
            "$ref": "#/components/responses/recurrence_not_supported"
          },
          "469": {
            "$ref": "#/components/responses/execution_date_in_the_past"
          },
          "470": {
            "$ref": "#/components/responses/execution_date_in_the_future"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Account to account transfer",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "summary": "Transfer amount from account to account under the same customer"
    },
    "/transactions/a2a_transfer/{payment_id}": {
      "description": "Transfer amount from account to account under the same customer",
      "get": {
        "description": "Get account to account transfer",
        "operationId": "getA2ATransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/payment_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/a2a_transfer"
                }
              }
            },
            "description": "Account to account transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get account to account transfer",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "post": {
        "description": "Reverse account to account transfer",
        "operationId": "reverseA2ATransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/payment_id"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/a2a_transfer"
                }
              }
            },
            "description": "Reversed account to account transfer"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "471": {
            "$ref": "#/components/responses/cannot_reverse"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Reverse existing account to account transfer",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "summary": "Transfer amount from account to account under the same customer"
    },
    "/transactions/a2a_transfer/list/{customer_id}": {
      "get": {
        "description": "Transfer amount under the same customer",
        "operationId": "listA2ATransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/a2a_transfer_list"
                }
              }
            },
            "description": "Account to account transfer list"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List account to account transfer",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "summary": "Transfer amount from account to account under the same customer"
    },
    "/transactions/ach": {
      "get": {
        "description": "Get a list of pending ACH",
        "operationId": "getOutgoingACH",
        "parameters": [
          {
            "$ref": "#/components/parameters/execution_date"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_outgoing_list"
                }
              }
            },
            "description": "List of pending ACH"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get Pending ACH List",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create an outgoing ACH",
        "operationId": "createOutgoingACH",
        "parameters": [
          {
            "$ref": "#/components/parameters/mfa_token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ach_outgoing"
              }
            }
          },
          "description": "Outgoing ACH to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_outgoing"
                }
              }
            },
            "description": "Created outgoing ACH"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create outgoing ACH",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "summary": "Outgoing ACH"
    },
    "/transactions/ach/{payment_id}": {
      "delete": {
        "description": "Delete a pending outgoing ACH",
        "operationId": "deleteOutgoingACH",
        "parameters": [
          {
            "$ref": "#/components/parameters/payment_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete pending outgoing ACH",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update an outgoing ACH",
        "operationId": "updateOutgoingACH",
        "parameters": [
          {
            "$ref": "#/components/parameters/payment_id"
          },
          {
            "$ref": "#/components/parameters/mfa_token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ach_outgoing"
              }
            }
          },
          "description": "Outgoing ACH to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_outgoing"
                }
              }
            },
            "description": "Updated outgoing ACH"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update outgoing ACH",
        "tags": [
          "Transactions"
        ],
        "x-external": true
      },
      "summary": "Outgoing ACH"
    },
    "/webhooks": {
      "get": {
        "description": "List all webhooks",
        "operationId": "listWebhooks1",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          },
          {
            "in": "query",
            "name": "is_enabled_only",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_list"
                }
              }
            },
            "description": "List of webhooks"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List webhooks",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a webhook",
        "operationId": "createWebhook1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "description": "Webhook to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Created webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}": {
      "delete": {
        "description": "Delete a webhook",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id1"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Delete a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "get": {
        "description": "Get a webhook",
        "operationId": "getWebhook1",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id1"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "put": {
        "description": "Update a webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "description": "Webhook to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "Created webhook"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Update a webhook",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}/events": {
      "get": {
        "description": "List webhook events. This response will not associate with the event response history.",
        "operationId": "listEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id1"
          },
          {
            "description": "Start date of the search range",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "End date of the search range",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page_token"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_list"
                }
              }
            },
            "description": "List of webhook events"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "List webhook events",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}/events/{event_id}": {
      "get": {
        "description": "Get webhook event by ID",
        "operationId": "getEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id1"
          },
          {
            "description": "Webhook event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "f4745867-f8a3-417f-a812-f12616d5719d",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Get webhook event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/{webhook_id}/events/{event_id}/resend": {
      "post": {
        "description": "Resend a webhook event",
        "operationId": "resendEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/webhook_id1"
          },
          {
            "description": "Webhook event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "example": "e743aec5-cc4a-4d1a-a0a0-9d4b46f3b563",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Delay the event triggering in seconds",
            "in": "query",
            "name": "delay",
            "schema": {
              "maximum": 3600,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Resent webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Resend an event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/secret": {
      "delete": {
        "description": "Revoke the existing webhook secret. If this is called at the rolling secret time, then both old and new secrets will be revoked",
        "operationId": "revokeSecret",
        "responses": {
          "200": {
            "description": "Secret has been revoked"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Revoke the secret",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "post": {
        "description": "Create a webhook secret. The secret will be used to verify all subsequent webhook request signature.",
        "operationId": "createSecret",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "secret": {
                      "description": "Generated secret. Do not share. This secret will be used to verify that webhook requests were sent from Synctera.",
                      "maxLength": 64,
                      "minLength": 64,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Webhook secret response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/already_exists"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Create a secret",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      },
      "put": {
        "description": "Replace an existing webhook secret immediately or as part of rotation. This new secret will be used to verify all subsequent webhook request signature.",
        "operationId": "replaceSecret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_rolling_secret": {
                    "description": "Set true to let the current secret expire in the next 24 hours. Set false to let the current secret expire immediately.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_at": {
                      "description": "Timestamp that the old secret is delete",
                      "format": "date-time",
                      "type": "string"
                    },
                    "secret": {
                      "description": "Generated secret. Do not share. This secret will be used to verify that webhook requests were sent from Synctera.",
                      "maxLength": 64,
                      "minLength": 64,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Webhook secret response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Replace an existing secret",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    },
    "/webhooks/trigger": {
      "post": {
        "description": "Trigger an specific event for webhook testing purpose",
        "operationId": "triggerEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "event": {
                    "$ref": "#/components/schemas/event_type1"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Provide an event type to trigger",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Triggered webhook event"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }
        },
        "summary": "Trigger an event",
        "tags": [
          "Webhooks"
        ],
        "x-external": true
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "description": "Production",
      "url": "https://api.synctera.com/v0"
    },
    {
      "description": "Sandbox (no real world financial impact)",
      "url": "https://api-sandbox.synctera.com/v0"
    }
  ],
  "tags": [
    {
      "description": "Request to create and manage accounts",
      "name": "Accounts"
    },
    {
      "description": "Requests to issue and manage cards",
      "name": "Cards"
    },
    {
      "description": "Requests to create and manage customers",
      "name": "Customers"
    },
    {
      "description": "The Disclosures resource is used to track the status of disclosures and\nensure that customers have been shown the necessary disclosures to meet\nregulatory obligations.\n",
      "name": "Disclosures"
    },
    {
      "description": "The External Account resource is used for managing links to accounts\nthat operate outside of the Synctera ecosystem.\n",
      "name": "External Accounts"
    },
    {
      "description": "Requests to intiate customer verification",
      "name": "KYC Verification"
    },
    {
      "description": "Request to create and manage deposits using remote deposit capture",
      "name": "RDC Deposits"
    },
    {
      "description": "Requests to create and manage reconciliation",
      "name": "Reconciliations"
    },
    {
      "description": "Requests to generate simulated transactions",
      "name": "Card Transaction Simulations"
    },
    {
      "description": "Request create and manage different types of transactions",
      "name": "Transactions"
    },
    {
      "description": "Request to enroll, renew, or cancel watchlist monitors",
      "name": "Watchlist"
    },
    {
      "description": "Requests to create and manage webhooks",
      "name": "Webhooks"
    }
  ]
}
