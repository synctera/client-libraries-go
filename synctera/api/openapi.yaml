openapi: 3.0.3
info:
  description: |
    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Synctera API
  version: 0.5.0
servers:
- description: Production
  url: https://api.synctera.com/v0
- description: Sandbox (no real world financial impact)
  url: https://api-sandbox.synctera.com/v0
security:
- bearerAuth: []
tags:
- description: Request to create and manage accounts
  name: Accounts
- description: Requests to create and manage customers
  name: Customers
- description: |
    The Disclosures resource is used to track the status of disclosures and
    ensure that customers have been shown the necessary disclosures to meet
    regulatory obligations.
  name: Disclosures
- description: Requests to intiate customer verification
  name: KYC Verification
- description: Request to create and manage deposits using remote deposit capture
  name: RDC Deposits
- description: Requests to create and manage reconciliation
  name: Reconciliations
- description: Request create and manage different types of transactions
  name: Transactions
- description: Requests to create and manage webhooks
  name: Webhooks
paths:
  /accounts:
    get:
      description: Get paginated list of Accounts associated
      operationId: listAccounts
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      - description: Customer ID
        explode: true
        in: query
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: If true, the returned accounts will include relationships, aliases,
          balances and recent transactions.
        explode: true
        in: query
        name: has_details
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_list'
          description: List of accounts
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List accounts
      tags:
      - Accounts
    post:
      description: Create a shadow mode or lead mode account. You need to determine
        the mode according to integrator configuration, and specify the required fields
        accordingly.
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        description: Account to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Created account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessible entity request response
      summary: Create an account
      tags:
      - Accounts
    summary: Accounts
  /accounts/{account_id}:
    delete:
      description: Delete account
      operationId: deleteAccount
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Delete account
      tags:
      - Accounts
    get:
      description: Get an account
      operationId: getAccount
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get account
      tags:
      - Accounts
    put:
      description: Update account
      operationId: updateAccount
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        description: Account to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Updated account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Update account
      tags:
      - Accounts
    summary: account
  /accounts/{account_id}/balance:
    get:
      description: Get account balance
      operationId: getAccountBalance
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                posting_date:
                  description: Posting date of the balance. Default is today's date
                  format: date-time
                  type: string
                balance_type:
                  $ref: '#/components/schemas/balance_type'
              type: object
        description: Account balance search conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balance'
          description: Account balance
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get account balance
      tags:
      - Accounts
    summary: Get account balance
  /accounts/{account_id}/transactions:
    get:
      description: Get account transactions
      operationId: getAccountTransactions
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                start_date:
                  description: Start date of the search range. Default is the date
                    two weeks ago
                  format: date
                  type: string
                end_date:
                  description: End date of the search range. Default is the current
                    date
                  format: date
                  type: string
              type: object
        description: Account transactions search condition
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction_list'
          description: Account transactions
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get account transactions
      tags:
      - Accounts
    summary: Get account transactions
  /accounts/{account_id}/addresses:
    post:
      description: Create account address
      operationId: createAccountAddress
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_address'
        description: Account address to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_address'
          description: Created account address
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Create address for an account
      tags:
      - Accounts
    summary: Account Address
  /accounts/{account_id}/addresses/{connect_id}:
    delete:
      description: Delete account address
      operationId: DeleteAccountAddress
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Connect ID of the account associate with the account entity
        explode: false
        in: path
        name: connect_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Delete address for an account
      tags:
      - Accounts
    get:
      description: Get account address by ID
      operationId: getAccountAddress
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Connect ID of the account associate with the account entity
        explode: false
        in: path
        name: connect_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                has_details:
                  description: Include the address information (e.g. street number)
                    if set to True. Address reference only if set to false. Default
                    is false
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_address'
          description: Account address
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get address for an account
      tags:
      - Accounts
    put:
      description: Update account address
      operationId: updateAccountAddress
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Connect ID of the account associate with the account entity
        explode: false
        in: path
        name: connect_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_address'
        description: Account address to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_address'
          description: Updated account address
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Update address for an account
      tags:
      - Accounts
    summary: Account Address
  /customers/prospect:
    post:
      description: |
        Creates a prospect and returns an unique identifier. Use this ID to track disclosures displayed during the KYC flow.  The prospect can be upgraded to a `customer` by updated `customer` resource with collected information.
      operationId: createProspect
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProspectResponse'
          description: Prospect/Customer id
          links:
            createCustomer:
              description: |
                The `id` value returned in the response can be used as the `id` parameter when creating or getting a customer
              operationId: createCustomer
              parameters:
                id: $response.body#/id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Prospect
      tags:
      - Customers
    summary: Prospect
  /customers:
    description: |
      The Customer object represents your customer's identity.  You can then verify the identity of this customer and associate them with other people and accounts
    get:
      description: Retrieves paginated list of Customers associated with the authorized
        requester
      operationId: listCustomers
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_list'
          description: List of customers
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Customers
      tags:
      - Customers
    post:
      description: |
        The customer object represents your customer's identity. You can then verify the identity of this customer and associate them with other people and accounts
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
        description: Customer to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
          description: Created customer
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Customer
      tags:
      - Customers
    summary: Customer
  /customers/{customer_id}:
    description: |
      This resource represents a customer.  Each customer is identified by an `ID`
    get:
      description: Get Customer based on ID
      operationId: getCustomer
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
          description: Customer
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Customer
      tags:
      - Customers
    patch:
      operationId: patchCustomer
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
        description: Customer to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
          description: Patched customer
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch Customer
      tags:
      - Customers
    put:
      operationId: updateCustomer
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
        description: Customer to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
          description: Updated customer
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Customer
      tags:
      - Customers
    summary: Customer
  /customers/{customer_id}/accounts:
    get:
      description: Get paginated list of Accounts associated with user
      operationId: listCustomerAccounts
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_list'
          description: List of accounts
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List accounts
      tags:
      - Customers
    summary: Customer Accounts
  /customers/{customer_id}/accounts/{account_id}:
    get:
      description: Get a specific customer account
      operationId: getCustomerAccount
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: Account
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get customer account
      tags:
      - Customers
    summary: Customer Accounts
  /customers/{customer_id}/disclosures:
    description: |
      Disclosures to be made to customers
    get:
      description: Retrieves paginated list of disclosures associated with the authorized
        requester
      operationId: listDisclosures
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure_response'
          description: List of disclosures
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Disclosures
      tags:
      - Disclosures
    post:
      description: |
        Disclosures to be made to customers
      operationId: createDisclosure
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disclosure'
        description: Disclosure to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure'
          description: Created disclosure
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Disclosure
      tags:
      - Disclosures
    summary: Disclosures
  /customers/{customer_id}/verify:
    description: |
      Verify the customers identity
    post:
      description: |
        This will intiate identity verification and run through the specified identity checks
      operationId: verifyCustomer
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification'
        description: Customer verification
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification'
          description: Customer verification
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Verify a Customer
      tags:
      - KYC Verification
    summary: Verify
  /customers/{customer_id}/verifications:
    description: |
      List verification results
    get:
      description: List verification results
      operationId: listVerifications
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result_list'
          description: List of customer verification results
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Verification Results
      tags:
      - KYC Verification
    post:
      description: |
        Create a verification result for a customer
      operationId: createCustomerVerificationResult
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification_result'
        description: Customer verification result to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
          description: Created customer verification result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Customer Verification Result
      tags:
      - KYC Verification
    summary: List Verification Results
  /customers/{customer_id}/verifications/{verification_id}:
    description: |
      Get Verification by ID
    get:
      description: Get verification result
      operationId: getVerification
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Verification ID
        explode: false
        in: path
        name: verification_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
          description: Verification result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Verification Result
      tags:
      - KYC Verification
    summary: Verification
  /customers/{customer_id}/documents:
    get:
      description: Get paginated list of Documents associated with user
      operationId: listDocuments
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document_list'
          description: List of documents
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Documents
      tags:
      - KYC Verification
    post:
      description: |
        Upload a Customer's document.  This document can be used to verify identity
      operationId: createDocument
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document'
        description: Document to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Created document
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Document
      tags:
      - KYC Verification
    summary: Document
  /customers/{customer_id}/documents/{document_id}:
    get:
      description: Get Document based on ID
      operationId: getDocument
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Document ID
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Document
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Document
      tags:
      - KYC Verification
    patch:
      operationId: patchDocument
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Document ID
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document'
        description: Document to patch
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Patched document
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch Document
      tags:
      - KYC Verification
    put:
      operationId: updateDocument
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Document ID
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document'
        description: Document to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Updated document
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Document
      tags:
      - KYC Verification
    summary: Document by ID
  /accounts/{account_id}/rdc/deposit:
    description: |
      The RDC deposits collection represents all the deposits made using remote deposit capture associated with an account
    get:
      description: Retrieves a paginated list of the deposits made using remote deposit
        capture associated with an account
      operationId: listRdcDeposits
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit_list'
          description: List of deposits made with remote deposit capture
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
      summary: List RDC Deposits
      tags:
      - RDC Deposits
    post:
      description: |
        Create a new deposit using remote deposit capture to an account
      operationId: createRdcDeposit
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deposit'
        description: Attributes of the RDC deposit to create
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit'
          description: Successful creation of a deposit using remote deposit capture
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Create an RDC Deposit
      tags:
      - RDC Deposits
    summary: RDC Deposits
  /accounts/{account_id}/rdc/deposit/{deposit_id}:
    description: |
      The RDC deposit represents one deposit made using remote deposit capture associated with an account
    get:
      description: Retrieves one deposit made using remote deposit capture associated
        with an account
      operationId: getRdcDeposit
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of a deposit for a remote deposit capture
        explode: false
        in: path
        name: deposit_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit'
          description: Successful retrieval of an RDC deposit
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Get RDC Deposit
      tags:
      - RDC Deposits
    summary: RDC Deposit by Id
  /accounts/{account_id}/rdc/images:
    description: |
      The RDC image collection represents all the images uploaded for remote deposit capture associated with an account
    get:
      description: Retrieves a paginated list of the ids of the images for remote
        deposit capture associated with an account
      operationId: listRdcImageIds
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image_list'
          description: List of check images made for remote deposit capture
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
      summary: List RDC Image Ids
      tags:
      - RDC Deposits
    post:
      description: |
        Create a new image for a remote deposit capture to an account
      operationId: createRdcImage
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image'
        description: RDC image to create
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image'
          description: Successful creation of an image for remote deposit capture
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
      summary: Create an RDC Image
      tags:
      - RDC Deposits
    summary: RDC Image
  /accounts/{account_id}/rdc/images/{image_id}:
    description: |
      The RDC image represents one image uploaded for remote deposit capture associated with an account
    get:
      description: Retrieves one image for remote deposit capture associated with
        an account
      operationId: getRdcImage
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of an image uploaded for a remote deposit capture
        explode: false
        in: path
        name: image_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image'
          description: Successful retrieval of an RDC image
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Get RDC Image
      tags:
      - RDC Deposits
    summary: RDC Image by Id
  /accounts/{account_id}/rdc/scans:
    description: |
      The RDC scan collection represents all the scans of uploaded images made for remote deposit capture associated with an account
    get:
      description: Retrieves a paginated list of the the scans of uploaded images
        made for remote deposit capture associated with an account
      operationId: listRdcScans
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scan_list'
          description: List of OCR scans of check images made for remote deposit capture
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
      summary: List RDC Scans
      tags:
      - RDC Deposits
    post:
      description: |
        Create a new scan of a check image made for a remote deposit capture to an account
      operationId: createRdcScan
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scan'
        description: RDC scan to create
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scan'
          description: Successful creation of a scan of a check image made for remote
            deposit capture
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Create an RDC Scan
      tags:
      - RDC Deposits
    summary: RDC Scan
  /accounts/{account_id}/rdc/scans/{scan_id}:
    description: |
      The RDC scan represents the OCR scan of the check images uploaded for remote deposit capture associated with an account
    get:
      description: Retrieves one OCR scan of a check image for remote deposit capture
        associated with an account
      operationId: getRdcScan
      parameters:
      - description: Account ID
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ID of an OCR scan of a check image uploaded for a remote deposit
          capture
        explode: false
        in: path
        name: scan_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scan'
          description: Successful retrieval of an RDC scan
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Get RDC Scan
      tags:
      - RDC Deposits
    summary: RDC Scan by Id
  /reconciliations:
    description: |
      The Reconcilations collections represents the jobs reconciling transactions.
    get:
      description: Retrieves paginated list of reconciliations
      operationId: listReconciliations
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation_list'
          description: List of reconciliations
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List reconciliations
      tags:
      - Reconciliations
    post:
      description: |
        Create a new reconciliation job
      operationId: createReconciliation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reconciliation_input'
        description: Reconciliation to perform
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation'
          description: Successful creation of a reconciliation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a reconciliation
      tags:
      - Reconciliations
    summary: Reconciliations
  /reconciliations/{reconciliation_id}:
    description: |
      The Reconcilations collections represents the jobs reconciling transactions.
    get:
      description: Retrieves one reconciliation by id
      operationId: getReconciliation
      parameters:
      - description: Reconciliation id
        explode: false
        in: path
        name: reconciliation_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation'
          description: Successful retrieval of a reconciliation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Get reconciliation
      tags:
      - Reconciliations
    summary: Reconciliation by ID
  /transactions/ach:
    get:
      description: Get a list of pending ACH
      operationId: getOutgoingACH
      parameters:
      - description: Execution Date
        explode: true
        in: query
        name: ACH execution date
        required: true
        schema:
          format: date
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ach_outgoing_list'
          description: List of pending ACH
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Pending ACH List
      tags:
      - Transactions
    post:
      description: Create an outgoing ACH
      operationId: createOutgoingACH
      parameters:
      - description: Multi-Factor Authentication Token
        explode: false
        in: header
        name: mfa_token
        required: false
        schema:
          example: faker.helpers.replaceSymbols(######)
          pattern: ^\d{4,8}$
          type: string
          writeOnly: true
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ach_outgoing'
        description: Outgoing ACH to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ach_outgoing'
          description: Created outgoing ACH
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create outgoing ACH
      tags:
      - Transactions
    summary: Outgoing ACH
  /transactions/ach/{payment_id}:
    delete:
      description: Delete a pending outgoing ACH
      operationId: deleteOutgoingACH
      parameters:
      - description: Payment ID
        explode: false
        in: path
        name: payment_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete pending outgoing ACH
      tags:
      - Transactions
    put:
      description: Update an outgoing ACH
      operationId: updateOutgoingACH
      parameters:
      - description: Payment ID
        explode: false
        in: path
        name: payment_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Multi-Factor Authentication Token
        explode: false
        in: header
        name: mfa_token
        required: false
        schema:
          example: faker.helpers.replaceSymbols(######)
          pattern: ^\d{4,8}$
          type: string
          writeOnly: true
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ach_outgoing'
        description: Outgoing ACH to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ach_outgoing'
          description: Updated outgoing ACH
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update outgoing ACH
      tags:
      - Transactions
    summary: Outgoing ACH
  /transactions/a2a_transfer:
    description: Transfer amount from account to account under the same customer
    post:
      description: Transfer amount under the same customer
      operationId: a2aTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/a2a_transfer'
        description: Account to account transfer to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/a2a_transfer'
          description: Created account to account transfer
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
        "462":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Insufficient funds
        "463":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been locked
        "464":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Customer has been locked
        "465":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Counterparty account has been locked
        "466":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Counterparty account has been closed
        "467":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Currency not supported
        "468":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Recurrence not supported
        "469":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Execution date in the past
        "470":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Execution date in the future
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Account to account transfer
      tags:
      - Transactions
    summary: Transfer amount from account to account under the same customer
  /transactions/a2a_transfer/{payment_id}:
    description: Transfer amount from account to account under the same customer
    get:
      description: Get account to account transfer
      operationId: getA2ATransfer
      parameters:
      - description: Payment ID
        explode: false
        in: path
        name: payment_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/a2a_transfer'
          description: Account to account transfer
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get account to account transfer
      tags:
      - Transactions
    post:
      description: Reverse account to account transfer
      operationId: reverseA2ATransfer
      parameters:
      - description: Payment ID
        explode: false
        in: path
        name: payment_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/a2a_transfer'
          description: Reversed account to account transfer
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "471":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Transaction cannot be reversed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Reverse existing account to account transfer
      tags:
      - Transactions
    summary: Transfer amount from account to account under the same customer
  /transactions/a2a_transfer/list/{customer_id}:
    get:
      description: Transfer amount under the same customer
      operationId: listA2ATransfer
      parameters:
      - description: Customer ID
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/a2a_transfer_list'
          description: Account to account transfer list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List account to account transfer
      tags:
      - Transactions
    summary: Transfer amount from account to account under the same customer
  /webhooks:
    get:
      description: List all webhooks
      operationId: listWebhooks
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      - explode: true
        in: query
        name: is_enabled_only
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook_list'
          description: List of webhooks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List webhooks
      tags:
      - Webhooks
    post:
      description: Create a webhook
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        description: Webhook to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Created webhook
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a webhook
      tags:
      - Webhooks
  /webhooks/{webhook_id}:
    delete:
      description: Delete a webhook
      operationId: deleteWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete a webhook
      tags:
      - Webhooks
    get:
      description: Get a webhook
      operationId: getWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Webhook
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a webhook
      tags:
      - Webhooks
    put:
      description: Update a webhook
      operationId: updateWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        description: Webhook to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Created webhook
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a webhook
      tags:
      - Webhooks
  /webhooks/{webhook_id}/events:
    get:
      description: List webhook events. This response will not associate with the
        event response history.
      operationId: listEvents
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Start date of the search range
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: End date of the search range
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Maximum of objects to return per page
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: Optional pagination token to be provided to retrieve subsequent
            pages, returned from previous get
          example: faker.random.alphaNumeric(10)
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_list'
          description: List of webhook events
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List webhook events
      tags:
      - Webhooks
  /webhooks/{webhook_id}/events/{event_id}:
    get:
      description: Get webhook event by ID
      operationId: getEvent
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Webhook event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Webhook event
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get webhook event
      tags:
      - Webhooks
  /webhooks/{webhook_id}/events/{event_id}/resend:
    post:
      description: Resend a webhook event
      operationId: resendEvent
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Webhook event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Delay the event triggering in seconds
        explode: true
        in: query
        name: delay
        required: false
        schema:
          maximum: 3600
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Resent webhook event
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Resend an event
      tags:
      - Webhooks
  /webhooks/secret:
    delete:
      description: Revoke the existing webhook secret. If this is called at the rolling
        secret time, then both old and new secrets will be revoked
      operationId: revokeSecret
      responses:
        "200":
          description: Secret has been revoked
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Revoke the secret
      tags:
      - Webhooks
    post:
      description: Create a webhook secret. The secret will be used to verify all
        subsequent webhook request signature.
      operationId: createSecret
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: Webhook secret response
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a secret
      tags:
      - Webhooks
    put:
      description: Replace an existing webhook secret immediately or as part of rotation.
        This new secret will be used to verify all subsequent webhook request signature.
      operationId: replaceSecret
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                is_rolling_secret:
                  description: Set true to let the current secret expire in the next
                    24 hours. Set false to let the current secret expire immediately.
                  type: boolean
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Webhook secret response
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Replace an existing secret
      tags:
      - Webhooks
  /webhooks/trigger:
    post:
      description: Trigger an specific event for webhook testing purpose
      operationId: triggerEvent
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                event:
                  $ref: '#/components/schemas/event_type'
              type: object
        description: Provide an event type to trigger
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Triggered webhook event
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Trigger an event
      tags:
      - Webhooks
components:
  parameters:
    limit:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 100
        description: Maximum of objects to return per page
        example: 100
        minimum: 1
        type: integer
      style: form
    page_token:
      explode: true
      in: query
      name: page_token
      required: false
      schema:
        description: Optional pagination token to be provided to retrieve subsequent
          pages, returned from previous get
        example: faker.random.alphaNumeric(10)
        type: string
      style: form
    account_id:
      description: Account ID
      explode: false
      in: path
      name: account_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    connect_id:
      description: Connect ID of the account associate with the account entity
      explode: false
      in: path
      name: connect_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    customer_id:
      description: Customer ID
      explode: false
      in: path
      name: customer_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    verification_id:
      description: Verification ID
      explode: false
      in: path
      name: verification_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    document_id:
      description: Document ID
      explode: false
      in: path
      name: document_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    deposit_id:
      description: ID of a deposit for a remote deposit capture
      explode: false
      in: path
      name: deposit_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    image_id:
      description: ID of an image uploaded for a remote deposit capture
      explode: false
      in: path
      name: image_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    scan_id:
      description: ID of an OCR scan of a check image uploaded for a remote deposit
        capture
      explode: false
      in: path
      name: scan_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    reconciliation_id:
      description: Reconciliation id
      explode: false
      in: path
      name: reconciliation_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    execution_date:
      description: Execution Date
      explode: true
      in: query
      name: ACH execution date
      required: true
      schema:
        format: date
        type: string
      style: form
    mfa_token:
      description: Multi-Factor Authentication Token
      explode: false
      in: header
      name: mfa_token
      required: false
      schema:
        example: faker.helpers.replaceSymbols(######)
        pattern: ^\d{4,8}$
        type: string
        writeOnly: true
      style: simple
    payment_id:
      description: Payment ID
      explode: false
      in: path
      name: payment_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    webhook_id:
      description: Webhook ID
      explode: false
      in: path
      name: webhook_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
  requestBodies:
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      required: true
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      required: true
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
  responses:
    bad_request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: BadRequest
    unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Unauthorized
    forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Forbidden error
    not_found:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Resource not found
    internal_server_error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Internal server error
    unprocessible_entity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Unprocessible entity request response
    account_closed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Account has been closed
    delete_response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_response'
      description: Resource has been deleted
    already_exists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Resource already exists error
    insufficient_funds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Insufficient funds
    account_locked:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Account has been locked
    customer_locked:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Customer has been locked
    counterparty_account_locked:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Counterparty account has been locked
    counterparty_account_closed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Counterparty account has been closed
    currency_not_supported:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Currency not supported
    recurrence_not_supported:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Recurrence not supported
    execution_date_in_the_past:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Execution date in the past
    execution_date_in_the_future:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Execution date in the future
    cannot_reverse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Transaction cannot be reversed
  schemas:
    status:
      description: |
        The status of the account. Required for shadow mode on account creation
      enum:
      - APPLICATION_SUBMITTED
      - FAILED_KYC
      - ACCOUNT_NOT_DESIRED
      - ACTIVE_OR_DISBURSED
      - CLOSED
      - SUSPENDED
      - CHARGED_OFF
      - ACCOUNT_NEVER_ACTIVE
      - ACTIVATED_NOT_DISBURSED
      - AWAITING_FIXING
      - IN_CLOSING
      title: Account Status
      type: string
    relationship:
      properties:
        connect_id:
          description: Connection ID of the account
          format: uuid
          type: string
        relationship_type:
          description: Relationship type
          enum:
          - ACCOUNT_HOLDER
          - EMPLOYEE
          - BRANCH
          - ATM
          - OFFICER
          - PRIMARY_ACCOUNT_HOLDER
          - JOINT_ACCOUNT_HOLDER
          - AUTHORIZED-SIGNER
          type: string
        customer_id:
          description: Customer that the current account is associated with
          format: uuid
          type: string
      required:
      - customer_id
      - relationship_type
      title: Account Relationship
      type: object
    alias:
      example:
        alias_type: alias_type
        connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        alias_source: alias_source
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        alias_name: alias_name
        alias_info: alias_info
      properties:
        connect_id:
          description: Connection ID of the account
          format: uuid
          type: string
        id:
          description: Alias ID
          format: uuid
          type: string
        alias_type:
          description: Alias type
          type: string
        alias_name:
          description: Alias name
          type: string
        alias_source:
          description: Alias
          type: string
        alias_info:
          description: Additional information for the alias
          format: byte
          type: string
      title: Account Alias
      type: object
    balance_type:
      description: The type of the balance. GET operation default is for all types
      enum:
      - AVAILABLE_BALANCE
      - ACH
      - MARQETA
      - MASTERCARD
      - PULSE
      type: string
    dc_sign_type:
      description: Indication of debit or credit
      enum:
      - DEBIT
      - CREDIT
      type: string
    balance:
      example:
        amount: 0
        currency: faker.finance.currencyCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        posting_date: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Account ID
          format: uuid
          readOnly: true
          type: string
        posting_date:
          description: Balance at the posting date
          format: date-time
          readOnly: true
          type: string
        balance_type:
          $ref: '#/components/schemas/balance_type'
        currency:
          description: Currency of the balance. ISO 4217 alphabetic currency code
          example: faker.finance.currencyCode
          readOnly: true
          type: string
        amount:
          description: amount in ISO 4217 minor currency units
          minimum: 0
          readOnly: true
          type: integer
        dc_sign:
          $ref: '#/components/schemas/dc_sign_type'
      title: Account balance
      type: object
    transaction:
      example:
        amount: 0
        authorization_ref: authorization_ref
        account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        profit_center: profit_center
        effective_date: 2000-01-23T04:56:07.000+00:00
        ext_reference: ext_reference
        currency: faker.finance.currencyCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        transaction_type: ACCOUNT_CLOSING_ACH
        status: status
      properties:
        id:
          description: Transaction ID
          format: uuid
          type: string
        account_id:
          description: Account ID
          format: uuid
          type: string
        currency:
          description: Currency of the transaction. ISO 4217 alphabetic currency code
          example: faker.finance.currencyCode
          type: string
        amount:
          description: Transaction amount in ISO 4217 minor currency units
          minimum: 0
          type: integer
        dc_sign:
          $ref: '#/components/schemas/dc_sign_type'
        effective_date:
          description: The effective date of the transaction (value_date)
          format: date-time
          type: string
        profit_center:
          description: Profit center of the transaction
          type: string
        authorization_ref:
          description: Reference for the authorization
          type: string
        ext_reference:
          description: External reference from Synctera for the transaction
          type: string
        status:
          description: The status of the transaction
          type: string
        transaction_type:
          description: Transaction type
          enum:
          - ACCOUNT_CLOSING_ACH
          - ATM_DEPOSIT_CARD
          - ATM_FEE_CARD
          - ATM_WITHDRAWAL_CARD
          - BALANCE_INQUIRY_CARD
          - CARD_LOAD_CARD
          - CASH_ADVANCE_CARD
          - CHARGEBACK_CARD
          - CREDIT_CHECKING_ACH
          - CREDIT_SAVING_ACH
          - CREDIT_TRANSFER_ACH
          - CREDIT_TRANSFER_CARD
          - CUR_CONVERSION_FEE_CARD
          - DEBIT_CHECKING_ACH
          - DEBIT_SAVING_ACH
          - DEBIT_TRANSFER_ACH
          - DISPUTE_CHARGEBACK_CARD
          - DISPUTE_PROVISIONAL_CREDIT_CARD
          - INTERCHANGE_CARD
          - MERCHANT_CREDIT_CARD
          - MICRO_DEPOSIT_ACH
          - MONEY_TRANSFER_CARD
          - OTHER_CARD
          - PAYPAL_CREDIT_ACH
          - PIN_INTERCHANGE_CARD
          - PIN_PURCHASE_CARD
          - PIN_RETURN_CARD
          - POS_VERIFICATION_CARD
          - PRE_AUTH_COMPLETION_CARD
          - PRE_AUTH_CREDIT _CHECKING_ACH
          - PRE_AUTH_CREDIT _SAVING_ACH
          - PRE_AUTH_DEBIT _CHECKING_ACH
          - PRE_AUTH_DEBIT _SAVING_ACH
          - PRE_AUTH_FORCE_CARD
          - PURCHASE_CARD
          - RDC_CHECK_ACH
          - REFUND_CARD
          - RETURN_CARD
          - RETURN_CREDIT_CHECKING_ACH
          - RETURN_CREDIT_SAVING_ACH
          - RETURN_DEBIT_CHECKING_ACH
          - RETURN_DEBIT_SAVING_ACH
          - REVERSAL_ACH
          - REVERSAL_CARD
          type: string
      title: Transaction
      type: object
    account:
      description: Account
      example:
        account_number: account_number
        aliases:
        - alias_type: alias_type
          connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          alias_source: alias_source
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          alias_name: alias_name
          alias_info: alias_info
        - alias_type: alias_type
          connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          alias_source: alias_source
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          alias_name: alias_name
          alias_info: alias_info
        swift_code: swift_code
        is_account_pool: true
        relationships:
        - connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          relationship_type: ACCOUNT_HOLDER
          customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          relationship_type: ACCOUNT_HOLDER
          customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        balances:
        - amount: 0
          currency: faker.finance.currencyCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          posting_date: 2000-01-23T04:56:07.000+00:00
        - amount: 0
          currency: faker.finance.currencyCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          posting_date: 2000-01-23T04:56:07.000+00:00
        recent_transactions:
        - amount: 0
          authorization_ref: authorization_ref
          account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          profit_center: profit_center
          effective_date: 2000-01-23T04:56:07.000+00:00
          ext_reference: ext_reference
          currency: faker.finance.currencyCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          transaction_type: ACCOUNT_CLOSING_ACH
          status: status
        - amount: 0
          authorization_ref: authorization_ref
          account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          profit_center: profit_center
          effective_date: 2000-01-23T04:56:07.000+00:00
          ext_reference: ext_reference
          currency: faker.finance.currencyCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          transaction_type: ACCOUNT_CLOSING_ACH
          status: status
        exchange_rate_type: M, INTERBANK, CUST
        account_template_version: 0.8008281904610115
        account_template_code: account_template_code
        iban: iban
        currency: faker.finance.currencyCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Account ID
          format: uuid
          readOnly: true
          type: string
        account_number:
          description: Account number. Required for shadow mode.
          readOnly: true
          type: string
        currency:
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: faker.finance.currencyCode
          type: string
        status:
          $ref: '#/components/schemas/status'
        exchange_rate_type:
          description: Exchange rate type
          example: M, INTERBANK, CUST
          type: string
        iban:
          description: International bank account number
          type: string
        swift_code:
          description: SWIFT code
          type: string
        is_account_pool:
          description: Account is investment (variable balance) account or a multi-balance
            account pool. Default false
          type: boolean
        account_template_code:
          description: Account template code. Required for lead mode.
          type: string
        account_template_version:
          description: Account template version. Required for lead mode.
          type: number
        relationships:
          description: List of the relationship for this account to the parties. Required
            for lead mode.
          items:
            $ref: '#/components/schemas/schemas-relationship'
          type: array
        aliases:
          description: A list of the aliases for account. Account alias is the account
            number of different balance types to link to the same account ID
          items:
            $ref: '#/components/schemas/alias'
          type: array
          writeOnly: true
        balances:
          description: A list of balances for account based on different type
          items:
            $ref: '#/components/schemas/balance'
          readOnly: true
          type: array
        recent_transactions:
          description: The most recent 10 transactions of the account
          items:
            $ref: '#/components/schemas/transaction'
          readOnly: true
          type: array
      type: object
    paginated_response:
      properties:
        next_page_token:
          description: If returned, use the next_page_token to query for the next
            page of results.
          example: faker.random.alphaNumeric(10)
          type: string
      title: Paginated List response
      type: object
    account_list:
      allOf:
      - $ref: '#/components/schemas/account_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    error:
      properties:
        error_details:
          description: Detailed description of error
          example: faker.lorem.sentence
          type: string
      title: Error
      type: object
    delete_response:
      description: Deleted object information
      example:
        resource: resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Object ID
          format: uuid
          type: string
        resource:
          description: The resource name
          type: string
      title: Deleted Object
      type: object
    transaction_list:
      allOf:
      - $ref: '#/components/schemas/transaction_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    address:
      example:
        country_code: faker.address.countryCode
        city: faker.address.city
        address_line_1: faker.address.streetAddress
        default_address_flg: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        address_line_2: faker.address.secondaryAddress
        state: faker.address.stateAbbr
        type: work
        postal_code: faker.address.zipCode(#####)
      properties:
        id:
          description: Address unique identifier
          format: uuid
          type: string
        default_address_flg:
          description: Denotes whether this address is the person's default address
          type: boolean
        type:
          description: type of address
          enum:
          - home
          - work
          - temporary
          - vacation
          example: work
          type: string
        address_line_1:
          description: Street address line 1
          example: faker.address.streetAddress
          type: string
        address_line_2:
          description: String address line 2
          example: faker.address.secondaryAddress
          type: string
        city:
          description: City
          example: faker.address.city
          type: string
        state:
          description: State, region, province, or prefecture
          example: faker.address.stateAbbr
          type: string
        postal_code:
          description: Postal code
          example: faker.address.zipCode(#####)
          type: string
        country_code:
          description: ISO-3166-1 Alpha-2 country code
          example: faker.address.countryCode
          type: string
      required:
      - address_line_1
      - city
      - country_code
      - default_address_flg
      - postal_code
      - state
      - type
      type: object
    account_address:
      example:
        address: ""
        connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        document_type_id: 0
        address_id: 6
        duplicate: true
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        connect_id:
          description: Connection ID of the account
          format: uuid
          type: string
        document_type_id:
          description: Document
          type: integer
        duplicate:
          description: Indicator of duplicate of the address
          type: boolean
        customer_id:
          description: Customer ID
          format: uuid
          type: string
        address_id:
          description: Address unique ID
          type: integer
        address:
          allOf:
          - $ref: '#/components/schemas/address'
          readOnly: true
      title: Account Address
      type: object
    device:
      example:
        screen_width: 0
        screen_height: 6
        os: Android
        ip: faker.internet.ip
        os_version: faker.helpers.replaceSymbols(##.##.##)
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Resource ID for device
          format: uuid
          type: string
        ip:
          description: IP address
          example: faker.internet.ip
          type: string
        os:
          description: Operation system
          example: Android
          type: string
        os_version:
          description: Operation system version
          example: faker.helpers.replaceSymbols(##.##.##)
          type: string
        screen_width:
          description: Device screen width
          type: integer
        screen_height:
          description: Device screen height
          type: integer
      type: object
    relationship_role:
      description: CUSTODIAN - Related party is the custodian e.g. the parent, BENEFICIARY
        - Related party is the beneficiary e.g. the dependent, PARTNER - Related party
        is the partner
      enum:
      - CUSTODIAN
      - BENEFICIARY
      - PARTNER
      example: CUSTODIAN
      title: Relationship Role
      type: string
    relationship1:
      example:
        relationship_role: CUSTODIAN
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of related entity
          format: uuid
          type: string
        relationship_role:
          $ref: '#/components/schemas/relationship_role'
      required:
      - id
      - relationship_role
      title: Relationship
      type: object
    schemas-relationship:
      example:
        connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        relationship_type: ACCOUNT_HOLDER
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        connect_id:
          description: Connection ID of the account
          format: uuid
          type: string
        relationship_type:
          description: Relationship type
          enum:
          - ACCOUNT_HOLDER
          - EMPLOYEE
          - BRANCH
          - ATM
          - OFFICER
          - PRIMARY_ACCOUNT_HOLDER
          - JOINT_ACCOUNT_HOLDER
          - AUTHORIZED-SIGNER
          type: string
        customer_id:
          description: Customer that the current account is associated with
          format: uuid
          type: string
      required:
      - customer_id
      - relationship_type
      title: Account Relationship
      type: object
    customer:
      description: Represents a Customer's information
      example:
        creation_time: 2000-01-23T04:56:07.000+00:00
        alt_phone_number: faker.helpers.replaceSymbols(+###########)
        devices:
        - screen_width: 0
          screen_height: 6
          os: Android
          ip: faker.internet.ip
          os_version: faker.helpers.replaceSymbols(##.##.##)
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - screen_width: 0
          screen_height: 6
          os: Android
          ip: faker.internet.ip
          os_version: faker.helpers.replaceSymbols(##.##.##)
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        related_customers:
        - relationship_role: CUSTODIAN
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - relationship_role: CUSTODIAN
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        last_name: faker.name.lastName
        middle_name: faker.name.middleName
        ssn: faker.helpers.replaceSymbols(###-##-####)
        mobile_phone_number: faker.helpers.replaceSymbols(+###########)
        legal_address:
          country_code: faker.address.countryCode
          city: faker.address.city
          address_line_1: faker.address.streetAddress
          default_address_flg: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          address_line_2: faker.address.secondaryAddress
          state: faker.address.stateAbbr
          type: work
          postal_code: faker.address.zipCode(#####)
        last_updated_time: 2000-01-23T04:56:07.000+00:00
        dob: 2000-01-23
        ssn_last_four: '***-**-6789'
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        shipping_address:
          country_code: faker.address.countryCode
          city: faker.address.city
          address_line_1: faker.address.streetAddress
          default_address_flg: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          address_line_2: faker.address.secondaryAddress
          state: faker.address.stateAbbr
          type: work
          postal_code: faker.address.zipCode(#####)
        accounts:
        - account_number: account_number
          aliases:
          - alias_type: alias_type
            connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_source: alias_source
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_name: alias_name
            alias_info: alias_info
          - alias_type: alias_type
            connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_source: alias_source
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_name: alias_name
            alias_info: alias_info
          swift_code: swift_code
          is_account_pool: true
          relationships:
          - connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            relationship_type: ACCOUNT_HOLDER
            customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            relationship_type: ACCOUNT_HOLDER
            customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          balances:
          - amount: 0
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            posting_date: 2000-01-23T04:56:07.000+00:00
          - amount: 0
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            posting_date: 2000-01-23T04:56:07.000+00:00
          recent_transactions:
          - amount: 0
            authorization_ref: authorization_ref
            account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            profit_center: profit_center
            effective_date: 2000-01-23T04:56:07.000+00:00
            ext_reference: ext_reference
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            transaction_type: ACCOUNT_CLOSING_ACH
            status: status
          - amount: 0
            authorization_ref: authorization_ref
            account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            profit_center: profit_center
            effective_date: 2000-01-23T04:56:07.000+00:00
            ext_reference: ext_reference
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            transaction_type: ACCOUNT_CLOSING_ACH
            status: status
          exchange_rate_type: M, INTERBANK, CUST
          account_template_version: 0.8008281904610115
          account_template_code: account_template_code
          iban: iban
          currency: faker.finance.currencyCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - account_number: account_number
          aliases:
          - alias_type: alias_type
            connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_source: alias_source
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_name: alias_name
            alias_info: alias_info
          - alias_type: alias_type
            connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_source: alias_source
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            alias_name: alias_name
            alias_info: alias_info
          swift_code: swift_code
          is_account_pool: true
          relationships:
          - connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            relationship_type: ACCOUNT_HOLDER
            customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - connect_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            relationship_type: ACCOUNT_HOLDER
            customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          balances:
          - amount: 0
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            posting_date: 2000-01-23T04:56:07.000+00:00
          - amount: 0
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            posting_date: 2000-01-23T04:56:07.000+00:00
          recent_transactions:
          - amount: 0
            authorization_ref: authorization_ref
            account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            profit_center: profit_center
            effective_date: 2000-01-23T04:56:07.000+00:00
            ext_reference: ext_reference
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            transaction_type: ACCOUNT_CLOSING_ACH
            status: status
          - amount: 0
            authorization_ref: authorization_ref
            account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            profit_center: profit_center
            effective_date: 2000-01-23T04:56:07.000+00:00
            ext_reference: ext_reference
            currency: faker.finance.currencyCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            transaction_type: ACCOUNT_CLOSING_ACH
            status: status
          exchange_rate_type: M, INTERBANK, CUST
          account_template_version: 0.8008281904610115
          account_template_code: account_template_code
          iban: iban
          currency: faker.finance.currencyCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first_name: faker.name.firstName
        email: faker.internet.email
      properties:
        id:
          description: Customer unique identifier
          format: uuid
          readOnly: true
          type: string
        first_name:
          description: Customer's first name
          example: faker.name.firstName
          type: string
        last_name:
          description: Customer's last name
          example: faker.name.lastName
          type: string
        middle_name:
          description: Customer's middle name
          example: faker.name.middleName
          type: string
        legal_address:
          $ref: '#/components/schemas/address'
        shipping_address:
          $ref: '#/components/schemas/address'
        dob:
          description: Customer's date of birth in ISO-8601 date format YYYY-MM-DD
          format: date
          type: string
        ssn:
          description: Customer's full tax ID eg SSN formatted with hyphens 123-45-6789
          example: faker.helpers.replaceSymbols(###-##-####)
          pattern: ^\d{3}-\d{2}-\d{4}$
          type: string
          writeOnly: true
        ssn_last_four:
          description: Customer's masked tax ID eg SSN formatted with hyphens ***-**-6789
          example: '***-**-6789'
          pattern: ^\*{3}-\*{2}-\d{4}$
          readOnly: true
          type: string
        email:
          description: Customer's email
          example: faker.internet.email
          type: string
        mobile_phone_number:
          description: Customer's mobile phone number in E.164 format e.g. +19178675309
          example: faker.helpers.replaceSymbols(+###########)
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
        alt_phone_number:
          description: Customer's alternate phone number in E.164 format e.g. +19178675309
          example: faker.helpers.replaceSymbols(+###########)
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
        creation_time:
          format: date-time
          readOnly: true
          type: string
        last_updated_time:
          format: date-time
          readOnly: true
          type: string
        devices:
          description: List of the Customer's associated devices
          items:
            $ref: '#/components/schemas/device'
          type: array
        related_customers:
          description: Customer's relationships with other accounts eg. guardian
          items:
            $ref: '#/components/schemas/relationship1'
          type: array
        accounts:
          description: List of accounts that belong to the customer
          items:
            $ref: '#/components/schemas/account'
          readOnly: true
          type: array
      title: Customer
      type: object
    customer_list:
      allOf:
      - $ref: '#/components/schemas/customer_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    disclosure:
      description: Represents a disclosure
      example:
        creation_time: 2021-05-01T23:59:59Z
        event_type: VIEWED
        last_updated_time: 2021-05-01T23:59:59Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: REG_DD
        version: "1.1"
        timestamp: 2021-05-01T23:59:59Z
      properties:
        id:
          description: Disclosure ID
          format: uuid
          type: string
        type:
          description: Disclosure Type
          enum:
          - REG_DD
          - KYC_DATA_COLLECTION
          - REG_E
          example: REG_DD
          type: string
        version:
          description: Disclosure Version
          example: "1.1"
          type: string
        timestamp:
          description: Date of disclosure
          example: 2021-05-01T23:59:59Z
          format: date-time
          type: string
        creation_time:
          example: 2021-05-01T23:59:59Z
          format: date-time
          readOnly: true
          type: string
        last_updated_time:
          example: 2021-05-01T23:59:59Z
          format: date-time
          readOnly: true
          type: string
        event_type:
          enum:
          - DISPLAYED
          - VIEWED
          - ACKNOWLEDGED
          example: VIEWED
          type: string
      required:
      - event_type
      - timestamp
      - type
      - version
      title: Disclosure
      type: object
    disclosure_response:
      description: Represents all customer disclosures
      example:
        disclosures:
        - creation_time: 2021-05-01T23:59:59Z
          event_type: VIEWED
          last_updated_time: 2021-05-01T23:59:59Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: REG_DD
          version: "1.1"
          timestamp: 2021-05-01T23:59:59Z
        - creation_time: 2021-05-01T23:59:59Z
          event_type: VIEWED
          last_updated_time: 2021-05-01T23:59:59Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: REG_DD
          version: "1.1"
          timestamp: 2021-05-01T23:59:59Z
      properties:
        disclosures:
          description: List of the customer's disclosures
          items:
            $ref: '#/components/schemas/disclosure'
          type: array
      title: List of Customer Disclosures
      type: object
    verification_type:
      description: 'Type of verification to run: `KYC` - KYC verification to validate
        name, date of birth, tax id, etc match, OFAC` - OFAC / sanctions check, `PEP`
        - Politically exposed persons check, `FRAUD` - Check if transaction is fraudulent,
        `DOCUMENT` - Validate if document matches Person''s identity'
      enum:
      - fraud
      - synthetic
      - emailrisk
      - phonerisk
      - addressrisk
      - kyc
      - social
      - watchliststandard
      - watchlistpremier
      - watchlistplus
      - documentverification
      - alertlist
      example: KYC
      title: VerificationType
      type: string
    customer_verification:
      example:
        verification_type:
        - KYC
        - KYC
        user_ip_address: faker.internet.ip
      properties:
        verification_type:
          items:
            $ref: '#/components/schemas/verification_type'
          type: array
        user_ip_address:
          description: IP address
          example: faker.internet.ip
          pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
          type: string
      required:
      - verification_type
      title: PersonVerification
      type: object
    customer_verification_reason_codes:
      description: Specific verification issue.  Based on rules defined with bank
        this may
      enum:
      - NAME
      - ADDRESS
      - SSN_ADDRESS_MISMATCH
      - NON_US_CITIZEN
      - IDENTITY_TOO_RECENT
      - GLOBAL_WATCHLIST
      - EMAIL_FRAUD_LIST
      - SSN_FRAUD_LIST
      - PHONE_FRAUD_LIST
      - DOB
      - SSN_DECEASED
      - SSN
      - SSN_NAME_MISMATCH
      - ACTIVE_DUTY
      - FRAUD_VICTIM
      example: NAME
      title: PersonVerificationReasonCodes
      type: string
    provider_type:
      enum:
      - IDEOLOGY
      - SOCURE
      type: string
    raw_response:
      example:
        raw_data: raw_data
      properties:
        provider:
          $ref: '#/components/schemas/provider_type'
        raw_data:
          type: string
      title: Raw Response From Providers
      type: object
    customer_verification_result:
      description: Verification result
      example:
        verifications_run:
        - KYC
        - KYC
        result: PASS
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        raw_response:
          raw_data: raw_data
        issues:
        - NAME
        - NAME
        verification_date: 2000-01-23
      properties:
        id:
          description: Verification object ID
          format: uuid
          type: string
        issues:
          description: List of found issues
          items:
            $ref: '#/components/schemas/customer_verification_reason_codes'
          type: array
        verifications_run:
          description: List of the verifications run
          items:
            $ref: '#/components/schemas/verification_type'
          type: array
        raw_response:
          $ref: '#/components/schemas/raw_response'
        result:
          description: The determination of this KYC run
          enum:
          - accept
          - reject
          - pending
          - review
          - resubmit
          - refer
          example: PASS
          type: string
        verification_date:
          description: The date on which the KYC run was completed
          format: date
          type: string
      required:
      - result
      - verification_date
      - verifications_run
      title: CustomerVerificationResult
      type: object
    customer_verification_result_list:
      allOf:
      - $ref: '#/components/schemas/customer_verification_result_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    kyc_media_type:
      description: 'Type of image: PNG, JPG. Note that PDF and GIF are valid values,
        but not currently supported.'
      enum:
      - PDF
      - PNG
      - JPG
      - GIF
      example: PNG
      title: MediaType
      type: string
    document_type:
      description: 'Type of document: `LICENSE_FRONT` - Government issued license
        front, `LICENSE_BACK` - Government issued license back, `ID_CARD_FRONT` -
        Government issued ID front, `ID_CARD_BACK` - Government issued ID back, `PASSPORT`
        - Passport, `SELF_PORTRAIT` - Selfie, `PROOF_OF_ADDRESS` - Document to prove
        address such as a utility bill'
      enum:
      - LICENSE_FRONT
      - LICENSE_BACK
      - ID_CARD_FRONT
      - ID_CARD_BACK
      - PASSPORT
      - SELF_PORTRAIT
      - PROOF_OF_ADDRESS
      example: '["LICENSE_FRONT"]'
      title: DocumentType
      type: string
    document:
      example:
        media_type: PNG
        byte_data: byte_data
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        document_type: '["LICENSE_FRONT"]'
      properties:
        id:
          description: Document ID
          format: uuid
          readOnly: true
          type: string
        media_type:
          $ref: '#/components/schemas/kyc_media_type'
        document_type:
          $ref: '#/components/schemas/document_type'
        byte_data:
          description: Base64url encoded image
          format: byte
          type: string
      required:
      - document_type
      - media_type
      title: Document
      type: object
    document_list:
      allOf:
      - $ref: '#/components/schemas/document_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    deposit:
      description: Deposit using remote deposit capture
      example:
        account_number: faker.random.alphaNumeric(14)
        deposit_amount: 6
        date_submitted: 2019-01-02T03:04:05.678Z
        check_currency: USD
        back_image_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deposit_currency: USD
        front_image_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        check_amount: 0
        scan_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        routing_number: "123456789"
        date_processed: 2019-01-02T03:04:05.678Z
      properties:
        id:
          description: RDC Deposit ID
          format: uuid
          readOnly: true
          type: string
        account_number:
          description: Account number
          example: faker.random.alphaNumeric(14)
          readOnly: true
          type: string
        routing_number:
          description: Bank routing number
          example: "123456789"
          readOnly: true
          type: string
        check_amount:
          description: Amount on check in ISO 4217 minor currency units
          readOnly: true
          type: integer
        check_currency:
          description: ISO 4217 currency code for the check amount
          example: USD
          readOnly: true
          type: string
        deposit_amount:
          description: Amount deposited in ISO 4217 minor currency units
          readOnly: true
          type: integer
        deposit_currency:
          description: ISO 4217 currency code for the deposit amount
          example: USD
          readOnly: true
          type: string
        date_processed:
          description: Date the deposit was processed, in RFC 3339 format
          example: 2019-01-02T03:04:05.678Z
          readOnly: true
          type: string
        date_submitted:
          description: Date the deposit was submitted, in RFC 3339 format
          example: 2019-01-02T03:04:05.678Z
          readOnly: true
          type: string
        front_image_id:
          description: ID of the image of the front of the check
          format: uuid
          readOnly: true
          type: string
        back_image_id:
          description: ID of the image of the back of the check
          format: uuid
          readOnly: true
          type: string
        scan_id:
          description: ID of the OCR scan of the check image
          format: uuid
          type: string
      required:
      - account_number
      - back_image_id
      - check_amount
      - check_currency
      - date_processed
      - date_submitted
      - deposit_amount
      - deposit_currency
      - front_image_id
      - id
      - routing_number
      - scan_id
      title: RDC Deposit
      type: object
    deposit_list:
      allOf:
      - $ref: '#/components/schemas/deposit_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    rdc_media_type:
      description: 'Type of image: PNG, JPG. Note that PDF and GIF are valid values,
        but not currently supported.'
      enum:
      - PDF
      - PNG
      - JPG
      - GIF
      example: PNG
      title: RDC MediaType
      type: string
    image:
      description: Image uploaded for a remote deposit capture
      example:
        media_type: PNG
        byte_data: byte_data
        date_uploaded: 2019-01-02T03:04:05.678Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: RDC image id
          format: uuid
          readOnly: true
          type: string
        media_type:
          $ref: '#/components/schemas/rdc_media_type'
        byte_data:
          description: Base64url encoded image
          format: byte
          type: string
        date_uploaded:
          description: Date the image was uploaded, in RFC 3339 format
          example: 2019-01-02T03:04:05.678Z
          readOnly: true
          type: string
      required:
      - byte_data
      - date_uploaded
      - id
      - media_type
      title: RDC Image
      type: object
    image_list:
      allOf:
      - $ref: '#/components/schemas/image_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    scan:
      description: Scanning image to be used for remote deposit capture
      example:
        account_number: faker.random.alphaNumeric(14)
        check_currency: USD
        back_image_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        date_scanned: 2019-01-02T03:04:05.678Z
        front_image_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        check_amount: 0
        routing_number: "123456789"
      properties:
        id:
          description: RDC Scan ID
          format: uuid
          readOnly: true
          type: string
        account_number:
          description: Account number
          example: faker.random.alphaNumeric(14)
          readOnly: true
          type: string
        routing_number:
          description: Bank routing number
          example: "123456789"
          readOnly: true
          type: string
        check_amount:
          description: Amount on check in ISO 4217 minor currency units
          readOnly: true
          type: integer
        check_currency:
          description: ISO 4217 currency code for the check amount
          example: USD
          readOnly: true
          type: string
        date_scanned:
          description: Date the check image was scanned, in RFC 3339 format
          example: 2019-01-02T03:04:05.678Z
          readOnly: true
          type: string
        front_image_id:
          description: ID of the image of the front of the check
          format: uuid
          type: string
        back_image_id:
          description: ID of the image of the back of the check
          format: uuid
          type: string
      required:
      - account_number
      - back_image_id
      - check_amount
      - check_currency
      - date_scanned
      - front_image_id
      - id
      - routing_number
      title: RDC Scan
      type: object
    scan_list:
      allOf:
      - $ref: '#/components/schemas/scan_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    ingestion_status:
      description: Reconciliation ingestion status values
      enum:
      - IN_PROCESS
      - COMPLETED
      - FAILED
      title: Reconciliation Ingestion Status Values
      type: string
    reconciliation:
      description: Reconciliation
      example:
        file_name: faker.random.alphaNumeric(14)
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Reconciliation ID
          format: uuid
          readOnly: true
          type: string
        file_name:
          description: Filename of the data to be reconciled
          example: faker.random.alphaNumeric(14)
          readOnly: true
          type: string
        ingestion_status:
          $ref: '#/components/schemas/ingestion_status'
      required:
      - file_name
      - id
      - ingestion_status
      title: Reconciliation
      type: object
    reconciliation_list:
      allOf:
      - $ref: '#/components/schemas/reconciliation_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    reconciliation_input:
      description: Input data for a reconciliation
      properties:
        file_name:
          description: Filename of the data to be reconciled
          example: faker.random.alphaNumeric(14)
          type: string
        byte_data:
          description: Base64url encoded image
          format: byte
          type: string
      required:
      - byte_data
      - file_name
      title: Reconciliation Input
      type: object
    recurrence_data:
      description: Represents recurrence data
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recurrence_frequency: 6
      properties:
        id:
          description: Recurrence ID
          format: uuid
          type: string
        recurrence_frequency:
          description: the frequency at which to recur
          type: integer
      title: Recurrence Data
      type: object
    ach_outgoing:
      description: Represents an outgoing ACH
      example:
        amount: 0
        execution_date: 2000-01-23
        transaction_direction: DEBIT
        target_account_routing: faker.helpers.replaceSymbols(#########)
        no_fraud_check: false
        account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overwrite_checks: false
        reference_info: faker.lorem.sentence
        target_bank_country: faker.address.countryCode
        currency: faker.finance.currencyCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipient_name: faker.name.findName
        target_account_no: faker.helpers.replaceSymbols(################)
        recurring_data:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recurrence_frequency: 6
      properties:
        id:
          description: Outgoing ACH
          format: uuid
          readOnly: true
          type: string
        account_id:
          description: ID of the source account
          format: uuid
          readOnly: true
          type: string
        amount:
          description: Amount to transfer in ISO 4217 minor currency units
          minimum: 0
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          example: faker.finance.currencyCode
          type: string
        transaction_direction:
          description: The type of transaction (DEBIT/CREDIT) for originating account
          enum:
          - DEBIT
          - CREDIT
          example: DEBIT
          type: string
        reference_info:
          description: Reference information for the payment
          example: faker.lorem.sentence
          maxLength: 80
          type: string
        target_account_no:
          description: The account number of the destination account
          example: faker.helpers.replaceSymbols(################)
          maxLength: 17
          pattern: ^\d{1,17}$
          type: string
        target_account_routing:
          description: The routing number of the destination account
          example: faker.helpers.replaceSymbols(#########)
          maxLength: 9
          minLength: 9
          pattern: ^\d{9}$
          type: string
        target_bank_country:
          default: US
          description: The ISO-3166-1 Alpha-2 country code in which the target account
            is registered (default US)
          example: faker.address.countryCode
          type: string
        recipient_name:
          description: The name of the recipient
          example: faker.name.findName
          type: string
        execution_date:
          description: The date the transfer executes (default today)
          format: date
          type: string
        recurring_data:
          $ref: '#/components/schemas/recurrence_data'
        no_fraud_check:
          description: Do not perform a fraud check
          example: false
          type: boolean
        overwrite_checks:
          description: Overwrite non mandatory posting checks. Mandatory checks will
            still be processed
          example: false
          type: boolean
      required:
      - account_id
      - amount
      - currency
      - recipient_name
      - target_account_no
      - target_account_routing
      - target_bank_country
      title: Outgoing ACH
      type: object
    ach_outgoing_list:
      allOf:
      - $ref: '#/components/schemas/ach_outgoing_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    a2a_transfer:
      example:
        amount: 0
        transfer_reversal:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          is_reversal: true
        execution_date: 2000-01-23
        payment_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_overwrite_checks: true
        reference_info: reference_info
        source_account: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        currency: faker.finance.currencyCode
        target_account: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recurring_data:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          recurrence_frequency: 6
      properties:
        source_account:
          description: Account ID that is instructing the transfer
          format: uuid
          type: string
        target_account:
          description: Account ID that is receiving the transfer
          format: uuid
          type: string
        amount:
          description: amount in ISO 4217 minor currency units
          minimum: 0
          type: integer
        currency:
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code.
          example: faker.finance.currencyCode
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign_type'
        reference_info:
          description: User specified information of this transfer
          maxLength: 80
          type: string
        execution_date:
          description: Execution date of the transfer. Default is the current date
          format: date
          type: string
        recurring_data:
          $ref: '#/components/schemas/recurrence_data'
        transfer_reversal:
          $ref: '#/components/schemas/a2a_transfer_transfer_reversal'
        is_overwrite_checks:
          description: Flag to indicate the overwrite checks
          readOnly: true
          type: boolean
        payment_id:
          description: Payment ID
          format: uuid
          readOnly: true
          type: string
      required:
      - amount
      - currency
      - dc_sign
      - source_account
      - target_account
      type: object
    a2a_transfer_list:
      allOf:
      - $ref: '#/components/schemas/a2a_transfer_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    event_type:
      description: The type of the webhook event. Items ends with .* means all events
        that match the prefix (major type. e.g. ACCOUNT, KYC etc). One webhook allows
        one major type only.
      enum:
      - ACCOUNT.*
      - ACCOUNT.STATUS_CHANGED
      - TRANSACTION.*
      - TRANSACTION.POSTED
      - TRANSACTION.FAILED
      - KYC.*
      - KYC.CUSTOMER_MANUAL_REVIEW
      - KYC.PASS
      - KYC.FAILED_MANUAL_REVIEW
      - KYC.FOUND_ON_WATCHLIST
      - KYC.ADDITIONAL_DOC_REQUIRED
      - LEDGER.*
      - LEDGER.BALANCE_CHANGED.ACH_REVERSALS
      - LEDGER.BALANCE_CHANGED.INTEREST
      - LEDGER.BALANCE_CHANGED.WIRES
      - LEDGER.BALANCE_CHANGED.CHECK_DEPOSIT
      - CARD.*
      - CARD.FULFILLMENT_UPDATE
      - CARD.TERMINATION
      - CARD.STATUS_CHANGE
      - RECONCILIATION.*
      - RECONCILIATION.PROCESSED
      title: All the webhook event types
      type: string
    webhook:
      description: Webhook object
      example:
        is_enabled: true
        metadata: metadata
        last_updated: 2000-01-23T04:56:07.000+00:00
        enabled_events:
        - null
        - null
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: https://openapi-generator.tech
      properties:
        id:
          description: The unique ID of the webhook
          format: uuid
          type: string
        url:
          description: URL that the webhook will send request to
          format: uri
          maxLength: 1000
          type: string
        description:
          description: A description of what the webhook is used for
          type: string
        enabled_events:
          description: A list of the events that will trigger the webhook
          items:
            $ref: '#/components/schemas/event_type'
          type: array
        metadata:
          description: Additional information stored to the webhook
          maxLength: 1024
          type: string
        last_updated:
          description: Timestamp that this webhook was created or the last time any
            field was changed
          format: date-time
          readOnly: true
          type: string
        is_enabled:
          description: Set the webhook to be enabled or disabled
          type: boolean
      required:
      - enabled_events
      - is_enabled
      - url
      title: Webhook
      type: object
    webhook_list:
      allOf:
      - $ref: '#/components/schemas/webhook_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    event:
      description: Webhook event object
      example:
        metadata: metadata
        response_history:
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        webhook_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        event_resource: '{}'
        event_time: 2000-01-23T04:56:07.000+00:00
        status: RUNNING
      properties:
        id:
          description: Unique event ID of the webhook request. Use event endpoints
            to get more event summary data
          format: uuid
          readOnly: true
          type: string
        webhook_id:
          description: Webhook the current event belongs to
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/event_type'
        event_time:
          description: Timestamp of the current event raised
          format: date-time
          type: string
        metadata:
          description: Metadata that stored in the webhook subscription
          maxLength: 1024
          type: string
        event_resource:
          description: "Json string of object associated with the event. For example,\
            \ if your event is ACCOUNT.STATUS_CHANGE, You can refer to Acccount to\
            \ parse the account event to obtain the ID, status etc. \n"
          type: object
        status:
          description: Current event status. Failing event will keep retry until it
            is purged.
          enum:
          - RUNNING
          - SUCCESS
          - RETRYING
          type: string
        response_history:
          description: Response history of the webhook request
          items:
            $ref: '#/components/schemas/event_response_history'
          type: array
      title: Webhook event
      type: object
    event_list:
      allOf:
      - $ref: '#/components/schemas/event_list_allOf'
      - $ref: '#/components/schemas/paginated_response'
    inline_object:
      properties:
        posting_date:
          description: Posting date of the balance. Default is today's date
          format: date-time
          type: string
        balance_type:
          $ref: '#/components/schemas/balance_type'
      type: object
    inline_object_1:
      properties:
        start_date:
          description: Start date of the search range. Default is the date two weeks
            ago
          format: date
          type: string
        end_date:
          description: End date of the search range. Default is the current date
          format: date
          type: string
      type: object
    inline_object_2:
      properties:
        has_details:
          description: Include the address information (e.g. street number) if set
            to True. Address reference only if set to false. Default is false
          type: boolean
      type: object
    ProspectResponse:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Customer id to use for segment disclosure tracking and customer
            creation
          format: uuid
          type: string
      title: ProspectResponse
      type: object
    inline_object_3:
      properties:
        is_rolling_secret:
          description: Set true to let the current secret expire in the next 24 hours.
            Set false to let the current secret expire immediately.
          type: boolean
      type: object
    inline_response_200:
      example:
        delete_at: 2000-01-23T04:56:07.000+00:00
        secret: secret
      properties:
        secret:
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
          maxLength: 64
          minLength: 64
          type: string
        delete_at:
          description: Timestamp that the old secret is delete
          format: date-time
          type: string
      type: object
    inline_response_201:
      example:
        secret: secret
      properties:
        secret:
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
          maxLength: 64
          minLength: 64
          type: string
      type: object
    inline_object_4:
      properties:
        event:
          $ref: '#/components/schemas/event_type'
      type: object
    account_list_allOf:
      properties:
        accounts:
          description: Array of Accounts
          items:
            $ref: '#/components/schemas/account'
          type: array
      required:
      - accounts
      type: object
    transaction_list_allOf:
      properties:
        transactions:
          description: Array of transactions
          items:
            $ref: '#/components/schemas/transaction'
          type: array
      required:
      - transactions
      type: object
    customer_list_allOf:
      properties:
        customers:
          description: Array of Customers
          items:
            $ref: '#/components/schemas/customer'
          type: array
      required:
      - customers
      type: object
    customer_verification_result_list_allOf:
      properties:
        verifications:
          description: Array of Verification results
          items:
            $ref: '#/components/schemas/customer_verification_result'
          type: array
      required:
      - verifications
      type: object
    document_list_allOf:
      properties:
        documents:
          description: Array of documents
          items:
            $ref: '#/components/schemas/document'
          type: array
      required:
      - documents
      type: object
    deposit_list_allOf:
      properties:
        deposits:
          description: Array of RDC deposits
          items:
            $ref: '#/components/schemas/deposit'
          type: array
      required:
      - deposits
      type: object
    image_list_allOf:
      properties:
        images:
          description: Array of RDC images
          items:
            $ref: '#/components/schemas/image'
          type: array
      required:
      - images
      type: object
    scan_list_allOf:
      properties:
        scans:
          description: Array of RDC scans
          items:
            $ref: '#/components/schemas/scan'
          type: array
      required:
      - scans
      type: object
    reconciliation_list_allOf:
      properties:
        reconciliations:
          description: Array of reconciliations
          items:
            $ref: '#/components/schemas/reconciliation'
          type: array
      required:
      - reconciliations
      type: object
    ach_outgoing_list_allOf:
      properties:
        ach_outgoings:
          description: Array of ACH
          items:
            $ref: '#/components/schemas/ach_outgoing'
          type: array
      required:
      - ach_outgoings
      type: object
    a2a_transfer_transfer_reversal:
      description: If transfer reversal happens, both original and reversal transfers
        will be set for the cross reference
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_reversal: true
      properties:
        is_reversal:
          description: True if transfer reversal, false otherwise the original transfer
          type: boolean
        id:
          description: Payment ID of the corresponding reversal/original transfer
          format: uuid
          type: string
      readOnly: true
      type: object
    a2a_transfer_list_allOf:
      properties:
        a2a_transfers:
          description: Array of account to account transfers
          items:
            $ref: '#/components/schemas/a2a_transfer'
          type: array
      required:
      - a2a_transfers
      type: object
    webhook_list_allOf:
      properties:
        webhooks:
          description: Array of webhooks
          items:
            $ref: '#/components/schemas/webhook'
          type: array
      required:
      - webhooks
      type: object
    event_response_history:
      example:
        sent_time: 2000-01-23T04:56:07.000+00:00
        code: 0
        response_body: response_body
        response_time: 2000-01-23T04:56:07.000+00:00
      properties:
        code:
          description: Response code from the request
          type: integer
        response_body:
          description: Response body from the request
          type: string
        sent_time:
          description: Timestamp that the request is sent
          format: date-time
          type: string
        response_time:
          description: Timestamp that the response is received
          format: date-time
          type: string
      type: object
    event_list_allOf:
      properties:
        event_list:
          description: Array of events
          items:
            $ref: '#/components/schemas/event'
          type: array
      required:
      - event_list
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: api_key
      scheme: bearer
      type: http
