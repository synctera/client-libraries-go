/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// Status The status of the account. Required for shadow mode on account creation 
type Status string

// List of status
const (
	STATUS_APPLICATION_SUBMITTED Status = "APPLICATION_SUBMITTED"
	STATUS_FAILED_KYC Status = "FAILED_KYC"
	STATUS_ACCOUNT_NOT_DESIRED Status = "ACCOUNT_NOT_DESIRED"
	STATUS_ACTIVE_OR_DISBURSED Status = "ACTIVE_OR_DISBURSED"
	STATUS_CLOSED Status = "CLOSED"
	STATUS_SUSPENDED Status = "SUSPENDED"
	STATUS_CHARGED_OFF Status = "CHARGED_OFF"
	STATUS_ACCOUNT_NEVER_ACTIVE Status = "ACCOUNT_NEVER_ACTIVE"
	STATUS_ACTIVATED_NOT_DISBURSED Status = "ACTIVATED_NOT_DISBURSED"
	STATUS_AWAITING_FIXING Status = "AWAITING_FIXING"
	STATUS_IN_CLOSING Status = "IN_CLOSING"
)

var allowedStatusEnumValues = []Status{
	"APPLICATION_SUBMITTED",
	"FAILED_KYC",
	"ACCOUNT_NOT_DESIRED",
	"ACTIVE_OR_DISBURSED",
	"CLOSED",
	"SUSPENDED",
	"CHARGED_OFF",
	"ACCOUNT_NEVER_ACTIVE",
	"ACTIVATED_NOT_DISBURSED",
	"AWAITING_FIXING",
	"IN_CLOSING",
}

func (v *Status) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status(value)
	for _, existing := range allowedStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status", value)
}

// NewStatusFromValue returns a pointer to a valid Status
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusFromValue(v string) (*Status, error) {
	ev := Status(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status: valid values are %v", v, allowedStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status) IsValid() bool {
	for _, existing := range allowedStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to status value
func (v Status) Ptr() *Status {
	return &v
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

