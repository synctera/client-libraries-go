/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// A2aTransfer struct for A2aTransfer
type A2aTransfer struct {
	// amount in ISO 4217 minor currency units
	Amount int32 `json:"amount"`
	// Account currency or account settlement currency. ISO 4217 alphabetic currency code.
	Currency string `json:"currency"`
	DcSign DcSignType `json:"dc_sign"`
	// Execution date of the transfer. Default is the current date
	ExecutionDate *string `json:"execution_date,omitempty"`
	// Flag to indicate the overwrite checks
	IsOverwriteChecks *bool `json:"is_overwrite_checks,omitempty"`
	// Payment ID
	PaymentId *string `json:"payment_id,omitempty"`
	RecurringData *RecurrenceData `json:"recurring_data,omitempty"`
	// User specified information of this transfer
	ReferenceInfo *string `json:"reference_info,omitempty"`
	// Account ID that is instructing the transfer
	SourceAccount string `json:"source_account"`
	// Account ID that is receiving the transfer
	TargetAccount string `json:"target_account"`
	TransferReversal *A2aTransferTransferReversal `json:"transfer_reversal,omitempty"`
}

// NewA2aTransfer instantiates a new A2aTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewA2aTransfer(amount int32, currency string, dcSign DcSignType, sourceAccount string, targetAccount string) *A2aTransfer {
	this := A2aTransfer{}
	this.Amount = amount
	this.Currency = currency
	this.DcSign = dcSign
	this.SourceAccount = sourceAccount
	this.TargetAccount = targetAccount
	return &this
}

// NewA2aTransferWithDefaults instantiates a new A2aTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewA2aTransferWithDefaults() *A2aTransfer {
	this := A2aTransfer{}
	return &this
}

// GetAmount returns the Amount field value
func (o *A2aTransfer) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *A2aTransfer) SetAmount(v int32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *A2aTransfer) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *A2aTransfer) SetCurrency(v string) {
	o.Currency = v
}

// GetDcSign returns the DcSign field value
func (o *A2aTransfer) GetDcSign() DcSignType {
	if o == nil {
		var ret DcSignType
		return ret
	}

	return o.DcSign
}

// GetDcSignOk returns a tuple with the DcSign field value
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetDcSignOk() (*DcSignType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DcSign, true
}

// SetDcSign sets field value
func (o *A2aTransfer) SetDcSign(v DcSignType) {
	o.DcSign = v
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise.
func (o *A2aTransfer) GetExecutionDate() string {
	if o == nil || o.ExecutionDate == nil {
		var ret string
		return ret
	}
	return *o.ExecutionDate
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetExecutionDateOk() (*string, bool) {
	if o == nil || o.ExecutionDate == nil {
		return nil, false
	}
	return o.ExecutionDate, true
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *A2aTransfer) HasExecutionDate() bool {
	if o != nil && o.ExecutionDate != nil {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given string and assigns it to the ExecutionDate field.
func (o *A2aTransfer) SetExecutionDate(v string) {
	o.ExecutionDate = &v
}

// GetIsOverwriteChecks returns the IsOverwriteChecks field value if set, zero value otherwise.
func (o *A2aTransfer) GetIsOverwriteChecks() bool {
	if o == nil || o.IsOverwriteChecks == nil {
		var ret bool
		return ret
	}
	return *o.IsOverwriteChecks
}

// GetIsOverwriteChecksOk returns a tuple with the IsOverwriteChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetIsOverwriteChecksOk() (*bool, bool) {
	if o == nil || o.IsOverwriteChecks == nil {
		return nil, false
	}
	return o.IsOverwriteChecks, true
}

// HasIsOverwriteChecks returns a boolean if a field has been set.
func (o *A2aTransfer) HasIsOverwriteChecks() bool {
	if o != nil && o.IsOverwriteChecks != nil {
		return true
	}

	return false
}

// SetIsOverwriteChecks gets a reference to the given bool and assigns it to the IsOverwriteChecks field.
func (o *A2aTransfer) SetIsOverwriteChecks(v bool) {
	o.IsOverwriteChecks = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *A2aTransfer) GetPaymentId() string {
	if o == nil || o.PaymentId == nil {
		var ret string
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetPaymentIdOk() (*string, bool) {
	if o == nil || o.PaymentId == nil {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *A2aTransfer) HasPaymentId() bool {
	if o != nil && o.PaymentId != nil {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given string and assigns it to the PaymentId field.
func (o *A2aTransfer) SetPaymentId(v string) {
	o.PaymentId = &v
}

// GetRecurringData returns the RecurringData field value if set, zero value otherwise.
func (o *A2aTransfer) GetRecurringData() RecurrenceData {
	if o == nil || o.RecurringData == nil {
		var ret RecurrenceData
		return ret
	}
	return *o.RecurringData
}

// GetRecurringDataOk returns a tuple with the RecurringData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetRecurringDataOk() (*RecurrenceData, bool) {
	if o == nil || o.RecurringData == nil {
		return nil, false
	}
	return o.RecurringData, true
}

// HasRecurringData returns a boolean if a field has been set.
func (o *A2aTransfer) HasRecurringData() bool {
	if o != nil && o.RecurringData != nil {
		return true
	}

	return false
}

// SetRecurringData gets a reference to the given RecurrenceData and assigns it to the RecurringData field.
func (o *A2aTransfer) SetRecurringData(v RecurrenceData) {
	o.RecurringData = &v
}

// GetReferenceInfo returns the ReferenceInfo field value if set, zero value otherwise.
func (o *A2aTransfer) GetReferenceInfo() string {
	if o == nil || o.ReferenceInfo == nil {
		var ret string
		return ret
	}
	return *o.ReferenceInfo
}

// GetReferenceInfoOk returns a tuple with the ReferenceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetReferenceInfoOk() (*string, bool) {
	if o == nil || o.ReferenceInfo == nil {
		return nil, false
	}
	return o.ReferenceInfo, true
}

// HasReferenceInfo returns a boolean if a field has been set.
func (o *A2aTransfer) HasReferenceInfo() bool {
	if o != nil && o.ReferenceInfo != nil {
		return true
	}

	return false
}

// SetReferenceInfo gets a reference to the given string and assigns it to the ReferenceInfo field.
func (o *A2aTransfer) SetReferenceInfo(v string) {
	o.ReferenceInfo = &v
}

// GetSourceAccount returns the SourceAccount field value
func (o *A2aTransfer) GetSourceAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceAccount
}

// GetSourceAccountOk returns a tuple with the SourceAccount field value
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetSourceAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceAccount, true
}

// SetSourceAccount sets field value
func (o *A2aTransfer) SetSourceAccount(v string) {
	o.SourceAccount = v
}

// GetTargetAccount returns the TargetAccount field value
func (o *A2aTransfer) GetTargetAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetAccount
}

// GetTargetAccountOk returns a tuple with the TargetAccount field value
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetTargetAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetAccount, true
}

// SetTargetAccount sets field value
func (o *A2aTransfer) SetTargetAccount(v string) {
	o.TargetAccount = v
}

// GetTransferReversal returns the TransferReversal field value if set, zero value otherwise.
func (o *A2aTransfer) GetTransferReversal() A2aTransferTransferReversal {
	if o == nil || o.TransferReversal == nil {
		var ret A2aTransferTransferReversal
		return ret
	}
	return *o.TransferReversal
}

// GetTransferReversalOk returns a tuple with the TransferReversal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2aTransfer) GetTransferReversalOk() (*A2aTransferTransferReversal, bool) {
	if o == nil || o.TransferReversal == nil {
		return nil, false
	}
	return o.TransferReversal, true
}

// HasTransferReversal returns a boolean if a field has been set.
func (o *A2aTransfer) HasTransferReversal() bool {
	if o != nil && o.TransferReversal != nil {
		return true
	}

	return false
}

// SetTransferReversal gets a reference to the given A2aTransferTransferReversal and assigns it to the TransferReversal field.
func (o *A2aTransfer) SetTransferReversal(v A2aTransferTransferReversal) {
	o.TransferReversal = &v
}

func (o A2aTransfer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["dc_sign"] = o.DcSign
	}
	if o.ExecutionDate != nil {
		toSerialize["execution_date"] = o.ExecutionDate
	}
	if o.IsOverwriteChecks != nil {
		toSerialize["is_overwrite_checks"] = o.IsOverwriteChecks
	}
	if o.PaymentId != nil {
		toSerialize["payment_id"] = o.PaymentId
	}
	if o.RecurringData != nil {
		toSerialize["recurring_data"] = o.RecurringData
	}
	if o.ReferenceInfo != nil {
		toSerialize["reference_info"] = o.ReferenceInfo
	}
	if true {
		toSerialize["source_account"] = o.SourceAccount
	}
	if true {
		toSerialize["target_account"] = o.TargetAccount
	}
	if o.TransferReversal != nil {
		toSerialize["transfer_reversal"] = o.TransferReversal
	}
	return json.Marshal(toSerialize)
}

type NullableA2aTransfer struct {
	value *A2aTransfer
	isSet bool
}

func (v NullableA2aTransfer) Get() *A2aTransfer {
	return v.value
}

func (v *NullableA2aTransfer) Set(val *A2aTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableA2aTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableA2aTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableA2aTransfer(val *A2aTransfer) *NullableA2aTransfer {
	return &NullableA2aTransfer{value: val, isSet: true}
}

func (v NullableA2aTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableA2aTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


