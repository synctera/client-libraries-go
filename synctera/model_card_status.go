/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CardStatus The status indicating the card lifecycle state
type CardStatus string

// List of card_status
const (
	CARDSTATUS_ACTIVE CardStatus = "ACTIVE"
	CARDSTATUS_UNACTIVATED CardStatus = "UNACTIVATED"
	CARDSTATUS_SUSPENDED CardStatus = "SUSPENDED"
	CARDSTATUS_TERMINATED CardStatus = "TERMINATED"
)

var allowedCardStatusEnumValues = []CardStatus{
	"ACTIVE",
	"UNACTIVATED",
	"SUSPENDED",
	"TERMINATED",
}

func (v *CardStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardStatus(value)
	for _, existing := range allowedCardStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardStatus", value)
}

// NewCardStatusFromValue returns a pointer to a valid CardStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardStatusFromValue(v string) (*CardStatus, error) {
	ev := CardStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardStatus: valid values are %v", v, allowedCardStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardStatus) IsValid() bool {
	for _, existing := range allowedCardStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to card_status value
func (v CardStatus) Ptr() *CardStatus {
	return &v
}

type NullableCardStatus struct {
	value *CardStatus
	isSet bool
}

func (v NullableCardStatus) Get() *CardStatus {
	return v.value
}

func (v *NullableCardStatus) Set(val *CardStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCardStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCardStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardStatus(val *CardStatus) *NullableCardStatus {
	return &NullableCardStatus{value: val, isSet: true}
}

func (v NullableCardStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

