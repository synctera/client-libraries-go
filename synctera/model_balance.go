/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"time"
)

// Balance struct for Balance
type Balance struct {
	// Account ID
	Id *string `json:"id,omitempty"`
	// Balance at the posting date
	PostingDate *time.Time `json:"posting_date,omitempty"`
	BalanceType *BalanceType `json:"balance_type,omitempty"`
	// Currency of the balance. ISO 4217 alphabetic currency code
	Currency *string `json:"currency,omitempty"`
	// amount in ISO 4217 minor currency units
	Amount *int32 `json:"amount,omitempty"`
	DcSign *DcSignType `json:"dc_sign,omitempty"`
}

// NewBalance instantiates a new Balance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalance() *Balance {
	this := Balance{}
	return &this
}

// NewBalanceWithDefaults instantiates a new Balance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceWithDefaults() *Balance {
	this := Balance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Balance) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balance) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Balance) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Balance) SetId(v string) {
	o.Id = &v
}

// GetPostingDate returns the PostingDate field value if set, zero value otherwise.
func (o *Balance) GetPostingDate() time.Time {
	if o == nil || o.PostingDate == nil {
		var ret time.Time
		return ret
	}
	return *o.PostingDate
}

// GetPostingDateOk returns a tuple with the PostingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balance) GetPostingDateOk() (*time.Time, bool) {
	if o == nil || o.PostingDate == nil {
		return nil, false
	}
	return o.PostingDate, true
}

// HasPostingDate returns a boolean if a field has been set.
func (o *Balance) HasPostingDate() bool {
	if o != nil && o.PostingDate != nil {
		return true
	}

	return false
}

// SetPostingDate gets a reference to the given time.Time and assigns it to the PostingDate field.
func (o *Balance) SetPostingDate(v time.Time) {
	o.PostingDate = &v
}

// GetBalanceType returns the BalanceType field value if set, zero value otherwise.
func (o *Balance) GetBalanceType() BalanceType {
	if o == nil || o.BalanceType == nil {
		var ret BalanceType
		return ret
	}
	return *o.BalanceType
}

// GetBalanceTypeOk returns a tuple with the BalanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balance) GetBalanceTypeOk() (*BalanceType, bool) {
	if o == nil || o.BalanceType == nil {
		return nil, false
	}
	return o.BalanceType, true
}

// HasBalanceType returns a boolean if a field has been set.
func (o *Balance) HasBalanceType() bool {
	if o != nil && o.BalanceType != nil {
		return true
	}

	return false
}

// SetBalanceType gets a reference to the given BalanceType and assigns it to the BalanceType field.
func (o *Balance) SetBalanceType(v BalanceType) {
	o.BalanceType = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Balance) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balance) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Balance) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Balance) SetCurrency(v string) {
	o.Currency = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Balance) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balance) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Balance) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Balance) SetAmount(v int32) {
	o.Amount = &v
}

// GetDcSign returns the DcSign field value if set, zero value otherwise.
func (o *Balance) GetDcSign() DcSignType {
	if o == nil || o.DcSign == nil {
		var ret DcSignType
		return ret
	}
	return *o.DcSign
}

// GetDcSignOk returns a tuple with the DcSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balance) GetDcSignOk() (*DcSignType, bool) {
	if o == nil || o.DcSign == nil {
		return nil, false
	}
	return o.DcSign, true
}

// HasDcSign returns a boolean if a field has been set.
func (o *Balance) HasDcSign() bool {
	if o != nil && o.DcSign != nil {
		return true
	}

	return false
}

// SetDcSign gets a reference to the given DcSignType and assigns it to the DcSign field.
func (o *Balance) SetDcSign(v DcSignType) {
	o.DcSign = &v
}

func (o Balance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PostingDate != nil {
		toSerialize["posting_date"] = o.PostingDate
	}
	if o.BalanceType != nil {
		toSerialize["balance_type"] = o.BalanceType
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.DcSign != nil {
		toSerialize["dc_sign"] = o.DcSign
	}
	return json.Marshal(toSerialize)
}

type NullableBalance struct {
	value *Balance
	isSet bool
}

func (v NullableBalance) Get() *Balance {
	return v.value
}

func (v *NullableBalance) Set(val *Balance) {
	v.value = val
	v.isSet = true
}

func (v NullableBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalance(val *Balance) *NullableBalance {
	return &NullableBalance{value: val, isSet: true}
}

func (v NullableBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


