/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// KycMediaType Type of image: PNG, JPG. Note that PDF and GIF are valid values, but not currently supported.
type KycMediaType string

// List of kyc_media_type
const (
	KYCMEDIATYPE_PDF KycMediaType = "PDF"
	KYCMEDIATYPE_PNG KycMediaType = "PNG"
	KYCMEDIATYPE_JPG KycMediaType = "JPG"
	KYCMEDIATYPE_GIF KycMediaType = "GIF"
)

var allowedKycMediaTypeEnumValues = []KycMediaType{
	"PDF",
	"PNG",
	"JPG",
	"GIF",
}

func (v *KycMediaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KycMediaType(value)
	for _, existing := range allowedKycMediaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KycMediaType", value)
}

// NewKycMediaTypeFromValue returns a pointer to a valid KycMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKycMediaTypeFromValue(v string) (*KycMediaType, error) {
	ev := KycMediaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KycMediaType: valid values are %v", v, allowedKycMediaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KycMediaType) IsValid() bool {
	for _, existing := range allowedKycMediaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to kyc_media_type value
func (v KycMediaType) Ptr() *KycMediaType {
	return &v
}

type NullableKycMediaType struct {
	value *KycMediaType
	isSet bool
}

func (v NullableKycMediaType) Get() *KycMediaType {
	return v.value
}

func (v *NullableKycMediaType) Set(val *KycMediaType) {
	v.value = val
	v.isSet = true
}

func (v NullableKycMediaType) IsSet() bool {
	return v.isSet
}

func (v *NullableKycMediaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKycMediaType(val *KycMediaType) *NullableKycMediaType {
	return &NullableKycMediaType{value: val, isSet: true}
}

func (v NullableKycMediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKycMediaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

