/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// Relationship struct for Relationship
type Relationship struct {
	// Connection ID of the account
	ConnectId *string `json:"connect_id,omitempty"`
	// Relationship type
	RelationshipType string `json:"relationship_type"`
	// Customer that the current account is associated with
	CustomerId string `json:"customer_id"`
}

// NewRelationship instantiates a new Relationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationship(relationshipType string, customerId string) *Relationship {
	this := Relationship{}
	this.RelationshipType = relationshipType
	this.CustomerId = customerId
	return &this
}

// NewRelationshipWithDefaults instantiates a new Relationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipWithDefaults() *Relationship {
	this := Relationship{}
	return &this
}

// GetConnectId returns the ConnectId field value if set, zero value otherwise.
func (o *Relationship) GetConnectId() string {
	if o == nil || o.ConnectId == nil {
		var ret string
		return ret
	}
	return *o.ConnectId
}

// GetConnectIdOk returns a tuple with the ConnectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetConnectIdOk() (*string, bool) {
	if o == nil || o.ConnectId == nil {
		return nil, false
	}
	return o.ConnectId, true
}

// HasConnectId returns a boolean if a field has been set.
func (o *Relationship) HasConnectId() bool {
	if o != nil && o.ConnectId != nil {
		return true
	}

	return false
}

// SetConnectId gets a reference to the given string and assigns it to the ConnectId field.
func (o *Relationship) SetConnectId(v string) {
	o.ConnectId = &v
}

// GetRelationshipType returns the RelationshipType field value
func (o *Relationship) GetRelationshipType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationshipType
}

// GetRelationshipTypeOk returns a tuple with the RelationshipType field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetRelationshipTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RelationshipType, true
}

// SetRelationshipType sets field value
func (o *Relationship) SetRelationshipType(v string) {
	o.RelationshipType = v
}

// GetCustomerId returns the CustomerId field value
func (o *Relationship) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetCustomerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *Relationship) SetCustomerId(v string) {
	o.CustomerId = v
}

func (o Relationship) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectId != nil {
		toSerialize["connect_id"] = o.ConnectId
	}
	if true {
		toSerialize["relationship_type"] = o.RelationshipType
	}
	if true {
		toSerialize["customer_id"] = o.CustomerId
	}
	return json.Marshal(toSerialize)
}

type NullableRelationship struct {
	value *Relationship
	isSet bool
}

func (v NullableRelationship) Get() *Relationship {
	return v.value
}

func (v *NullableRelationship) Set(val *Relationship) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationship(val *Relationship) *NullableRelationship {
	return &NullableRelationship{value: val, isSet: true}
}

func (v NullableRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


