/*
 * Synctera API
 *
 * <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// RecurrenceData Represents recurrence data
type RecurrenceData struct {
	// Recurrence ID
	Id *string `json:"id,omitempty"`
	// the frequency at which to recur
	RecurrenceFrequency *int32 `json:"recurrence_frequency,omitempty"`
}

// NewRecurrenceData instantiates a new RecurrenceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceData() *RecurrenceData {
	this := RecurrenceData{}
	return &this
}

// NewRecurrenceDataWithDefaults instantiates a new RecurrenceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceDataWithDefaults() *RecurrenceData {
	this := RecurrenceData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecurrenceData) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceData) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecurrenceData) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RecurrenceData) SetId(v string) {
	o.Id = &v
}

// GetRecurrenceFrequency returns the RecurrenceFrequency field value if set, zero value otherwise.
func (o *RecurrenceData) GetRecurrenceFrequency() int32 {
	if o == nil || o.RecurrenceFrequency == nil {
		var ret int32
		return ret
	}
	return *o.RecurrenceFrequency
}

// GetRecurrenceFrequencyOk returns a tuple with the RecurrenceFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceData) GetRecurrenceFrequencyOk() (*int32, bool) {
	if o == nil || o.RecurrenceFrequency == nil {
		return nil, false
	}
	return o.RecurrenceFrequency, true
}

// HasRecurrenceFrequency returns a boolean if a field has been set.
func (o *RecurrenceData) HasRecurrenceFrequency() bool {
	if o != nil && o.RecurrenceFrequency != nil {
		return true
	}

	return false
}

// SetRecurrenceFrequency gets a reference to the given int32 and assigns it to the RecurrenceFrequency field.
func (o *RecurrenceData) SetRecurrenceFrequency(v int32) {
	o.RecurrenceFrequency = &v
}

func (o RecurrenceData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RecurrenceFrequency != nil {
		toSerialize["recurrence_frequency"] = o.RecurrenceFrequency
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceData struct {
	value *RecurrenceData
	isSet bool
}

func (v NullableRecurrenceData) Get() *RecurrenceData {
	return v.value
}

func (v *NullableRecurrenceData) Set(val *RecurrenceData) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceData) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceData(val *RecurrenceData) *NullableRecurrenceData {
	return &NullableRecurrenceData{value: val, isSet: true}
}

func (v NullableRecurrenceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


