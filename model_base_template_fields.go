/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// BaseTemplateFields struct for BaseTemplateFields
type BaseTemplateFields struct {
	AccountType AccountType `json:"account_type"`
	// Bank country of the account
	BankCountry string `json:"bank_country"`
	// Account currency. ISO 4217 alphabetic currency code
	Currency string `json:"currency"`
}

// NewBaseTemplateFields instantiates a new BaseTemplateFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTemplateFields(accountType AccountType, bankCountry string, currency string) *BaseTemplateFields {
	this := BaseTemplateFields{}
	this.AccountType = accountType
	this.BankCountry = bankCountry
	this.Currency = currency
	return &this
}

// NewBaseTemplateFieldsWithDefaults instantiates a new BaseTemplateFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTemplateFieldsWithDefaults() *BaseTemplateFields {
	this := BaseTemplateFields{}
	return &this
}

// GetAccountType returns the AccountType field value
func (o *BaseTemplateFields) GetAccountType() AccountType {
	if o == nil {
		var ret AccountType
		return ret
	}

	return o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value
// and a boolean to check if the value has been set.
func (o *BaseTemplateFields) GetAccountTypeOk() (*AccountType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountType, true
}

// SetAccountType sets field value
func (o *BaseTemplateFields) SetAccountType(v AccountType) {
	o.AccountType = v
}

// GetBankCountry returns the BankCountry field value
func (o *BaseTemplateFields) GetBankCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BankCountry
}

// GetBankCountryOk returns a tuple with the BankCountry field value
// and a boolean to check if the value has been set.
func (o *BaseTemplateFields) GetBankCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BankCountry, true
}

// SetBankCountry sets field value
func (o *BaseTemplateFields) SetBankCountry(v string) {
	o.BankCountry = v
}

// GetCurrency returns the Currency field value
func (o *BaseTemplateFields) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *BaseTemplateFields) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *BaseTemplateFields) SetCurrency(v string) {
	o.Currency = v
}

func (o BaseTemplateFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_type"] = o.AccountType
	}
	if true {
		toSerialize["bank_country"] = o.BankCountry
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableBaseTemplateFields struct {
	value *BaseTemplateFields
	isSet bool
}

func (v NullableBaseTemplateFields) Get() *BaseTemplateFields {
	return v.value
}

func (v *NullableBaseTemplateFields) Set(val *BaseTemplateFields) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTemplateFields) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTemplateFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTemplateFields(val *BaseTemplateFields) *NullableBaseTemplateFields {
	return &NullableBaseTemplateFields{value: val, isSet: true}
}

func (v NullableBaseTemplateFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTemplateFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
