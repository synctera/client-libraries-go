/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
)

// ReconciliationListAllOf struct for ReconciliationListAllOf
type ReconciliationListAllOf struct {
	// Array of reconciliations
	Reconciliations []Reconciliation `json:"reconciliations"`
}

// NewReconciliationListAllOf instantiates a new ReconciliationListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReconciliationListAllOf(reconciliations []Reconciliation) *ReconciliationListAllOf {
	this := ReconciliationListAllOf{}
	this.Reconciliations = reconciliations
	return &this
}

// NewReconciliationListAllOfWithDefaults instantiates a new ReconciliationListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReconciliationListAllOfWithDefaults() *ReconciliationListAllOf {
	this := ReconciliationListAllOf{}
	return &this
}

// GetReconciliations returns the Reconciliations field value
func (o *ReconciliationListAllOf) GetReconciliations() []Reconciliation {
	if o == nil {
		var ret []Reconciliation
		return ret
	}

	return o.Reconciliations
}

// GetReconciliationsOk returns a tuple with the Reconciliations field value
// and a boolean to check if the value has been set.
func (o *ReconciliationListAllOf) GetReconciliationsOk() ([]Reconciliation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reconciliations, true
}

// SetReconciliations sets field value
func (o *ReconciliationListAllOf) SetReconciliations(v []Reconciliation) {
	o.Reconciliations = v
}

func (o ReconciliationListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reconciliations"] = o.Reconciliations
	}
	return json.Marshal(toSerialize)
}

type NullableReconciliationListAllOf struct {
	value *ReconciliationListAllOf
	isSet bool
}

func (v NullableReconciliationListAllOf) Get() *ReconciliationListAllOf {
	return v.value
}

func (v *NullableReconciliationListAllOf) Set(val *ReconciliationListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReconciliationListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReconciliationListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReconciliationListAllOf(val *ReconciliationListAllOf) *NullableReconciliationListAllOf {
	return &NullableReconciliationListAllOf{value: val, isSet: true}
}

func (v NullableReconciliationListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReconciliationListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
