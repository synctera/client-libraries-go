/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// CardImageRejectionReason The category of reason that a card image was rejected
type CardImageRejectionReason string

// List of card_image_rejection_reason
const (
	CARDIMAGEREJECTIONREASON_COPYRIGHT     CardImageRejectionReason = "COPYRIGHT"
	CARDIMAGEREJECTIONREASON_TRADEMARK     CardImageRejectionReason = "TRADEMARK"
	CARDIMAGEREJECTIONREASON_BRANDED       CardImageRejectionReason = "BRANDED"
	CARDIMAGEREJECTIONREASON_PROMOTIONAL   CardImageRejectionReason = "PROMOTIONAL"
	CARDIMAGEREJECTIONREASON_INAPPROPRIATE CardImageRejectionReason = "INAPPROPRIATE"
	CARDIMAGEREJECTIONREASON_OTHER         CardImageRejectionReason = "OTHER"
)

var allowedCardImageRejectionReasonEnumValues = []CardImageRejectionReason{
	"COPYRIGHT",
	"TRADEMARK",
	"BRANDED",
	"PROMOTIONAL",
	"INAPPROPRIATE",
	"OTHER",
}

func (v *CardImageRejectionReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardImageRejectionReason(value)
	for _, existing := range allowedCardImageRejectionReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardImageRejectionReason", value)
}

// NewCardImageRejectionReasonFromValue returns a pointer to a valid CardImageRejectionReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardImageRejectionReasonFromValue(v string) (*CardImageRejectionReason, error) {
	ev := CardImageRejectionReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardImageRejectionReason: valid values are %v", v, allowedCardImageRejectionReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardImageRejectionReason) IsValid() bool {
	for _, existing := range allowedCardImageRejectionReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to card_image_rejection_reason value
func (v CardImageRejectionReason) Ptr() *CardImageRejectionReason {
	return &v
}

type NullableCardImageRejectionReason struct {
	value *CardImageRejectionReason
	isSet bool
}

func (v NullableCardImageRejectionReason) Get() *CardImageRejectionReason {
	return v.value
}

func (v *NullableCardImageRejectionReason) Set(val *CardImageRejectionReason) {
	v.value = val
	v.isSet = true
}

func (v NullableCardImageRejectionReason) IsSet() bool {
	return v.isSet
}

func (v *NullableCardImageRejectionReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardImageRejectionReason(val *CardImageRejectionReason) *NullableCardImageRejectionReason {
	return &NullableCardImageRejectionReason{value: val, isSet: true}
}

func (v NullableCardImageRejectionReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardImageRejectionReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
