/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// ChangeType The category of card change
type ChangeType string

// List of change_type
const (
	CHANGETYPE_STATUS      ChangeType = "STATUS"
	CHANGETYPE_FULFILLMENT ChangeType = "FULFILLMENT"
	CHANGETYPE_PIN         ChangeType = "PIN"
)

var allowedChangeTypeEnumValues = []ChangeType{
	"STATUS",
	"FULFILLMENT",
	"PIN",
}

func (v *ChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChangeType(value)
	for _, existing := range allowedChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChangeType", value)
}

// NewChangeTypeFromValue returns a pointer to a valid ChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChangeTypeFromValue(v string) (*ChangeType, error) {
	ev := ChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChangeType: valid values are %v", v, allowedChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangeType) IsValid() bool {
	for _, existing := range allowedChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to change_type value
func (v ChangeType) Ptr() *ChangeType {
	return &v
}

type NullableChangeType struct {
	value *ChangeType
	isSet bool
}

func (v NullableChangeType) Get() *ChangeType {
	return v.value
}

func (v *NullableChangeType) Set(val *ChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeType(val *ChangeType) *NullableChangeType {
	return &NullableChangeType{value: val, isSet: true}
}

func (v NullableChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
