/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// DisclosureType Describes the regulatory requirement that triggered the disclosure.
type DisclosureType string

// List of disclosure_type
const (
	DISCLOSURETYPE_REG_DD               DisclosureType = "REG_DD"
	DISCLOSURETYPE_KYC_DATA_COLLECTION  DisclosureType = "KYC_DATA_COLLECTION"
	DISCLOSURETYPE_REG_E                DisclosureType = "REG_E"
	DISCLOSURETYPE_REG_CC               DisclosureType = "REG_CC"
	DISCLOSURETYPE_E_SIGN               DisclosureType = "E_SIGN"
	DISCLOSURETYPE_PRIVACY_NOTICE       DisclosureType = "PRIVACY_NOTICE"
	DISCLOSURETYPE_TERMS_AND_CONDITIONS DisclosureType = "TERMS_AND_CONDITIONS"
)

var allowedDisclosureTypeEnumValues = []DisclosureType{
	"REG_DD",
	"KYC_DATA_COLLECTION",
	"REG_E",
	"REG_CC",
	"E_SIGN",
	"PRIVACY_NOTICE",
	"TERMS_AND_CONDITIONS",
}

func (v *DisclosureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisclosureType(value)
	for _, existing := range allowedDisclosureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisclosureType", value)
}

// NewDisclosureTypeFromValue returns a pointer to a valid DisclosureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisclosureTypeFromValue(v string) (*DisclosureType, error) {
	ev := DisclosureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisclosureType: valid values are %v", v, allowedDisclosureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisclosureType) IsValid() bool {
	for _, existing := range allowedDisclosureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to disclosure_type value
func (v DisclosureType) Ptr() *DisclosureType {
	return &v
}

type NullableDisclosureType struct {
	value *DisclosureType
	isSet bool
}

func (v NullableDisclosureType) Get() *DisclosureType {
	return v.value
}

func (v *NullableDisclosureType) Set(val *DisclosureType) {
	v.value = val
	v.isSet = true
}

func (v NullableDisclosureType) IsSet() bool {
	return v.isSet
}

func (v *NullableDisclosureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisclosureType(val *DisclosureType) *NullableDisclosureType {
	return &NullableDisclosureType{value: val, isSet: true}
}

func (v NullableDisclosureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisclosureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
