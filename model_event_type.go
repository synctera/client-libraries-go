/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// EventType The reason for issuing/re-issuing a card
type EventType string

// List of event_type
const (
	EVENTTYPE_USERTRANSITION               EventType = "usertransition"
	EVENTTYPE_BUSINESSTRANSITION           EventType = "businesstransition"
	EVENTTYPE_CARDTRANSITION               EventType = "cardtransition"
	EVENTTYPE_TRANSACTION                  EventType = "transaction"
	EVENTTYPE_DIGITALWALLETTOKENTRANSITION EventType = "digitalwallettokentransition"
	EVENTTYPE_CHARGEBACKTRANSITION         EventType = "chargebacktransition"
	EVENTTYPE_COMMANDOMODETRANSITION       EventType = "commandomodetransition"
	EVENTTYPE_CASETRANSITION               EventType = "casetransition"
	EVENTTYPE_DIRECTDEPOSITTRANSITION      EventType = "directdeposittransition"
	EVENTTYPE_BANKTRANSFERTRANSITION       EventType = "banktransfertransition"
)

var allowedEventTypeEnumValues = []EventType{
	"usertransition",
	"businesstransition",
	"cardtransition",
	"transaction",
	"digitalwallettokentransition",
	"chargebacktransition",
	"commandomodetransition",
	"casetransition",
	"directdeposittransition",
	"banktransfertransition",
}

func (v *EventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventType(value)
	for _, existing := range allowedEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventType", value)
}

// NewEventTypeFromValue returns a pointer to a valid EventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypeFromValue(v string) (*EventType, error) {
	ev := EventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventType: valid values are %v", v, allowedEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventType) IsValid() bool {
	for _, existing := range allowedEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to event_type value
func (v EventType) Ptr() *EventType {
	return &v
}

type NullableEventType struct {
	value *EventType
	isSet bool
}

func (v NullableEventType) Get() *EventType {
	return v.value
}

func (v *NullableEventType) Set(val *EventType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventType(val *EventType) *NullableEventType {
	return &NullableEventType{value: val, isSet: true}
}

func (v NullableEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
