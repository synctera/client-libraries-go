/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera

import (
	"encoding/json"
	"fmt"
)

// CustomerInPath - struct for CustomerInPath
type CustomerInPath struct {
	Customer *Customer
	Prospect *Prospect
}

// CustomerAsCustomerInPath is a convenience function that returns Customer wrapped in CustomerInPath
func CustomerAsCustomerInPath(v *Customer) CustomerInPath {
	return CustomerInPath{Customer: v}
}

// ProspectAsCustomerInPath is a convenience function that returns Prospect wrapped in CustomerInPath
func ProspectAsCustomerInPath(v *Prospect) CustomerInPath {
	return CustomerInPath{Prospect: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CustomerInPath) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ACTIVE'
	if jsonDict["status"] == "ACTIVE" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DECEASED'
	if jsonDict["status"] == "DECEASED" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DENIED'
	if jsonDict["status"] == "DENIED" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DORMANT'
	if jsonDict["status"] == "DORMANT" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ESCHEAT'
	if jsonDict["status"] == "ESCHEAT" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FROZEN'
	if jsonDict["status"] == "FROZEN" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PROSPECT'
	if jsonDict["status"] == "PROSPECT" {
		// try to unmarshal JSON data into Prospect
		err = json.Unmarshal(data, &dst.Prospect)
		if err == nil {
			return nil // data stored in dst.Prospect, return on the first match
		} else {
			dst.Prospect = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Prospect: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SANCTION'
	if jsonDict["status"] == "SANCTION" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'customer'
	if jsonDict["status"] == "customer" {
		// try to unmarshal JSON data into Customer
		err = json.Unmarshal(data, &dst.Customer)
		if err == nil {
			return nil // data stored in dst.Customer, return on the first match
		} else {
			dst.Customer = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Customer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'prospect'
	if jsonDict["status"] == "prospect" {
		// try to unmarshal JSON data into Prospect
		err = json.Unmarshal(data, &dst.Prospect)
		if err == nil {
			return nil // data stored in dst.Prospect, return on the first match
		} else {
			dst.Prospect = nil
			return fmt.Errorf("Failed to unmarshal CustomerInPath as Prospect: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CustomerInPath) MarshalJSON() ([]byte, error) {
	if src.Customer != nil {
		return json.Marshal(&src.Customer)
	}

	if src.Prospect != nil {
		return json.Marshal(&src.Prospect)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CustomerInPath) GetActualInstance() interface{} {
	if obj.Customer != nil {
		return obj.Customer
	}

	if obj.Prospect != nil {
		return obj.Prospect
	}

	// all schemas are nil
	return nil
}

type NullableCustomerInPath struct {
	value *CustomerInPath
	isSet bool
}

func (v NullableCustomerInPath) Get() *CustomerInPath {
	return v.value
}

func (v *NullableCustomerInPath) Set(val *CustomerInPath) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerInPath) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerInPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerInPath(val *CustomerInPath) *NullableCustomerInPath {
	return &NullableCustomerInPath{value: val, isSet: true}
}

func (v NullableCustomerInPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerInPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
